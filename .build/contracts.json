{"contracts":{"contracts/InterestRateModel.sol:InterestRateModel":{"abi":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yOffset_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slopeFactor_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateFactorSensitivity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBase_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeSensitivity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"range_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"feeBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSensitivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedCollateralUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplierLiquidityUnderlying\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"rateFactorPrev\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"orderNotional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedCollateralUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplierLiquidityUnderlying\",\"type\":\"uint256\"}],\"name\":\"getSwapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rateFactorNew\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"range\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateFactorSensitivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slopeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"61014060405234801561001157600080fd5b50604051610c38380380610c38833981810160405260c081101561003457600080fd5b508051602082015160408301516060840151608085015160a090950151939492939192909184158015906100685750600084115b80156100745750600081115b6100c5576040805162461bcd60e51b815260206004820152601760248201527f5a65726f20706172616d73206e6f7420616c6c6f776564000000000000000000604482015290519081900360640190fd5b608086905260a085905260c084905261010083905261012082905260e08190529190610afe61013a6000398061034c52806103c052508061030452806103995250806101ed52806103f552508061019852806102e0525080610226528061032852508061026552806103705250610afe6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063cd2ccf9f1161005b578063cd2ccf9f14610107578063cf31f14f1461010f578063d250185c14610117578063e97206a91461013a57610088565b806327fc00241461008d57806358f40173146100dd57806395e911a8146100f7578063a11a65b6146100ff575b600080fd5b6100c4600480360360a08110156100a357600080fd5b50803590602081013515159060408101359060608101359060800135610142565b6040805192835260208301919091528051918290030190f35b6100e56102de565b60408051918252519081900360200190f35b6100e5610302565b6100e5610326565b6100e561034a565b6100e561036e565b6100e56004803603604081101561012d57600080fd5b5080359060200135610392565b6100e56103f3565b6000808261018e576040805162461bcd60e51b81526020600482015260146024820152730737570706c696564206c697175696469747920360641b604482015290519081900360640190fd5b60006101c36101bd7f000000000000000000000000000000000000000000000000000000000000000088610417565b85610470565b9050866101d9576101d488826104da565b6101e3565b6101e3888261052b565b91506000610211837f000000000000000000000000000000000000000000000000000000000000000061057c565b9050600061024f61024a610224866105cd565b7f00000000000000000000000000000000000000000000000000000000000000006105e1565b61063b565b9050600061028e610289610263858561068c565b7f000000000000000000000000000000000000000000000000000000000000000061052b565b6106dd565b9050600061029c8989610392565b90508a156102b5576102ae82826105e1565b96506102cf565b808211156102c7576102ae82826106f1565b600096508b95505b50505050509550959350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006103ea7f00000000000000000000000000000000000000000000000000000000000000006103e56101bd7f000000000000000000000000000000000000000000000000000000000000000087610417565b6105e1565b90505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600082610426575060006103ed565b8282028284828161043357fe5b04146103ea5760405162461bcd60e51b8152600401808060200182810382526021815260200180610aa86021913960400191505060405180910390fd5b60008082116104c6576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a20446976696465206279207a65726f0000000000000000604482015290519081900360640190fd5b60008284816104d157fe5b04949350505050565b60006001600160ff1b0382106105215760405162461bcd60e51b815260040180806020018281038252602b815260200180610993602b913960400191505060405180910390fd5b6103ea8383610746565b60006001600160ff1b0382106105725760405162461bcd60e51b8152600401808060200182810382526028815260200180610a076028913960400191505060405180910390fd5b6103ea83836107ab565b60006001600160ff1b0382106105c35760405162461bcd60e51b815260040180806020018281038252602e815260200180610a2f602e913960400191505060405180910390fd5b6103ea8383610810565b60006105d98283610810565b90505b919050565b6000828201838110156103ea576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000600382111561067e575080600160028204015b818110156106785780915060028182858161066757fe5b04018161067057fe5b049050610650565b506105dc565b81156105dc57506001919050565b60006001600160ff1b0382106106d35760405162461bcd60e51b81526004018080602001828103825260288152602001806109be6028913960400191505060405180910390fd5b6103ea83836108b9565b60008082136106ed5760006105d9565b5090565b600082821115610740576040805162461bcd60e51b81526020600482015260156024820152747375627472616374696f6e20756e646572666c6f7760581b604482015290519081900360640190fd5b50900390565b600081830381831280159061075b5750838113155b80610770575060008312801561077057508381135b6103ea5760405162461bcd60e51b8152600401808060200182810382526024815260200180610a846024913960400191505060405180910390fd5b60008282018183128015906107c05750838112155b806107d557506000831280156107d557508381125b6103ea5760405162461bcd60e51b81526004018080602001828103825260218152602001806109726021913960400191505060405180910390fd5b60008261081f575060006103ed565b826000191480156108335750600160ff1b82145b1561086f5760405162461bcd60e51b8152600401808060200182810382526027815260200180610a5d6027913960400191505060405180910390fd5b8282028284828161087c57fe5b05146103ea5760405162461bcd60e51b8152600401808060200182810382526027815260200180610a5d6027913960400191505060405180910390fd5b60008161090d576040805162461bcd60e51b815260206004820181905260248201527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604482015290519081900360640190fd5b816000191480156109215750600160ff1b83145b1561095d5760405162461bcd60e51b81526004018080602001828103825260218152602001806109e66021913960400191505060405180910390fd5b600082848161096857fe5b0594935050505056fe5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77536166654d6174683a20496e74207375627472616374696f6e206f766572666c6f77206465746563746564536166654d6174683a20496e74206469766973696f6e206f766572666c6f772064657465637465645369676e6564536166654d6174683a206469766973696f6e206f766572666c6f77536166654d6174683a20496e74206164646974696f6e206f766572666c6f77206465746563746564536166654d6174683a20496e74206d756c7469706c69636174696f6e206f766572666c6f772064657465637465645369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77536166654d6174683a204d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220fddf142a73379224df047578dd78bcc1290ca0ba9a12a6b8fcd3572bedb144b464736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yOffset_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slopeFactor_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateFactorSensitivity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBase_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeSensitivity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"range_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"feeBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSensitivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedCollateralUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplierLiquidityUnderlying\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"rateFactorPrev\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"orderNotional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedCollateralUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplierLiquidityUnderlying\",\"type\":\"uint256\"}],\"name\":\"getSwapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rateFactorNew\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"range\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateFactorSensitivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slopeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/InterestRateModel.sol\":\"InterestRateModel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport {InterestRateModelInterface} from \\\"./RhoInterfaces.sol\\\";\\n\\ncontract InterestRateModel is InterestRateModelInterface {\\n\\n\\tuint public immutable yOffset;\\n\\tuint public immutable slopeFactor;\\n\\tuint public immutable rateFactorSensitivity;\\n\\tuint public immutable range;\\n\\tuint public immutable feeBase;\\n\\tuint public immutable feeSensitivity;\\n\\n\\tconstructor(\\n\\t\\tuint yOffset_,\\n\\t\\tuint slopeFactor_,\\n\\t\\tuint rateFactorSensitivity_,\\n\\t\\tuint feeBase_,\\n\\t\\tuint feeSensitivity_,\\n\\t\\tuint range_\\n\\t) public {\\n\\t\\trequire(slopeFactor_ > 0 && rateFactorSensitivity_ > 0 && range_ > 0 , \\\"Zero params not allowed\\\");\\n\\n\\t\\tyOffset = yOffset_;\\n\\t\\tslopeFactor = slopeFactor_;\\n\\t\\trateFactorSensitivity = rateFactorSensitivity_;\\n\\t\\tfeeBase = feeBase_;\\n\\t\\tfeeSensitivity = feeSensitivity_;\\n\\t\\trange = range_;\\n\\t}\\n\\n\\t/* @dev Calculates the per-block interest rate to offer an incoming swap based on the rateFactor stored in Rho.sol.\\n\\t * @param userPayingFixed : If the user is paying fixed in incoming swap\\n\\t * @param orderNotional : Notional order size of the incoming swap\\n\\t * @param lockedCollateralUnderlying : The amount of the protocol's liquidity that is locked at the time of the swap in underlying tokens\\n\\t * @param supplierLiquidityUnderlying : Total amount of the protocol's liquidity in underlying tokens\\n\\t */\\n\\tfunction getSwapRate(\\n\\t\\tint rateFactorPrev,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tuint lockedCollateralUnderlying,\\n\\t\\tuint supplierLiquidityUnderlying\\n\\t) external override view returns (uint rate, int rateFactorNew) {\\n\\t\\trequire(supplierLiquidityUnderlying != 0, \\\"supplied liquidity 0\\\");\\n\\t\\tuint rfDelta = div(mul(rateFactorSensitivity, orderNotional), supplierLiquidityUnderlying);\\n\\t\\trateFactorNew = userPayingFixed ? add(rateFactorPrev, rfDelta) : sub(rateFactorPrev, rfDelta);\\n\\n\\t\\tint num = mul(rateFactorNew, range);\\n\\t\\tuint denom = sqrt(add(square(rateFactorNew), slopeFactor));\\n\\n\\t\\tuint baseRate = toZero(add(div(num, denom), yOffset)); // can not be negative\\n\\t\\tuint fee = getFee(lockedCollateralUnderlying, supplierLiquidityUnderlying);\\n\\n\\t\\t// base + yOffset +- fee\\n\\t\\tif (userPayingFixed) {\\n\\t\\t\\trate = add(baseRate, fee);\\n\\t\\t} else {\\n\\t\\t\\tif (baseRate > fee) {\\n\\t\\t\\t\\trate = sub(baseRate, fee);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trate = 0;\\n\\t\\t\\t\\t// if the rate is negative, don't push rate factor even lower\\n\\t\\t\\t\\trateFactorNew = rateFactorPrev;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// @dev Calculates the fee to add to the rate. fee = feeBase + feeSensitivity * locked / total\\n\\tfunction getFee(uint lockedCollateralUnderlying, uint supplierLiquidityUnderlying) public view returns (uint) {\\n\\t\\treturn add(feeBase, div(mul(feeSensitivity, lockedCollateralUnderlying), supplierLiquidityUnderlying));\\n\\t}\\n\\n    // ** Interest Rate Model Math Library **//\\n\\n    // Source: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/libraries/Math.sol\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n\\t// ** UINT SAFE MATH ** //\\n\\t// Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\n\\n\\tfunction mul(uint a, uint b) internal pure returns (uint) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: Multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        require(b > 0, \\\"SafeMath: Divide by zero\\\");\\n        uint c = a / b;\\n        return c;\\n    }\\n\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint a, uint b) pure internal returns (uint) {\\n        require(b <= a, \\\"subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n   \\t// ** INT SAFE MATH ** //\\n   \\t// Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SignedSafeMath.sol\\n\\tint constant private _INT_MIN = -2**255;\\n\\n    function div(int a, int b) internal pure returns (int) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int c = a / b;\\n\\n        return c;\\n    }\\n\\n    function mul(int a, int b) internal pure returns (int) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function add(int a, int b) internal pure returns (int) {\\n        int c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n   \\t// ** INT => UINT MATH ** //\\n\\n   \\t// Set negative ints to 0\\n    function toZero(int x) internal pure returns (uint) {\\n\\t\\treturn x > 0 ? uint(x) : 0;\\n\\t}\\n\\n\\tfunction square(int a) internal pure returns (uint) {\\n\\t\\treturn uint(mul(a, a));\\n\\t}\\n\\n\\t// ** UINT => INT MATH ** //\\n\\n\\tint constant private _INT_MAX = 2**255 - 1;\\n\\n    function add(int a, uint b) internal pure returns (int){\\n        require(b < uint(_INT_MAX), \\\"SafeMath: Int addition overflow detected\\\");\\n        return add(a, int(b));\\n    }\\n\\n\\tfunction mul(int a, uint b) internal pure returns (int) {\\n        require(b < uint(_INT_MAX), \\\"SafeMath: Int multiplication overflow detected\\\");\\n        return mul(a, int(b));\\n\\t}\\n\\n    function sub(int a, uint b) internal pure returns (int){\\n        require(b < uint(_INT_MAX), \\\"SafeMath: Int subtraction overflow detected\\\");\\n        return sub(a, int(b));\\n    }\\n\\n\\tfunction div(int a, uint b) internal pure returns (int) {\\n        require(b < uint(_INT_MAX), \\\"SafeMath: Int division overflow detected\\\");\\n        return div(a, int(b));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x3687e4d83502a5bb22609a621c023285c7a88fbde0317c3d2ad619352f013b09\"},\"contracts/RhoInterfaces.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\ninterface InterestRateModelInterface {\\n\\tfunction getSwapRate(\\n\\t\\tint rateFactorPrev,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tuint lockedCollateralUnderlying,\\n\\t\\tuint supplierLiquidityUnderlying\\n\\t) external view returns (uint rate, int rateFactorNew);\\n}\\n\\ninterface ERC20Interface {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function balanceOf(address who) external returns (uint);\\n}\\n\\ninterface CompInterface is ERC20Interface{\\n\\tfunction delegate(address delegatee) external;\\n}\\n\\ninterface CTokenInterface is ERC20Interface {\\n\\tfunction borrowIndex() external view returns (uint);\\n\\tfunction accrualBlockNumber() external view returns(uint);\\n\\tfunction borrowRatePerBlock() external view returns(uint);\\n\\tfunction exchangeRateStored() external view returns (uint);\\n}\\n\\nabstract contract RhoInterface is Types {\\n\\tfunction supply(uint cTokenSupplyAmount) external virtual;\\n\\tfunction remove(uint removeCTokenAmount) external virtual;\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) external virtual;\\n\\n\\tevent Supply(address indexed supplier, uint cTokenSupplyAmount, uint newSupplyAmount);\\n\\tevent Remove(address indexed supplier, uint removeCTokenAmount, uint newSupplyValue);\\n\\tevent OpenSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress indexed owner\\n\\t);\\n\\tevent CloseSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\taddress indexed owner,\\n\\t\\tuint userPayout,\\n\\t\\tuint penalty,\\n\\t\\tuint benchmarkIndexFinal\\n\\t);\\n\\tevent Accrue(uint supplierLiquidityNew, uint lockedCollateralNew);\\n\\tevent SetInterestRateModel(address newModel, address oldModel);\\n\\tevent SetPause(bool isPaused);\\n\\tevent AdminRenounced();\\n\\tevent CompTransferred(address dest, uint amount);\\n\\tevent CompDelegated(address delegatee);\\n\\tevent SetCollateralRequirements(uint minFloatRateMantissa, uint maxFloatRateMantissa);\\n\\tevent AdminChanged(address oldAdmin, address newAdmin);\\n\\tevent SetLiquidityLimit(uint limit);\\n\\n\\tInterestRateModelInterface public interestRateModel;\\n\\n\\tuint public lastAccrualBlock;\\n\\tExp public benchmarkIndexStored;\\n\\n\\t/* Notional size of each leg, one adjusting for compounding and one static */\\n\\tuint public notionalReceivingFixed;\\n\\tuint public notionalPayingFloat;\\n\\n\\tuint public notionalPayingFixed;\\n\\tuint public notionalReceivingFloat;\\n\\n\\t/* Measure of outstanding swap obligations. 1 Unit = 1e18 notional * 1 block. Used to calculate collateral requirements */\\n\\tint public parBlocksReceivingFixed;\\n\\tint public parBlocksPayingFixed;\\n\\n\\t/* Per block fixed / float interest rates used in collateral calculations */\\n\\tExp public avgFixedRateReceiving;\\n\\tExp public avgFixedRatePaying;\\n\\n\\t/* Per block float rate bounds used in collateral calculations */\\n\\tExp public maxFloatRate;\\n\\tExp public minFloatRate;\\n\\n\\t/* Protocol PnL */\\n\\tuint public supplyIndex;\\n\\tCTokenAmount public supplierLiquidity;\\n\\n\\tint public rateFactor;// for interest rate model\\n\\n\\taddress public admin;\\n\\n\\t/* Pausing safety functions that can pause open and supply functions */\\n\\tbool public isPaused;\\n\\tCTokenAmount public liquidityLimit;\\n\\n\\tmapping(address => SupplyAccount) public supplyAccounts;\\n\\tmapping(bytes32 => bool) public swaps;\\n\\n\\tstruct SupplyAccount {\\n\\t\\tCTokenAmount amount;\\n\\t\\tuint lastBlock;\\n\\t\\tuint index;\\n\\t}\\n\\n\\tstruct Swap {\\n\\t\\tbool userPayingFixed;\\n\\t\\tuint notionalAmount;\\n\\t\\tuint swapFixedRateMantissa;\\n\\t\\tuint benchmarkIndexInit;\\n\\t\\tuint userCollateralCTokens;\\n\\t\\tuint initBlock;\\n\\t\\taddress owner;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xb5de435fab04d6ea7331a179997e5df99991e12b1eb651b48f66163aff0e44b5\"},\"contracts/Types.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\ncontract Types {\\n\\n    /*@dev A type to store amounts of cTokens, to make sure they are not confused with amounts of the underlying */\\n    struct CTokenAmount {\\n        uint val;\\n    }\\n\\n    /* @dev A type to store numbers scaled up by 18 decimals*/\\n    struct Exp {\\n        uint mantissa;\\n    }\\n}\\n\",\"keccak256\":\"0x3420c97975694664fba3d84ac78149b669b452a2ac4aee8bab41e02407a494d5\"}},\"version\":1}"},"contracts/Math.sol:Math":{"abi":"[]","bin":"60a0604052670de0b6b3a76400006080819052600055348015602057600080fd5b50603f80602e6000396000f3fe6080604052600080fdfea2646970667358221220e911cde56e1634e98f1690231998a0a9183c66bd954643c0e38a8e281c04fee164736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Math.sol\":\"Math\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Math.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\n/* @dev A safe math lib for Rho data types. \\n   Note: always returns type of left side param */\\ncontract Math is Types {\\n\\n\\tuint constant EXP_SCALE = 1e18;\\n    Exp ONE_EXP = Exp({mantissa: EXP_SCALE});\\n\\n    function _toExp(uint num) pure internal returns (Exp memory) {\\n    \\treturn Exp({mantissa: num});\\n    }\\n\\n    function _toUint(int a) pure internal returns (uint) {\\n        return a > 0 ? uint(a) : 0;\\n    }\\n\\n    function _lt(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (bool) {\\n        return a.val < b.val;\\n    }\\n\\n    function _lte(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (bool) {\\n        return a.val <= b.val;\\n    }\\n\\n    function _add(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _add(a.mantissa, b.mantissa)});\\n    }\\n\\n    function _add(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _add(a.val, b.val)});\\n    }\\n\\n    function _add(uint a, uint b) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"addition overflow\\\");\\n        return c;\\n    }\\n\\n    function _sub(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _sub(a.mantissa, b.mantissa)});\\n    }\\n\\n    function _subToZero(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        if (b.val >= a.val) {\\n            return CTokenAmount({val: 0});\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _subToZero(uint a, uint b) pure internal returns (uint) {\\n        if (b >= a) {\\n            return 0;\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _subToZero(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        if (b.mantissa >= a.mantissa) {\\n            return Exp({mantissa: 0});\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _sub(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _sub(a.val, b.val)});\\n    }\\n\\n    function _sub(uint a, uint b) pure internal returns (uint) {\\n        require(b <= a, \\\"subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n    function _sub(int a, uint b) pure internal returns (int) {\\n        int c = a - int(b);\\n        require(a >= c, \\\"int - uint underflow\\\");\\n        return c;\\n    }\\n\\n    function _add(int a, uint b) pure internal returns (int) {\\n        int c = a + int(b);\\n        require(a <= c, \\\"int + uint overflow\\\");\\n        return c;\\n    }\\n\\n    function _mul(uint a, CTokenAmount memory b) pure internal returns (uint) {\\n        return _mul(a, b.val);\\n    }\\n\\n    function _mul(CTokenAmount memory a, uint b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _mul(a.val, b)});\\n    }\\n\\n    function _mul(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _mul(a.mantissa, b.mantissa) / EXP_SCALE});\\n    }\\n\\n    function _mul(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _mul(a.mantissa, b)});\\n    }\\n\\n    function _mul(uint a, Exp memory b) pure internal returns (uint) {\\n        return _mul(a, b.mantissa) / EXP_SCALE;\\n    }\\n\\n    function _mul(uint a, uint b) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function _div(uint a, CTokenAmount memory b) pure internal returns (uint) {\\n        return _div(a, b.val);\\n    }\\n\\n    function _div(CTokenAmount memory a, uint b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _div(a.val, b)});\\n    }\\n\\n    function _div(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _div(_mul(a.mantissa, EXP_SCALE), b.mantissa)});\\n    }\\n\\n    function _div(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _div(a.mantissa, b)});\\n    }\\n\\n    function _div(uint a, Exp memory b) pure internal returns (uint) {\\n        return _div(_mul(a, EXP_SCALE), b.mantissa);\\n    }\\n\\n    function _div(uint a, uint b) pure internal returns (uint) {\\n        require(b > 0, \\\"divide by zero\\\");\\n        return a / b;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x8c6200920feaf6aa32f936d0daf59a94bc84b9b5808c425db8b1eba60bd65e06\"},\"contracts/Types.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\ncontract Types {\\n\\n    /*@dev A type to store amounts of cTokens, to make sure they are not confused with amounts of the underlying */\\n    struct CTokenAmount {\\n        uint val;\\n    }\\n\\n    /* @dev A type to store numbers scaled up by 18 decimals*/\\n    struct Exp {\\n        uint mantissa;\\n    }\\n}\\n\",\"keccak256\":\"0x3420c97975694664fba3d84ac78149b669b452a2ac4aee8bab41e02407a494d5\"}},\"version\":1}"},"contracts/Rho.sol:Rho":{"abi":"[{\"inputs\":[{\"internalType\":\"contract InterestRateModelInterface\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"contract CTokenInterface\",\"name\":\"cToken_\",\"type\":\"address\"},{\"internalType\":\"contract CompInterface\",\"name\":\"comp_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFloatRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFloatRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapMinDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyMinDuration_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityLimitCTokens_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplierLiquidityNew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateralNew\",\"type\":\"uint256\"}],\"name\":\"Accrue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benchmarkIndexFinal\",\"type\":\"uint256\"}],\"name\":\"CloseSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"CompDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benchmarkIndexInit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFixedRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userCollateralCTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OpenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeCTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyValue\",\"type\":\"uint256\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFloatRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFloatRateMantissa\",\"type\":\"uint256\"}],\"name\":\"SetCollateralRequirements\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldModel\",\"type\":\"address\"}],\"name\":\"SetInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetLiquidityLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"SetPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cTokenSupplyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyAmount\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOSE_GRACE_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLOSE_PENALTY_PER_BLOCK_MANTISSA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SWAP_NOTIONAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPPLY_MIN_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_MIN_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"_changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"_delegateComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused_\",\"type\":\"bool\"}],\"name\":\"_pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minFloatRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFloatRateMantissa_\",\"type\":\"uint256\"}],\"name\":\"_setCollateralRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InterestRateModelInterface\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"_setLiquidityLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_transferComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgFixedRatePaying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgFixedRateReceiving\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"benchmarkIndexStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"contract CTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"benchmarkIndexInit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFixedRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollateralCTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"contract CompInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBenchmarkIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accruedBlocks\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getLockedCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"lockedCollateral\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"parBlocksReceivingFixedNew\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"parBlocksPayingFixedNew\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"fixedRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getPayFixedInitCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"fixedRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getReceiveFixedInitCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accruedBlocks\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"floatRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getSupplierLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"supplierLiquidityNew\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"orderNotional\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"lockedCollateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"supplierLiquidity_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getSwapRate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModelInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAccrualBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFloatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFloatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalPayingFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalPayingFloat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalReceivingFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalReceivingFloat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumFixedRateMantissa\",\"type\":\"uint256\"}],\"name\":\"openPayFixedSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFixedRateMantissa\",\"type\":\"uint256\"}],\"name\":\"openReceiveFixedSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parBlocksPayingFixed\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parBlocksReceivingFixed\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateFactor\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"removeCTokenAmount\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplierLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cTokenSupplyAmount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"toCTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"toUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract InterestRateModelInterface\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"contract CTokenInterface\",\"name\":\"cToken_\",\"type\":\"address\"},{\"internalType\":\"contract CompInterface\",\"name\":\"comp_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFloatRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFloatRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapMinDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyMinDuration_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityLimitCTokens_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplierLiquidityNew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateralNew\",\"type\":\"uint256\"}],\"name\":\"Accrue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benchmarkIndexFinal\",\"type\":\"uint256\"}],\"name\":\"CloseSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"CompDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benchmarkIndexInit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFixedRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userCollateralCTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OpenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeCTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyValue\",\"type\":\"uint256\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFloatRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFloatRateMantissa\",\"type\":\"uint256\"}],\"name\":\"SetCollateralRequirements\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldModel\",\"type\":\"address\"}],\"name\":\"SetInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetLiquidityLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"SetPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cTokenSupplyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyAmount\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOSE_GRACE_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLOSE_PENALTY_PER_BLOCK_MANTISSA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SWAP_NOTIONAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPPLY_MIN_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_MIN_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"_changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"_delegateComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused_\",\"type\":\"bool\"}],\"name\":\"_pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minFloatRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFloatRateMantissa_\",\"type\":\"uint256\"}],\"name\":\"_setCollateralRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InterestRateModelInterface\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"_setLiquidityLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_transferComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgFixedRatePaying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgFixedRateReceiving\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"benchmarkIndexStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"contract CTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"benchmarkIndexInit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFixedRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollateralCTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"contract CompInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBenchmarkIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accruedBlocks\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getLockedCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"lockedCollateral\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"parBlocksReceivingFixedNew\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"parBlocksPayingFixedNew\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"fixedRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getPayFixedInitCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"fixedRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getReceiveFixedInitCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accruedBlocks\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"floatRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getSupplierLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"supplierLiquidityNew\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"orderNotional\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"lockedCollateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"supplierLiquidity_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getSwapRate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModelInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAccrualBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFloatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFloatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalPayingFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalPayingFloat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalReceivingFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalReceivingFloat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumFixedRateMantissa\",\"type\":\"uint256\"}],\"name\":\"openPayFixedSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFixedRateMantissa\",\"type\":\"uint256\"}],\"name\":\"openReceiveFixedSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parBlocksPayingFixed\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parBlocksReceivingFixed\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateFactor\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"removeCTokenAmount\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplierLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cTokenSupplyAmount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"toCTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"toUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{\"_setInterestRateModel(address)\":{\"notice\":\"ADMIN FUNCTIONS *\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Rho.sol\":\"Rho\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Math.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\n/* @dev A safe math lib for Rho data types. \\n   Note: always returns type of left side param */\\ncontract Math is Types {\\n\\n\\tuint constant EXP_SCALE = 1e18;\\n    Exp ONE_EXP = Exp({mantissa: EXP_SCALE});\\n\\n    function _toExp(uint num) pure internal returns (Exp memory) {\\n    \\treturn Exp({mantissa: num});\\n    }\\n\\n    function _toUint(int a) pure internal returns (uint) {\\n        return a > 0 ? uint(a) : 0;\\n    }\\n\\n    function _lt(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (bool) {\\n        return a.val < b.val;\\n    }\\n\\n    function _lte(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (bool) {\\n        return a.val <= b.val;\\n    }\\n\\n    function _add(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _add(a.mantissa, b.mantissa)});\\n    }\\n\\n    function _add(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _add(a.val, b.val)});\\n    }\\n\\n    function _add(uint a, uint b) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"addition overflow\\\");\\n        return c;\\n    }\\n\\n    function _sub(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _sub(a.mantissa, b.mantissa)});\\n    }\\n\\n    function _subToZero(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        if (b.val >= a.val) {\\n            return CTokenAmount({val: 0});\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _subToZero(uint a, uint b) pure internal returns (uint) {\\n        if (b >= a) {\\n            return 0;\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _subToZero(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        if (b.mantissa >= a.mantissa) {\\n            return Exp({mantissa: 0});\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _sub(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _sub(a.val, b.val)});\\n    }\\n\\n    function _sub(uint a, uint b) pure internal returns (uint) {\\n        require(b <= a, \\\"subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n    function _sub(int a, uint b) pure internal returns (int) {\\n        int c = a - int(b);\\n        require(a >= c, \\\"int - uint underflow\\\");\\n        return c;\\n    }\\n\\n    function _add(int a, uint b) pure internal returns (int) {\\n        int c = a + int(b);\\n        require(a <= c, \\\"int + uint overflow\\\");\\n        return c;\\n    }\\n\\n    function _mul(uint a, CTokenAmount memory b) pure internal returns (uint) {\\n        return _mul(a, b.val);\\n    }\\n\\n    function _mul(CTokenAmount memory a, uint b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _mul(a.val, b)});\\n    }\\n\\n    function _mul(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _mul(a.mantissa, b.mantissa) / EXP_SCALE});\\n    }\\n\\n    function _mul(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _mul(a.mantissa, b)});\\n    }\\n\\n    function _mul(uint a, Exp memory b) pure internal returns (uint) {\\n        return _mul(a, b.mantissa) / EXP_SCALE;\\n    }\\n\\n    function _mul(uint a, uint b) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function _div(uint a, CTokenAmount memory b) pure internal returns (uint) {\\n        return _div(a, b.val);\\n    }\\n\\n    function _div(CTokenAmount memory a, uint b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _div(a.val, b)});\\n    }\\n\\n    function _div(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _div(_mul(a.mantissa, EXP_SCALE), b.mantissa)});\\n    }\\n\\n    function _div(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _div(a.mantissa, b)});\\n    }\\n\\n    function _div(uint a, Exp memory b) pure internal returns (uint) {\\n        return _div(_mul(a, EXP_SCALE), b.mantissa);\\n    }\\n\\n    function _div(uint a, uint b) pure internal returns (uint) {\\n        require(b > 0, \\\"divide by zero\\\");\\n        return a / b;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x8c6200920feaf6aa32f936d0daf59a94bc84b9b5808c425db8b1eba60bd65e06\"},\"contracts/Rho.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Math.sol\\\";\\nimport {RhoInterface, CTokenInterface, CompInterface, InterestRateModelInterface} from \\\"./RhoInterfaces.sol\\\";\\n\\n/* @dev:\\n * CTokens are used as collateral. \\\"Underlying\\\" in Rho refers to the collateral CToken's underlying token.\\n * An Exp is a data type with 18 decimals, used for scaling up and precise calculations */\\ncontract Rho is RhoInterface, Math {\\n\\n\\tCTokenInterface public immutable cToken;\\n\\tCompInterface public immutable comp;\\n\\n\\tuint public immutable SWAP_MIN_DURATION;\\n\\tuint public immutable SUPPLY_MIN_DURATION;\\n\\tuint public immutable MIN_SWAP_NOTIONAL = 1e18;\\n\\tuint public immutable CLOSE_GRACE_PERIOD_BLOCKS = 3000; // ~12.5 hrs\\n\\tuint public immutable CLOSE_PENALTY_PER_BLOCK_MANTISSA = 1e14;// 1% (1e16) every 25 min (100 blocks)\\n\\n\\tconstructor (\\n\\t\\tInterestRateModelInterface interestRateModel_,\\n\\t\\tCTokenInterface cToken_,\\n\\t\\tCompInterface comp_,\\n\\t\\tuint minFloatRateMantissa_,\\n\\t\\tuint maxFloatRateMantissa_,\\n\\t\\tuint swapMinDuration_,\\n\\t\\tuint supplyMinDuration_,\\n\\t\\taddress admin_,\\n\\t\\tuint liquidityLimitCTokens_\\n\\t) public {\\n\\t\\trequire(minFloatRateMantissa_ < maxFloatRateMantissa_, \\\"Min float rate must be below max float rate\\\");\\n\\n\\t\\tinterestRateModel = interestRateModel_;\\n\\t\\tcToken = cToken_;\\n\\t\\tcomp = comp_;\\n\\t\\tminFloatRate = _toExp(minFloatRateMantissa_);\\n\\t\\tmaxFloatRate = _toExp(maxFloatRateMantissa_);\\n\\t\\tSWAP_MIN_DURATION = swapMinDuration_;\\n\\t\\tSUPPLY_MIN_DURATION = supplyMinDuration_;\\n\\t\\tadmin = admin_;\\n\\n\\t\\tsupplyIndex = ONE_EXP.mantissa;\\n\\t\\tbenchmarkIndexStored = _toExp(cToken_.borrowIndex());\\n\\t\\tisPaused = false;\\n\\t\\tliquidityLimit = CTokenAmount({val:liquidityLimitCTokens_});\\n\\t}\\n\\n\\t/* @dev Supplies liquidity to the protocol. Become the counterparty for all swap traders, in return for fees.\\n\\t * @param cTokenSupplyAmount Amount to supply, in CTokens.\\n\\t */\\n\\tfunction supply(uint cTokenSupplyAmount) public override {\\n\\t\\tCTokenAmount memory supplyAmount = CTokenAmount({val: cTokenSupplyAmount});\\n\\t\\tCTokenAmount memory supplierLiquidityNew = _add(supplierLiquidity, supplyAmount);\\n\\t\\t\\n\\t\\trequire(_lt(supplierLiquidityNew, liquidityLimit), \\\"Supply paused, above liquidity limit\\\");\\n\\t\\trequire(isPaused == false, \\\"Market paused\\\");\\n\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\taccrue(cTokenExchangeRate);\\n\\t\\tCTokenAmount memory prevSupply = supplyAccounts[msg.sender].amount;\\n\\n\\t\\tCTokenAmount memory truedUpPrevSupply;\\n\\t\\tif (prevSupply.val == 0) {\\n\\t\\t\\ttruedUpPrevSupply = CTokenAmount({val: 0});\\n\\t\\t} else {\\n\\t\\t\\tuint prevIndex = supplyAccounts[msg.sender].index;\\n\\t\\t\\ttruedUpPrevSupply = _div(_mul(prevSupply, supplyIndex), prevIndex);\\n\\t\\t}\\n\\n\\t\\tCTokenAmount memory newSupplyAmount = _add(truedUpPrevSupply, supplyAmount);\\n\\n\\t\\temit Supply(msg.sender, cTokenSupplyAmount, newSupplyAmount.val);\\n\\n\\t\\tsupplyAccounts[msg.sender].amount = newSupplyAmount;\\n\\t\\tsupplyAccounts[msg.sender].lastBlock = getBlockNumber();\\n\\t\\tsupplyAccounts[msg.sender].index = supplyIndex;\\n\\n\\t\\tsupplierLiquidity = supplierLiquidityNew;\\n\\n\\t\\ttransferIn(msg.sender, supplyAmount);\\n\\t}\\n\\n\\t/* @dev Remove liquidity from protocol. Can only perform after a waiting period from supplying, to prevent interest rate manipulation\\n\\t * @param removeCTokenAmount Amount of CTokens to remove. 0 removes all CTokens.\\n\\t */\\n\\tfunction remove(uint removeCTokenAmount) public override {\\n\\t\\tCTokenAmount memory removeAmount = CTokenAmount({val: removeCTokenAmount});\\n\\t\\tSupplyAccount memory account = supplyAccounts[msg.sender];\\n\\t\\trequire(account.amount.val > 0, \\\"Must withdraw from active account\\\");\\n\\t\\trequire(getBlockNumber() - account.lastBlock >= SUPPLY_MIN_DURATION, \\\"Liquidity must be supplied a minimum duration\\\");\\n\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\tCTokenAmount memory lockedCollateral = accrue(cTokenExchangeRate);\\n\\t\\tCTokenAmount memory truedUpAccountValue = _div(_mul(account.amount, supplyIndex), account.index);\\n\\n\\t\\t// Remove all liquidity\\n\\t\\tif (removeAmount.val == 0) {\\n\\t\\t\\tremoveAmount = truedUpAccountValue;\\n\\t\\t}\\n\\t\\trequire(_lte(removeAmount, truedUpAccountValue), \\\"Trying to remove more than account value\\\");\\n\\t\\tCTokenAmount memory unlockedCollateral = _sub(supplierLiquidity, lockedCollateral);\\n\\t\\t\\n\\t\\trequire(_lte(removeAmount, unlockedCollateral), \\\"Removing more liquidity than is unlocked\\\");\\n\\t\\trequire(_lte(removeAmount, supplierLiquidity), \\\"Removing more than total supplier liquidity\\\");\\n\\n\\t\\tCTokenAmount memory newAccountValue = _sub(truedUpAccountValue, removeAmount);\\n\\n\\t\\temit Remove(msg.sender, removeCTokenAmount, newAccountValue.val);\\n\\n\\t\\tsupplyAccounts[msg.sender].lastBlock = getBlockNumber();\\n\\t\\tsupplyAccounts[msg.sender].index = supplyIndex;\\n\\t\\tsupplyAccounts[msg.sender].amount = newAccountValue;\\n\\n\\t\\tsupplierLiquidity = _sub(supplierLiquidity, removeAmount);\\n\\n\\t\\ttransferOut(msg.sender, removeAmount);\\n\\t}\\n\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) public override returns(bytes32 swapHash) {\\n\\t\\treturn openInternal(true, notionalAmount, maximumFixedRateMantissa);\\n\\t}\\n\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) public override returns(bytes32 swapHash) {\\n\\t\\treturn openInternal(false, notionalAmount, minFixedRateMantissa);\\n\\t}\\n\\n\\t/* @dev Opens a new interest rate swap\\n\\t * @param userPayingFixed : The user can choose if they want to receive fixed or pay fixed (the protocol will take the opposite side)\\n\\t * @param notionalAmount : The principal that interest rate payments will be based on\\n\\t * @param fixedRateLimitMantissa : The maximum (if payingFixed) or minimum (if receivingFixed) rate the swap should succeed at. Prevents frontrunning attacks.\\n\\t \\t* The amount of interest to pay over 2,102,400 blocks (~1 year), with 18 decimals of precision. Eg: 5% per block-year => 0.5e18.\\n\\t*/\\n\\tfunction openInternal(bool userPayingFixed, uint notionalAmount, uint fixedRateLimitMantissa) internal returns (bytes32 swapHash) {\\n\\t\\trequire(isPaused == false, \\\"Market paused\\\");\\n\\t\\trequire(notionalAmount >= MIN_SWAP_NOTIONAL, \\\"Swap notional amount must exceed minimum\\\");\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\n\\t\\tCTokenAmount memory lockedCollateral = accrue(cTokenExchangeRate);\\n\\n\\t\\tCTokenAmount memory supplierLiquidityTemp = supplierLiquidity; // copy to memory for gas\\n\\t\\trequire(_lt(supplierLiquidityTemp, liquidityLimit), \\\"Open paused, above liquidity limit\\\");\\n\\t\\t\\n\\t\\t(Exp memory swapFixedRate, int rateFactorNew) = getSwapRate(userPayingFixed, notionalAmount, lockedCollateral, supplierLiquidityTemp, cTokenExchangeRate);\\n\\t\\tCTokenAmount memory userCollateralCTokens;\\n\\t\\tif (userPayingFixed) {\\n\\t\\t\\trequire(swapFixedRate.mantissa <= fixedRateLimitMantissa, \\\"The fixed rate Rho would receive is above user's limit\\\");\\n\\t\\t\\tCTokenAmount memory lockedCollateralHypothetical = _add(lockedCollateral, getReceiveFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate));\\n\\t\\t\\trequire(_lte(lockedCollateralHypothetical, supplierLiquidityTemp), \\\"Insufficient protocol collateral\\\");\\n\\t\\t\\tuserCollateralCTokens = openPayFixedSwapInternal(notionalAmount, swapFixedRate, cTokenExchangeRate);\\n\\t\\t} else {\\n\\t\\t\\trequire(swapFixedRate.mantissa >= fixedRateLimitMantissa, \\\"The fixed rate Rho would pay is below user's limit\\\");\\n\\t\\t\\tCTokenAmount memory lockedCollateralHypothetical = _add(lockedCollateral, getPayFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate));\\n\\t\\t\\trequire(_lte(lockedCollateralHypothetical, supplierLiquidityTemp), \\\"Insufficient protocol collateral\\\");\\n\\t\\t\\tuserCollateralCTokens = openReceiveFixedSwapInternal(notionalAmount, swapFixedRate, cTokenExchangeRate);\\n\\t\\t}\\n\\n\\t\\tswapHash = keccak256(abi.encode(\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexStored.mantissa,\\n\\t\\t\\tgetBlockNumber(),\\n\\t\\t\\tswapFixedRate.mantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens.val,\\n\\t\\t\\tmsg.sender\\n\\t\\t));\\n\\n\\t\\trequire(swaps[swapHash] == false, \\\"Duplicate swap\\\");\\n\\n\\t\\temit OpenSwap(\\n\\t\\t\\tswapHash,\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexStored.mantissa,\\n\\t\\t\\tgetBlockNumber(),\\n\\t\\t\\tswapFixedRate.mantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens.val,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\n\\t\\tswaps[swapHash] = true;\\n\\t\\trateFactor = rateFactorNew;\\n\\t\\ttransferIn(msg.sender, userCollateralCTokens);\\n\\t}\\n\\n\\n\\t// @dev User is paying fixed, protocol is receiving fixed\\n\\tfunction openPayFixedSwapInternal(uint notionalAmount, Exp memory swapFixedRate, Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory userCollateralCTokens) {\\n\\t\\tuint notionalReceivingFixedNew = _add(notionalReceivingFixed, notionalAmount);\\n\\t\\tuint notionalPayingFloatNew = _add(notionalPayingFloat, notionalAmount);\\n\\n\\t\\tint parBlocksReceivingFixedNew = _add(parBlocksReceivingFixed, _mul(SWAP_MIN_DURATION, notionalAmount));\\n\\n\\t\\t/* avgFixedRateReceivingNew = (avgFixedRateReceiving * notionalReceivingFixed + notionalAmount * swapFixedRate) / (notionalReceivingFixed + notionalAmount);*/\\n\\t\\tExp memory priorFixedReceivingRate = _mul(avgFixedRateReceiving, notionalReceivingFixed);\\n\\t\\tExp memory orderFixedReceivingRate = _mul(swapFixedRate, notionalAmount);\\n\\t\\tExp memory avgFixedRateReceivingNew = _div(_add(priorFixedReceivingRate, orderFixedReceivingRate), notionalReceivingFixedNew);\\n\\n\\t\\tuserCollateralCTokens = getPayFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate);\\n\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tnotionalReceivingFixed = notionalReceivingFixedNew;\\n\\t\\tavgFixedRateReceiving = avgFixedRateReceivingNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\n\\t\\treturn userCollateralCTokens;\\n\\t}\\n\\n\\t// @dev User is receiving fixed, protocol is paying fixed\\n\\tfunction openReceiveFixedSwapInternal(uint notionalAmount, Exp memory swapFixedRate, Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory userCollateralCTokens) {\\n\\t\\tuint notionalPayingFixedNew = _add(notionalPayingFixed, notionalAmount);\\n\\t\\tuint notionalReceivingFloatNew = _add(notionalReceivingFloat, notionalAmount);\\n\\n\\t\\tint parBlocksPayingFixedNew = _add(parBlocksPayingFixed, _mul(SWAP_MIN_DURATION, notionalAmount));\\n\\n\\t\\t/* avgFixedRatePayingNew = (avgFixedRatePaying * notionalPayingFixed + notionalAmount * swapFixedRate) / (notionalPayingFixed + notionalAmount) */\\n\\t\\tExp memory priorFixedPayingRate = _mul(avgFixedRatePaying, notionalPayingFixed);\\n\\t\\tExp memory orderFixedPayingRate = _mul(swapFixedRate, notionalAmount);\\n\\t\\tExp memory avgFixedRatePayingNew = _div(_add(priorFixedPayingRate, orderFixedPayingRate), notionalPayingFixedNew);\\n\\n\\t\\tuserCollateralCTokens = getReceiveFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate);\\n\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\t\\tnotionalPayingFixed = notionalPayingFixedNew;\\n\\t\\tavgFixedRatePaying = avgFixedRatePayingNew;\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\n\\t\\treturn userCollateralCTokens;\\n\\t}\\n\\n\\t/* @dev Closes an existing swap, after the min swap duration. Float payment continues even if closed late.\\n\\t * Takes params from Open event.\\n\\t * Take caution not to unecessarily revert due to underflow / overflow, as uncloseable swaps are very dangerous.\\n\\t */\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) public override {\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\taccrue(cTokenExchangeRate);\\n\\t\\tbytes32 swapHash = keccak256(abi.encode(\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexInit,\\n\\t\\t\\tinitBlock,\\n\\t\\t\\tswapFixedRateMantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens,\\n\\t\\t\\towner\\n\\t\\t));\\n\\t\\trequire(swaps[swapHash] == true, \\\"No active swap found\\\");\\n\\t\\tuint swapDuration = _sub(getBlockNumber(), initBlock);\\n\\t\\trequire(swapDuration >= SWAP_MIN_DURATION, \\\"Premature close swap\\\");\\n\\t\\tExp memory benchmarkIndexRatio = _div(benchmarkIndexStored, _toExp(benchmarkIndexInit));\\n\\n\\t\\tCTokenAmount memory userCollateral = CTokenAmount({val: userCollateralCTokens});\\n\\t\\tExp memory swapFixedRate = _toExp(swapFixedRateMantissa);\\n\\n\\t\\tCTokenAmount memory userPayout;\\n\\t\\tif (userPayingFixed) {\\n\\t\\t\\tuserPayout = closePayFixedSwapInternal(\\n\\t\\t\\t\\tswapDuration,\\n\\t\\t\\t\\tbenchmarkIndexRatio,\\n\\t\\t\\t\\tswapFixedRate,\\n\\t\\t\\t\\tnotionalAmount,\\n\\t\\t\\t\\tuserCollateral,\\n\\t\\t\\t\\tcTokenExchangeRate\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tuserPayout = closeReceiveFixedSwapInternal(\\n\\t\\t\\t\\tswapDuration,\\n\\t\\t\\t\\tbenchmarkIndexRatio,\\n\\t\\t\\t\\tswapFixedRate,\\n\\t\\t\\t\\tnotionalAmount,\\n\\t\\t\\t\\tuserCollateral,\\n\\t\\t\\t\\tcTokenExchangeRate\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tuint bal = cToken.balanceOf(address(this));\\n\\n\\t\\t// Payout is capped by total balance\\n\\t\\tif (userPayout.val > bal) userPayout = CTokenAmount({val: bal});\\n\\n\\t\\tuint lateBlocks = _sub(swapDuration, SWAP_MIN_DURATION);\\n\\t\\tCTokenAmount memory penalty = CTokenAmount(0);\\n\\n\\t\\tif (lateBlocks > CLOSE_GRACE_PERIOD_BLOCKS) {\\n\\t\\t\\tuint penaltyBlocks = lateBlocks - CLOSE_GRACE_PERIOD_BLOCKS;\\n\\t\\t\\tExp memory penaltyPercent = _mul(_toExp(CLOSE_PENALTY_PER_BLOCK_MANTISSA), penaltyBlocks);\\n\\t\\t\\tpenaltyPercent = ONE_EXP.mantissa > penaltyPercent.mantissa ? penaltyPercent : ONE_EXP; // maximum of 100% penalty\\n\\t\\t\\tpenalty = CTokenAmount(_mul(userPayout.val, penaltyPercent));\\n\\t\\t\\tuserPayout = _sub(userPayout, penalty);\\n\\t\\t}\\n\\n\\t\\temit CloseSwap(swapHash, owner, userPayout.val, penalty.val, benchmarkIndexStored.mantissa);\\n\\n\\t\\tswaps[swapHash] = false;\\n\\t\\ttransferOut(owner, userPayout);\\n\\t\\ttransferOut(msg.sender, penalty);\\n\\t}\\n\\n\\t// @dev User paid fixed, protocol paid fixed\\n\\tfunction closePayFixedSwapInternal(\\n\\t\\tuint swapDuration,\\n\\t\\tExp memory benchmarkIndexRatio,\\n\\t\\tExp memory swapFixedRate,\\n\\t\\tuint notionalAmount,\\n\\t\\tCTokenAmount memory userCollateral,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) internal returns (CTokenAmount memory userPayout) {\\n\\t\\tuint notionalReceivingFixedNew = _subToZero(notionalReceivingFixed, notionalAmount);\\n\\t\\tuint notionalPayingFloatNew = _subToZero(notionalPayingFloat, _mul(notionalAmount, benchmarkIndexRatio));\\n\\n\\t\\t/* avgFixedRateReceiving = avgFixedRateReceiving * notionalReceivingFixed - swapFixedRate * notionalAmount / notionalReceivingFixedNew */\\n\\t\\tExp memory avgFixedRateReceivingNew;\\n\\t\\tif (notionalReceivingFixedNew == 0){\\n\\t\\t\\tavgFixedRateReceivingNew = _toExp(0);\\n\\t\\t} else {\\n\\t\\t\\tExp memory numerator = _subToZero(_mul(avgFixedRateReceiving, notionalReceivingFixed), _mul(swapFixedRate, notionalAmount));\\n\\t\\t\\tavgFixedRateReceivingNew = _div(numerator, notionalReceivingFixedNew);\\n\\t\\t}\\n\\n\\t\\t/* The protocol reserved enough collateral for this swap for SWAP_MIN_DURATION, but its has been longer.\\n\\t\\t * We have decreased lockedCollateral in `accrue` for the late blocks, meaning we decreased it by more than the \\\"open\\\" tx added to it in the first place.\\n\\t\\t */\\n\\t\\tint parBlocksReceivingFixedNew = _add(parBlocksReceivingFixed, _mul(notionalAmount, _sub(swapDuration, SWAP_MIN_DURATION)));\\n\\n\\t\\tCTokenAmount memory fixedLeg = toCTokens(_mul(_mul(notionalAmount, swapDuration), swapFixedRate), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory floatLeg = toCTokens(_mul(notionalAmount, _sub(benchmarkIndexRatio, ONE_EXP)), cTokenExchangeRate);\\n\\t\\tuserPayout = _subToZero(_add(userCollateral, floatLeg), fixedLeg); // no underflows\\n\\n\\t\\tnotionalReceivingFixed = notionalReceivingFixedNew;\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\t\\tavgFixedRateReceiving = avgFixedRateReceivingNew;\\n\\n\\t\\treturn userPayout;\\n\\t}\\n\\n\\t// @dev User received fixed, protocol paid fixed\\n\\tfunction closeReceiveFixedSwapInternal(\\n\\t\\tuint swapDuration,\\n\\t\\tExp memory benchmarkIndexRatio,\\n\\t\\tExp memory swapFixedRate,\\n\\t\\tuint notionalAmount,\\n\\t\\tCTokenAmount memory userCollateral,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) internal returns (CTokenAmount memory userPayout) {\\n\\t\\tuint notionalPayingFixedNew = _subToZero(notionalPayingFixed, notionalAmount);\\n\\t\\tuint notionalReceivingFloatNew = _subToZero(notionalReceivingFloat, _mul(notionalAmount, benchmarkIndexRatio));\\n\\n\\t\\t/* avgFixedRatePaying = avgFixedRatePaying * notionalPayingFixed - swapFixedRate * notionalAmount / notionalReceivingFixedNew */\\n\\t\\tExp memory avgFixedRatePayingNew;\\n\\t\\tif (notionalPayingFixedNew == 0) {\\n\\t\\t\\tavgFixedRatePayingNew = _toExp(0);\\n\\t\\t} else {\\n\\t\\t\\tExp memory numerator = _subToZero(_mul(avgFixedRatePaying, notionalPayingFixed), _mul(swapFixedRate, notionalAmount));\\n\\t\\t\\tavgFixedRatePayingNew = _div(numerator, notionalReceivingFloatNew);\\n\\t\\t}\\n\\n\\t\\t/* The protocol reserved enough collateral for this swap for SWAP_MIN_DURATION, but its has been longer.\\n\\t\\t * We have decreased lockedCollateral in `accrue` for the late blocks, meaning we decreased it by more than the \\\"open\\\" tx added to it in the first place.\\n\\t\\t */\\n\\t\\tint parBlocksPayingFixedNew = _add(parBlocksPayingFixed, _mul(notionalAmount, _sub(swapDuration, SWAP_MIN_DURATION)));\\n\\n\\t\\tCTokenAmount memory fixedLeg = toCTokens(_mul(_mul(notionalAmount, swapDuration), swapFixedRate), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory floatLeg = toCTokens(_mul(notionalAmount, _sub(benchmarkIndexRatio, ONE_EXP)), cTokenExchangeRate);\\n\\t\\tuserPayout = _subToZero(_add(userCollateral, fixedLeg), floatLeg);\\n\\n\\t\\tnotionalPayingFixed = notionalPayingFixedNew;\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\t\\tavgFixedRatePaying = avgFixedRatePayingNew;\\n\\n\\t\\treturn userPayout;\\n\\t}\\n\\n\\t/* @dev Called internally at the beginning of external swap and liquidity provider functions.\\n\\t * WRITES TO STORAGE\\n\\t * Accounts for interest rate payments and adjust collateral requirements with the passage of time.\\n\\t * @return lockedCollateralNew : The amount of collateral the protocol needs to keep locked.\\n\\t */\\n\\tfunction accrue(Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory) {\\n\\t\\trequire(getBlockNumber() >= lastAccrualBlock, \\\"Block number decreasing\\\");\\n\\t\\tuint accruedBlocks = getBlockNumber() - lastAccrualBlock;\\n\\t\\t(CTokenAmount memory lockedCollateralNew, int parBlocksReceivingFixedNew, int parBlocksPayingFixedNew) = getLockedCollateral(accruedBlocks, cTokenExchangeRate);\\n\\n\\t\\tif (accruedBlocks == 0) {\\n\\t\\t\\treturn lockedCollateralNew;\\n\\t\\t}\\n\\n\\t\\tExp memory benchmarkIndexNew = getBenchmarkIndex();\\n\\t\\tExp memory benchmarkIndexRatio = _div(benchmarkIndexNew, benchmarkIndexStored);\\n\\t\\tExp memory floatRate = _sub(benchmarkIndexRatio, ONE_EXP);\\n\\n\\t\\tCTokenAmount memory supplierLiquidityNew = getSupplierLiquidity(accruedBlocks, floatRate, cTokenExchangeRate);\\n\\n\\t\\t// supplyIndex *= supplierLiquidityNew / supplierLiquidity\\n\\t\\tuint supplyIndexNew = supplyIndex;\\n\\t\\tif (supplierLiquidityNew.val != 0) {\\n\\t\\t\\tsupplyIndexNew = _div(_mul(supplyIndex, supplierLiquidityNew), supplierLiquidity);\\n\\t\\t}\\n\\n\\t\\tuint notionalPayingFloatNew = _mul(notionalPayingFloat, benchmarkIndexRatio);\\n\\t\\tuint notionalReceivingFloatNew = _mul(notionalReceivingFloat, benchmarkIndexRatio);\\n\\n\\t\\t/** Apply Effects **/\\n\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\n\\t\\tsupplierLiquidity = supplierLiquidityNew;\\n\\t\\tsupplyIndex = supplyIndexNew;\\n\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\n\\t\\tbenchmarkIndexStored = benchmarkIndexNew;\\n\\t\\tlastAccrualBlock = getBlockNumber();\\n\\n\\t\\temit Accrue(supplierLiquidityNew.val, lockedCollateralNew.val);\\n\\t\\treturn lockedCollateralNew;\\n\\t}\\n\\n\\tfunction transferIn(address from, CTokenAmount memory cTokenAmount) internal {\\n\\t\\trequire(cToken.transferFrom(from, address(this), cTokenAmount.val) == true, \\\"Transfer In Failed\\\");\\n\\t}\\n\\n\\tfunction transferOut(address to, CTokenAmount memory cTokenAmount) internal {\\n\\t\\tif (cTokenAmount.val > 0) {\\n\\t\\t\\trequire(cToken.transfer(to, cTokenAmount.val), \\\"Transfer Out failed\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t// ** PUBLIC PURE HELPERS ** //\\n\\n\\tfunction toCTokens(uint amount, Exp memory cTokenExchangeRate) public pure returns (CTokenAmount memory) {\\n\\t\\tuint cTokenAmount = _div(amount, cTokenExchangeRate);\\n\\t\\treturn CTokenAmount({val: cTokenAmount});\\n\\t}\\n\\n\\tfunction toUnderlying(CTokenAmount memory amount, Exp memory cTokenExchangeRate) public pure returns (uint) {\\n\\t\\treturn _mul(amount.val, cTokenExchangeRate);\\n\\t}\\n\\n\\t// *** PUBLIC VIEW GETTERS *** //\\n\\n\\t// @dev Calculate protocol locked collateral and parBlocks, which is a measure of the fixed rate credit/debt.\\n\\t// * Uses int to keep negatives, for correct late blocks calc when a single swap is outstanding\\n\\tfunction getLockedCollateral(uint accruedBlocks, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory lockedCollateral, int parBlocksReceivingFixedNew, int parBlocksPayingFixedNew) {\\n\\t\\tparBlocksReceivingFixedNew = _sub(parBlocksReceivingFixed, _mul(accruedBlocks, notionalReceivingFixed));\\n\\t\\tparBlocksPayingFixedNew = _sub(parBlocksPayingFixed, _mul(accruedBlocks, notionalPayingFixed));\\n\\n\\t\\t// Par blocks can be negative during the first or last ever swap, so floor them to 0\\n\\t\\tuint minFloatToReceive = _mul(_toUint(parBlocksPayingFixedNew), minFloatRate);\\n\\t\\tuint maxFloatToPay = _mul(_toUint(parBlocksReceivingFixedNew), maxFloatRate);\\n\\n\\t\\tuint fixedToReceive = _mul(_toUint(parBlocksReceivingFixedNew), avgFixedRateReceiving);\\n\\t\\tuint fixedToPay = _mul(_toUint(parBlocksPayingFixedNew), avgFixedRatePaying);\\n\\n\\t\\tuint minCredit = _add(fixedToReceive, minFloatToReceive);\\n\\t\\tuint maxDebt = _add(fixedToPay, maxFloatToPay);\\n\\n\\t\\tif (maxDebt > minCredit) {\\n\\t\\t\\tlockedCollateral = toCTokens(_sub(maxDebt, minCredit), cTokenExchangeRate);\\n\\t\\t} else {\\n\\t\\t\\tlockedCollateral = CTokenAmount({val:0});\\n\\t\\t}\\n\\t}\\n\\n\\t/* @dev Calculate protocol P/L by adding the cashflows since last accrual.\\n\\t * \\t\\tsupplierLiquidity += fixedReceived + floatReceived - fixedPaid - floatPaid\\n\\t */\\n\\tfunction getSupplierLiquidity(uint accruedBlocks, Exp memory floatRate, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory supplierLiquidityNew) {\\n\\t\\tuint floatPaid = _mul(notionalPayingFloat, floatRate);\\n\\t\\tuint floatReceived = _mul(notionalReceivingFloat, floatRate);\\n\\t\\tuint fixedPaid = _mul(accruedBlocks, _mul(notionalPayingFixed, avgFixedRatePaying));\\n\\t\\tuint fixedReceived = _mul(accruedBlocks, _mul(notionalReceivingFixed, avgFixedRateReceiving));\\n\\n\\t\\tCTokenAmount memory rec = toCTokens(_add(fixedReceived, floatReceived), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory paid = toCTokens(_add(fixedPaid, floatPaid), cTokenExchangeRate);\\n\\t\\tsupplierLiquidityNew = _subToZero(_add(supplierLiquidity, rec), paid);\\n\\t}\\n\\n\\t// @dev Get the rate for incoming swaps\\n\\tfunction getSwapRate(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tCTokenAmount memory lockedCollateral,\\n\\t\\tCTokenAmount memory supplierLiquidity_,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) public view returns (Exp memory, int) {\\n\\t\\t(uint ratePerBlockMantissa, int rateFactorNew) = interestRateModel.getSwapRate(\\n\\t\\t\\trateFactor,\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\torderNotional,\\n\\t\\t\\ttoUnderlying(lockedCollateral, cTokenExchangeRate),\\n\\t\\t\\ttoUnderlying(supplierLiquidity_, cTokenExchangeRate)\\n\\t\\t);\\n\\t\\treturn (_toExp(ratePerBlockMantissa), rateFactorNew);\\n\\t}\\n\\n\\t// @dev The amount that must be locked up for the payFixed leg of a swap paying fixed. Used to calculate both the protocol and user's collateral.\\n\\t// = notionalAmount * SWAP_MIN_DURATION * (swapFixedRate - minFloatRate)\\n\\tfunction getPayFixedInitCollateral(Exp memory fixedRate, uint notionalAmount, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory) {\\n\\t\\tExp memory rateDelta = _sub(fixedRate, minFloatRate);\\n\\t\\tuint amt = _mul(_mul(SWAP_MIN_DURATION, notionalAmount), rateDelta);\\n\\t\\treturn toCTokens(amt, cTokenExchangeRate);\\n\\t}\\n\\n\\t// @dev The amount that must be locked up for the receiveFixed leg of a swap receiving fixed. Used to calculate both the protocol and user's collateral.\\n\\t// = notionalAmount * SWAP_MIN_DURATION * (maxFloatRate - swapFixedRate)\\n\\tfunction getReceiveFixedInitCollateral(Exp memory fixedRate, uint notionalAmount, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory) {\\n\\t\\tExp memory rateDelta = _sub(maxFloatRate, fixedRate);\\n\\t\\tuint amt = _mul(_mul(SWAP_MIN_DURATION, notionalAmount), rateDelta);\\n\\t\\treturn toCTokens(amt, cTokenExchangeRate);\\n\\t}\\n\\n\\t// @dev Interpolates to get the current borrow index from a compound CToken (or some other similar interface)\\n\\tfunction getBenchmarkIndex() public view returns (Exp memory) {\\n\\t\\tExp memory borrowIndex = _toExp(cToken.borrowIndex());\\n\\t\\trequire(borrowIndex.mantissa != 0, \\\"Benchmark index is zero\\\");\\n\\t\\tuint accrualBlockNumber = cToken.accrualBlockNumber();\\n\\t\\trequire(getBlockNumber() >= accrualBlockNumber, \\\"Bn decreasing\\\");\\n\\t\\tuint blockDelta = _sub(getBlockNumber(), accrualBlockNumber);\\n\\n\\t\\tif (blockDelta == 0) {\\n\\t\\t\\treturn borrowIndex;\\n\\t\\t} else {\\n\\t\\t\\tExp memory borrowRateMantissa = _toExp(cToken.borrowRatePerBlock());\\n\\t\\t\\tExp memory simpleInterestFactor = _mul(borrowRateMantissa, blockDelta);\\n\\t\\t\\treturn _mul(borrowIndex, _add(simpleInterestFactor, ONE_EXP));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getExchangeRate() public view returns (Exp memory) {\\n\\t\\treturn _toExp(cToken.exchangeRateStored());\\n\\t}\\n\\n\\tfunction getBlockNumber() public view virtual returns (uint) {\\n\\t\\treturn block.number;\\n\\t}\\n\\n\\t/** ADMIN FUNCTIONS **/\\n\\n\\tfunction _setInterestRateModel(InterestRateModelInterface newModel) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set interest rate model\\\");\\n\\t\\trequire(newModel != interestRateModel, \\\"Resetting to same model\\\");\\n\\t\\temit SetInterestRateModel(address(newModel), address(interestRateModel));\\n\\t\\tinterestRateModel = newModel;\\n\\t}\\n\\n\\tfunction _setCollateralRequirements(uint minFloatRateMantissa_, uint maxFloatRateMantissa_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set collateral requirements\\\");\\n\\t\\trequire(minFloatRateMantissa_ < maxFloatRateMantissa_, \\\"Min float rate must be below max float rate\\\");\\n\\n\\t\\temit SetCollateralRequirements(minFloatRateMantissa_, maxFloatRateMantissa_);\\n\\t\\tminFloatRate = _toExp(minFloatRateMantissa_);\\n\\t\\tmaxFloatRate = _toExp(maxFloatRateMantissa_);\\n\\t}\\n\\n\\tfunction _setLiquidityLimit(uint limit_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set liqiudity limit\\\");\\n\\t\\temit SetLiquidityLimit(limit_);\\n\\t\\tliquidityLimit = CTokenAmount({val: limit_});\\n\\t}\\n\\n\\tfunction _pause(bool isPaused_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to pause\\\");\\n\\t\\trequire(isPaused_ != isPaused, \\\"Must change isPaused\\\");\\n\\t\\temit SetPause(isPaused_);\\n\\t\\tisPaused = isPaused_;\\n\\t}\\n\\n\\tfunction _transferComp(address dest, uint amount) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to transfer comp\\\");\\n\\t\\temit CompTransferred(dest, amount);\\n\\t\\tcomp.transfer(dest, amount);\\n\\t}\\n\\n\\tfunction _delegateComp(address delegatee) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to delegate comp\\\");\\n\\t\\temit CompDelegated(delegatee);\\n\\t\\tcomp.delegate(delegatee);\\n\\t}\\n\\n\\tfunction _changeAdmin(address admin_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to change admin\\\");\\n\\t\\temit AdminChanged(admin, admin_);\\n\\t\\tadmin = admin_;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xba5537c4bfd0b58acb50c9619c3eb173343af4d88ebe599094a2860ed6796aaa\"},\"contracts/RhoInterfaces.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\ninterface InterestRateModelInterface {\\n\\tfunction getSwapRate(\\n\\t\\tint rateFactorPrev,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tuint lockedCollateralUnderlying,\\n\\t\\tuint supplierLiquidityUnderlying\\n\\t) external view returns (uint rate, int rateFactorNew);\\n}\\n\\ninterface ERC20Interface {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function balanceOf(address who) external returns (uint);\\n}\\n\\ninterface CompInterface is ERC20Interface{\\n\\tfunction delegate(address delegatee) external;\\n}\\n\\ninterface CTokenInterface is ERC20Interface {\\n\\tfunction borrowIndex() external view returns (uint);\\n\\tfunction accrualBlockNumber() external view returns(uint);\\n\\tfunction borrowRatePerBlock() external view returns(uint);\\n\\tfunction exchangeRateStored() external view returns (uint);\\n}\\n\\nabstract contract RhoInterface is Types {\\n\\tfunction supply(uint cTokenSupplyAmount) external virtual;\\n\\tfunction remove(uint removeCTokenAmount) external virtual;\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) external virtual;\\n\\n\\tevent Supply(address indexed supplier, uint cTokenSupplyAmount, uint newSupplyAmount);\\n\\tevent Remove(address indexed supplier, uint removeCTokenAmount, uint newSupplyValue);\\n\\tevent OpenSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress indexed owner\\n\\t);\\n\\tevent CloseSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\taddress indexed owner,\\n\\t\\tuint userPayout,\\n\\t\\tuint penalty,\\n\\t\\tuint benchmarkIndexFinal\\n\\t);\\n\\tevent Accrue(uint supplierLiquidityNew, uint lockedCollateralNew);\\n\\tevent SetInterestRateModel(address newModel, address oldModel);\\n\\tevent SetPause(bool isPaused);\\n\\tevent AdminRenounced();\\n\\tevent CompTransferred(address dest, uint amount);\\n\\tevent CompDelegated(address delegatee);\\n\\tevent SetCollateralRequirements(uint minFloatRateMantissa, uint maxFloatRateMantissa);\\n\\tevent AdminChanged(address oldAdmin, address newAdmin);\\n\\tevent SetLiquidityLimit(uint limit);\\n\\n\\tInterestRateModelInterface public interestRateModel;\\n\\n\\tuint public lastAccrualBlock;\\n\\tExp public benchmarkIndexStored;\\n\\n\\t/* Notional size of each leg, one adjusting for compounding and one static */\\n\\tuint public notionalReceivingFixed;\\n\\tuint public notionalPayingFloat;\\n\\n\\tuint public notionalPayingFixed;\\n\\tuint public notionalReceivingFloat;\\n\\n\\t/* Measure of outstanding swap obligations. 1 Unit = 1e18 notional * 1 block. Used to calculate collateral requirements */\\n\\tint public parBlocksReceivingFixed;\\n\\tint public parBlocksPayingFixed;\\n\\n\\t/* Per block fixed / float interest rates used in collateral calculations */\\n\\tExp public avgFixedRateReceiving;\\n\\tExp public avgFixedRatePaying;\\n\\n\\t/* Per block float rate bounds used in collateral calculations */\\n\\tExp public maxFloatRate;\\n\\tExp public minFloatRate;\\n\\n\\t/* Protocol PnL */\\n\\tuint public supplyIndex;\\n\\tCTokenAmount public supplierLiquidity;\\n\\n\\tint public rateFactor;// for interest rate model\\n\\n\\taddress public admin;\\n\\n\\t/* Pausing safety functions that can pause open and supply functions */\\n\\tbool public isPaused;\\n\\tCTokenAmount public liquidityLimit;\\n\\n\\tmapping(address => SupplyAccount) public supplyAccounts;\\n\\tmapping(bytes32 => bool) public swaps;\\n\\n\\tstruct SupplyAccount {\\n\\t\\tCTokenAmount amount;\\n\\t\\tuint lastBlock;\\n\\t\\tuint index;\\n\\t}\\n\\n\\tstruct Swap {\\n\\t\\tbool userPayingFixed;\\n\\t\\tuint notionalAmount;\\n\\t\\tuint swapFixedRateMantissa;\\n\\t\\tuint benchmarkIndexInit;\\n\\t\\tuint userCollateralCTokens;\\n\\t\\tuint initBlock;\\n\\t\\taddress owner;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xb5de435fab04d6ea7331a179997e5df99991e12b1eb651b48f66163aff0e44b5\"},\"contracts/Types.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\ncontract Types {\\n\\n    /*@dev A type to store amounts of cTokens, to make sure they are not confused with amounts of the underlying */\\n    struct CTokenAmount {\\n        uint val;\\n    }\\n\\n    /* @dev A type to store numbers scaled up by 18 decimals*/\\n    struct Exp {\\n        uint mantissa;\\n    }\\n}\\n\",\"keccak256\":\"0x3420c97975694664fba3d84ac78149b669b452a2ac4aee8bab41e02407a494d5\"}},\"version\":1}"},"contracts/RhoInterfaces.sol:CTokenInterface":{"abi":"[{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/RhoInterfaces.sol\":\"CTokenInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RhoInterfaces.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\ninterface InterestRateModelInterface {\\n\\tfunction getSwapRate(\\n\\t\\tint rateFactorPrev,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tuint lockedCollateralUnderlying,\\n\\t\\tuint supplierLiquidityUnderlying\\n\\t) external view returns (uint rate, int rateFactorNew);\\n}\\n\\ninterface ERC20Interface {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function balanceOf(address who) external returns (uint);\\n}\\n\\ninterface CompInterface is ERC20Interface{\\n\\tfunction delegate(address delegatee) external;\\n}\\n\\ninterface CTokenInterface is ERC20Interface {\\n\\tfunction borrowIndex() external view returns (uint);\\n\\tfunction accrualBlockNumber() external view returns(uint);\\n\\tfunction borrowRatePerBlock() external view returns(uint);\\n\\tfunction exchangeRateStored() external view returns (uint);\\n}\\n\\nabstract contract RhoInterface is Types {\\n\\tfunction supply(uint cTokenSupplyAmount) external virtual;\\n\\tfunction remove(uint removeCTokenAmount) external virtual;\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) external virtual;\\n\\n\\tevent Supply(address indexed supplier, uint cTokenSupplyAmount, uint newSupplyAmount);\\n\\tevent Remove(address indexed supplier, uint removeCTokenAmount, uint newSupplyValue);\\n\\tevent OpenSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress indexed owner\\n\\t);\\n\\tevent CloseSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\taddress indexed owner,\\n\\t\\tuint userPayout,\\n\\t\\tuint penalty,\\n\\t\\tuint benchmarkIndexFinal\\n\\t);\\n\\tevent Accrue(uint supplierLiquidityNew, uint lockedCollateralNew);\\n\\tevent SetInterestRateModel(address newModel, address oldModel);\\n\\tevent SetPause(bool isPaused);\\n\\tevent AdminRenounced();\\n\\tevent CompTransferred(address dest, uint amount);\\n\\tevent CompDelegated(address delegatee);\\n\\tevent SetCollateralRequirements(uint minFloatRateMantissa, uint maxFloatRateMantissa);\\n\\tevent AdminChanged(address oldAdmin, address newAdmin);\\n\\tevent SetLiquidityLimit(uint limit);\\n\\n\\tInterestRateModelInterface public interestRateModel;\\n\\n\\tuint public lastAccrualBlock;\\n\\tExp public benchmarkIndexStored;\\n\\n\\t/* Notional size of each leg, one adjusting for compounding and one static */\\n\\tuint public notionalReceivingFixed;\\n\\tuint public notionalPayingFloat;\\n\\n\\tuint public notionalPayingFixed;\\n\\tuint public notionalReceivingFloat;\\n\\n\\t/* Measure of outstanding swap obligations. 1 Unit = 1e18 notional * 1 block. Used to calculate collateral requirements */\\n\\tint public parBlocksReceivingFixed;\\n\\tint public parBlocksPayingFixed;\\n\\n\\t/* Per block fixed / float interest rates used in collateral calculations */\\n\\tExp public avgFixedRateReceiving;\\n\\tExp public avgFixedRatePaying;\\n\\n\\t/* Per block float rate bounds used in collateral calculations */\\n\\tExp public maxFloatRate;\\n\\tExp public minFloatRate;\\n\\n\\t/* Protocol PnL */\\n\\tuint public supplyIndex;\\n\\tCTokenAmount public supplierLiquidity;\\n\\n\\tint public rateFactor;// for interest rate model\\n\\n\\taddress public admin;\\n\\n\\t/* Pausing safety functions that can pause open and supply functions */\\n\\tbool public isPaused;\\n\\tCTokenAmount public liquidityLimit;\\n\\n\\tmapping(address => SupplyAccount) public supplyAccounts;\\n\\tmapping(bytes32 => bool) public swaps;\\n\\n\\tstruct SupplyAccount {\\n\\t\\tCTokenAmount amount;\\n\\t\\tuint lastBlock;\\n\\t\\tuint index;\\n\\t}\\n\\n\\tstruct Swap {\\n\\t\\tbool userPayingFixed;\\n\\t\\tuint notionalAmount;\\n\\t\\tuint swapFixedRateMantissa;\\n\\t\\tuint benchmarkIndexInit;\\n\\t\\tuint userCollateralCTokens;\\n\\t\\tuint initBlock;\\n\\t\\taddress owner;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xb5de435fab04d6ea7331a179997e5df99991e12b1eb651b48f66163aff0e44b5\"},\"contracts/Types.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\ncontract Types {\\n\\n    /*@dev A type to store amounts of cTokens, to make sure they are not confused with amounts of the underlying */\\n    struct CTokenAmount {\\n        uint val;\\n    }\\n\\n    /* @dev A type to store numbers scaled up by 18 decimals*/\\n    struct Exp {\\n        uint mantissa;\\n    }\\n}\\n\",\"keccak256\":\"0x3420c97975694664fba3d84ac78149b669b452a2ac4aee8bab41e02407a494d5\"}},\"version\":1}"},"contracts/RhoInterfaces.sol:CompInterface":{"abi":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/RhoInterfaces.sol\":\"CompInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RhoInterfaces.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\ninterface InterestRateModelInterface {\\n\\tfunction getSwapRate(\\n\\t\\tint rateFactorPrev,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tuint lockedCollateralUnderlying,\\n\\t\\tuint supplierLiquidityUnderlying\\n\\t) external view returns (uint rate, int rateFactorNew);\\n}\\n\\ninterface ERC20Interface {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function balanceOf(address who) external returns (uint);\\n}\\n\\ninterface CompInterface is ERC20Interface{\\n\\tfunction delegate(address delegatee) external;\\n}\\n\\ninterface CTokenInterface is ERC20Interface {\\n\\tfunction borrowIndex() external view returns (uint);\\n\\tfunction accrualBlockNumber() external view returns(uint);\\n\\tfunction borrowRatePerBlock() external view returns(uint);\\n\\tfunction exchangeRateStored() external view returns (uint);\\n}\\n\\nabstract contract RhoInterface is Types {\\n\\tfunction supply(uint cTokenSupplyAmount) external virtual;\\n\\tfunction remove(uint removeCTokenAmount) external virtual;\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) external virtual;\\n\\n\\tevent Supply(address indexed supplier, uint cTokenSupplyAmount, uint newSupplyAmount);\\n\\tevent Remove(address indexed supplier, uint removeCTokenAmount, uint newSupplyValue);\\n\\tevent OpenSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress indexed owner\\n\\t);\\n\\tevent CloseSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\taddress indexed owner,\\n\\t\\tuint userPayout,\\n\\t\\tuint penalty,\\n\\t\\tuint benchmarkIndexFinal\\n\\t);\\n\\tevent Accrue(uint supplierLiquidityNew, uint lockedCollateralNew);\\n\\tevent SetInterestRateModel(address newModel, address oldModel);\\n\\tevent SetPause(bool isPaused);\\n\\tevent AdminRenounced();\\n\\tevent CompTransferred(address dest, uint amount);\\n\\tevent CompDelegated(address delegatee);\\n\\tevent SetCollateralRequirements(uint minFloatRateMantissa, uint maxFloatRateMantissa);\\n\\tevent AdminChanged(address oldAdmin, address newAdmin);\\n\\tevent SetLiquidityLimit(uint limit);\\n\\n\\tInterestRateModelInterface public interestRateModel;\\n\\n\\tuint public lastAccrualBlock;\\n\\tExp public benchmarkIndexStored;\\n\\n\\t/* Notional size of each leg, one adjusting for compounding and one static */\\n\\tuint public notionalReceivingFixed;\\n\\tuint public notionalPayingFloat;\\n\\n\\tuint public notionalPayingFixed;\\n\\tuint public notionalReceivingFloat;\\n\\n\\t/* Measure of outstanding swap obligations. 1 Unit = 1e18 notional * 1 block. Used to calculate collateral requirements */\\n\\tint public parBlocksReceivingFixed;\\n\\tint public parBlocksPayingFixed;\\n\\n\\t/* Per block fixed / float interest rates used in collateral calculations */\\n\\tExp public avgFixedRateReceiving;\\n\\tExp public avgFixedRatePaying;\\n\\n\\t/* Per block float rate bounds used in collateral calculations */\\n\\tExp public maxFloatRate;\\n\\tExp public minFloatRate;\\n\\n\\t/* Protocol PnL */\\n\\tuint public supplyIndex;\\n\\tCTokenAmount public supplierLiquidity;\\n\\n\\tint public rateFactor;// for interest rate model\\n\\n\\taddress public admin;\\n\\n\\t/* Pausing safety functions that can pause open and supply functions */\\n\\tbool public isPaused;\\n\\tCTokenAmount public liquidityLimit;\\n\\n\\tmapping(address => SupplyAccount) public supplyAccounts;\\n\\tmapping(bytes32 => bool) public swaps;\\n\\n\\tstruct SupplyAccount {\\n\\t\\tCTokenAmount amount;\\n\\t\\tuint lastBlock;\\n\\t\\tuint index;\\n\\t}\\n\\n\\tstruct Swap {\\n\\t\\tbool userPayingFixed;\\n\\t\\tuint notionalAmount;\\n\\t\\tuint swapFixedRateMantissa;\\n\\t\\tuint benchmarkIndexInit;\\n\\t\\tuint userCollateralCTokens;\\n\\t\\tuint initBlock;\\n\\t\\taddress owner;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xb5de435fab04d6ea7331a179997e5df99991e12b1eb651b48f66163aff0e44b5\"},\"contracts/Types.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\ncontract Types {\\n\\n    /*@dev A type to store amounts of cTokens, to make sure they are not confused with amounts of the underlying */\\n    struct CTokenAmount {\\n        uint val;\\n    }\\n\\n    /* @dev A type to store numbers scaled up by 18 decimals*/\\n    struct Exp {\\n        uint mantissa;\\n    }\\n}\\n\",\"keccak256\":\"0x3420c97975694664fba3d84ac78149b669b452a2ac4aee8bab41e02407a494d5\"}},\"version\":1}"},"contracts/RhoInterfaces.sol:ERC20Interface":{"abi":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/RhoInterfaces.sol\":\"ERC20Interface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RhoInterfaces.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\ninterface InterestRateModelInterface {\\n\\tfunction getSwapRate(\\n\\t\\tint rateFactorPrev,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tuint lockedCollateralUnderlying,\\n\\t\\tuint supplierLiquidityUnderlying\\n\\t) external view returns (uint rate, int rateFactorNew);\\n}\\n\\ninterface ERC20Interface {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function balanceOf(address who) external returns (uint);\\n}\\n\\ninterface CompInterface is ERC20Interface{\\n\\tfunction delegate(address delegatee) external;\\n}\\n\\ninterface CTokenInterface is ERC20Interface {\\n\\tfunction borrowIndex() external view returns (uint);\\n\\tfunction accrualBlockNumber() external view returns(uint);\\n\\tfunction borrowRatePerBlock() external view returns(uint);\\n\\tfunction exchangeRateStored() external view returns (uint);\\n}\\n\\nabstract contract RhoInterface is Types {\\n\\tfunction supply(uint cTokenSupplyAmount) external virtual;\\n\\tfunction remove(uint removeCTokenAmount) external virtual;\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) external virtual;\\n\\n\\tevent Supply(address indexed supplier, uint cTokenSupplyAmount, uint newSupplyAmount);\\n\\tevent Remove(address indexed supplier, uint removeCTokenAmount, uint newSupplyValue);\\n\\tevent OpenSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress indexed owner\\n\\t);\\n\\tevent CloseSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\taddress indexed owner,\\n\\t\\tuint userPayout,\\n\\t\\tuint penalty,\\n\\t\\tuint benchmarkIndexFinal\\n\\t);\\n\\tevent Accrue(uint supplierLiquidityNew, uint lockedCollateralNew);\\n\\tevent SetInterestRateModel(address newModel, address oldModel);\\n\\tevent SetPause(bool isPaused);\\n\\tevent AdminRenounced();\\n\\tevent CompTransferred(address dest, uint amount);\\n\\tevent CompDelegated(address delegatee);\\n\\tevent SetCollateralRequirements(uint minFloatRateMantissa, uint maxFloatRateMantissa);\\n\\tevent AdminChanged(address oldAdmin, address newAdmin);\\n\\tevent SetLiquidityLimit(uint limit);\\n\\n\\tInterestRateModelInterface public interestRateModel;\\n\\n\\tuint public lastAccrualBlock;\\n\\tExp public benchmarkIndexStored;\\n\\n\\t/* Notional size of each leg, one adjusting for compounding and one static */\\n\\tuint public notionalReceivingFixed;\\n\\tuint public notionalPayingFloat;\\n\\n\\tuint public notionalPayingFixed;\\n\\tuint public notionalReceivingFloat;\\n\\n\\t/* Measure of outstanding swap obligations. 1 Unit = 1e18 notional * 1 block. Used to calculate collateral requirements */\\n\\tint public parBlocksReceivingFixed;\\n\\tint public parBlocksPayingFixed;\\n\\n\\t/* Per block fixed / float interest rates used in collateral calculations */\\n\\tExp public avgFixedRateReceiving;\\n\\tExp public avgFixedRatePaying;\\n\\n\\t/* Per block float rate bounds used in collateral calculations */\\n\\tExp public maxFloatRate;\\n\\tExp public minFloatRate;\\n\\n\\t/* Protocol PnL */\\n\\tuint public supplyIndex;\\n\\tCTokenAmount public supplierLiquidity;\\n\\n\\tint public rateFactor;// for interest rate model\\n\\n\\taddress public admin;\\n\\n\\t/* Pausing safety functions that can pause open and supply functions */\\n\\tbool public isPaused;\\n\\tCTokenAmount public liquidityLimit;\\n\\n\\tmapping(address => SupplyAccount) public supplyAccounts;\\n\\tmapping(bytes32 => bool) public swaps;\\n\\n\\tstruct SupplyAccount {\\n\\t\\tCTokenAmount amount;\\n\\t\\tuint lastBlock;\\n\\t\\tuint index;\\n\\t}\\n\\n\\tstruct Swap {\\n\\t\\tbool userPayingFixed;\\n\\t\\tuint notionalAmount;\\n\\t\\tuint swapFixedRateMantissa;\\n\\t\\tuint benchmarkIndexInit;\\n\\t\\tuint userCollateralCTokens;\\n\\t\\tuint initBlock;\\n\\t\\taddress owner;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xb5de435fab04d6ea7331a179997e5df99991e12b1eb651b48f66163aff0e44b5\"},\"contracts/Types.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\ncontract Types {\\n\\n    /*@dev A type to store amounts of cTokens, to make sure they are not confused with amounts of the underlying */\\n    struct CTokenAmount {\\n        uint val;\\n    }\\n\\n    /* @dev A type to store numbers scaled up by 18 decimals*/\\n    struct Exp {\\n        uint mantissa;\\n    }\\n}\\n\",\"keccak256\":\"0x3420c97975694664fba3d84ac78149b669b452a2ac4aee8bab41e02407a494d5\"}},\"version\":1}"},"contracts/RhoInterfaces.sol:InterestRateModelInterface":{"abi":"[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"rateFactorPrev\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"orderNotional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedCollateralUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplierLiquidityUnderlying\",\"type\":\"uint256\"}],\"name\":\"getSwapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rateFactorNew\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"rateFactorPrev\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"orderNotional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedCollateralUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplierLiquidityUnderlying\",\"type\":\"uint256\"}],\"name\":\"getSwapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rateFactorNew\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/RhoInterfaces.sol\":\"InterestRateModelInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RhoInterfaces.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\ninterface InterestRateModelInterface {\\n\\tfunction getSwapRate(\\n\\t\\tint rateFactorPrev,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tuint lockedCollateralUnderlying,\\n\\t\\tuint supplierLiquidityUnderlying\\n\\t) external view returns (uint rate, int rateFactorNew);\\n}\\n\\ninterface ERC20Interface {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function balanceOf(address who) external returns (uint);\\n}\\n\\ninterface CompInterface is ERC20Interface{\\n\\tfunction delegate(address delegatee) external;\\n}\\n\\ninterface CTokenInterface is ERC20Interface {\\n\\tfunction borrowIndex() external view returns (uint);\\n\\tfunction accrualBlockNumber() external view returns(uint);\\n\\tfunction borrowRatePerBlock() external view returns(uint);\\n\\tfunction exchangeRateStored() external view returns (uint);\\n}\\n\\nabstract contract RhoInterface is Types {\\n\\tfunction supply(uint cTokenSupplyAmount) external virtual;\\n\\tfunction remove(uint removeCTokenAmount) external virtual;\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) external virtual;\\n\\n\\tevent Supply(address indexed supplier, uint cTokenSupplyAmount, uint newSupplyAmount);\\n\\tevent Remove(address indexed supplier, uint removeCTokenAmount, uint newSupplyValue);\\n\\tevent OpenSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress indexed owner\\n\\t);\\n\\tevent CloseSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\taddress indexed owner,\\n\\t\\tuint userPayout,\\n\\t\\tuint penalty,\\n\\t\\tuint benchmarkIndexFinal\\n\\t);\\n\\tevent Accrue(uint supplierLiquidityNew, uint lockedCollateralNew);\\n\\tevent SetInterestRateModel(address newModel, address oldModel);\\n\\tevent SetPause(bool isPaused);\\n\\tevent AdminRenounced();\\n\\tevent CompTransferred(address dest, uint amount);\\n\\tevent CompDelegated(address delegatee);\\n\\tevent SetCollateralRequirements(uint minFloatRateMantissa, uint maxFloatRateMantissa);\\n\\tevent AdminChanged(address oldAdmin, address newAdmin);\\n\\tevent SetLiquidityLimit(uint limit);\\n\\n\\tInterestRateModelInterface public interestRateModel;\\n\\n\\tuint public lastAccrualBlock;\\n\\tExp public benchmarkIndexStored;\\n\\n\\t/* Notional size of each leg, one adjusting for compounding and one static */\\n\\tuint public notionalReceivingFixed;\\n\\tuint public notionalPayingFloat;\\n\\n\\tuint public notionalPayingFixed;\\n\\tuint public notionalReceivingFloat;\\n\\n\\t/* Measure of outstanding swap obligations. 1 Unit = 1e18 notional * 1 block. Used to calculate collateral requirements */\\n\\tint public parBlocksReceivingFixed;\\n\\tint public parBlocksPayingFixed;\\n\\n\\t/* Per block fixed / float interest rates used in collateral calculations */\\n\\tExp public avgFixedRateReceiving;\\n\\tExp public avgFixedRatePaying;\\n\\n\\t/* Per block float rate bounds used in collateral calculations */\\n\\tExp public maxFloatRate;\\n\\tExp public minFloatRate;\\n\\n\\t/* Protocol PnL */\\n\\tuint public supplyIndex;\\n\\tCTokenAmount public supplierLiquidity;\\n\\n\\tint public rateFactor;// for interest rate model\\n\\n\\taddress public admin;\\n\\n\\t/* Pausing safety functions that can pause open and supply functions */\\n\\tbool public isPaused;\\n\\tCTokenAmount public liquidityLimit;\\n\\n\\tmapping(address => SupplyAccount) public supplyAccounts;\\n\\tmapping(bytes32 => bool) public swaps;\\n\\n\\tstruct SupplyAccount {\\n\\t\\tCTokenAmount amount;\\n\\t\\tuint lastBlock;\\n\\t\\tuint index;\\n\\t}\\n\\n\\tstruct Swap {\\n\\t\\tbool userPayingFixed;\\n\\t\\tuint notionalAmount;\\n\\t\\tuint swapFixedRateMantissa;\\n\\t\\tuint benchmarkIndexInit;\\n\\t\\tuint userCollateralCTokens;\\n\\t\\tuint initBlock;\\n\\t\\taddress owner;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xb5de435fab04d6ea7331a179997e5df99991e12b1eb651b48f66163aff0e44b5\"},\"contracts/Types.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\ncontract Types {\\n\\n    /*@dev A type to store amounts of cTokens, to make sure they are not confused with amounts of the underlying */\\n    struct CTokenAmount {\\n        uint val;\\n    }\\n\\n    /* @dev A type to store numbers scaled up by 18 decimals*/\\n    struct Exp {\\n        uint mantissa;\\n    }\\n}\\n\",\"keccak256\":\"0x3420c97975694664fba3d84ac78149b669b452a2ac4aee8bab41e02407a494d5\"}},\"version\":1}"},"contracts/RhoInterfaces.sol:RhoInterface":{"abi":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplierLiquidityNew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateralNew\",\"type\":\"uint256\"}],\"name\":\"Accrue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benchmarkIndexFinal\",\"type\":\"uint256\"}],\"name\":\"CloseSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"CompDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benchmarkIndexInit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFixedRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userCollateralCTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OpenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeCTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyValue\",\"type\":\"uint256\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFloatRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFloatRateMantissa\",\"type\":\"uint256\"}],\"name\":\"SetCollateralRequirements\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldModel\",\"type\":\"address\"}],\"name\":\"SetInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetLiquidityLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"SetPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cTokenSupplyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyAmount\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgFixedRatePaying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgFixedRateReceiving\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"benchmarkIndexStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"benchmarkIndexInit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFixedRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollateralCTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModelInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAccrualBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFloatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFloatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalPayingFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalPayingFloat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalReceivingFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalReceivingFloat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumFixedRateMantissa\",\"type\":\"uint256\"}],\"name\":\"openPayFixedSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFixedRateMantissa\",\"type\":\"uint256\"}],\"name\":\"openReceiveFixedSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parBlocksPayingFixed\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parBlocksReceivingFixed\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateFactor\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"removeCTokenAmount\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplierLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cTokenSupplyAmount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplierLiquidityNew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateralNew\",\"type\":\"uint256\"}],\"name\":\"Accrue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benchmarkIndexFinal\",\"type\":\"uint256\"}],\"name\":\"CloseSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"CompDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benchmarkIndexInit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFixedRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userCollateralCTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OpenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeCTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyValue\",\"type\":\"uint256\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFloatRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFloatRateMantissa\",\"type\":\"uint256\"}],\"name\":\"SetCollateralRequirements\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldModel\",\"type\":\"address\"}],\"name\":\"SetInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetLiquidityLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"SetPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cTokenSupplyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyAmount\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgFixedRatePaying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgFixedRateReceiving\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"benchmarkIndexStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"benchmarkIndexInit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFixedRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollateralCTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModelInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAccrualBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFloatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFloatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalPayingFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalPayingFloat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalReceivingFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalReceivingFloat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumFixedRateMantissa\",\"type\":\"uint256\"}],\"name\":\"openPayFixedSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFixedRateMantissa\",\"type\":\"uint256\"}],\"name\":\"openReceiveFixedSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parBlocksPayingFixed\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parBlocksReceivingFixed\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateFactor\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"removeCTokenAmount\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplierLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cTokenSupplyAmount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/RhoInterfaces.sol\":\"RhoInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RhoInterfaces.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\ninterface InterestRateModelInterface {\\n\\tfunction getSwapRate(\\n\\t\\tint rateFactorPrev,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tuint lockedCollateralUnderlying,\\n\\t\\tuint supplierLiquidityUnderlying\\n\\t) external view returns (uint rate, int rateFactorNew);\\n}\\n\\ninterface ERC20Interface {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function balanceOf(address who) external returns (uint);\\n}\\n\\ninterface CompInterface is ERC20Interface{\\n\\tfunction delegate(address delegatee) external;\\n}\\n\\ninterface CTokenInterface is ERC20Interface {\\n\\tfunction borrowIndex() external view returns (uint);\\n\\tfunction accrualBlockNumber() external view returns(uint);\\n\\tfunction borrowRatePerBlock() external view returns(uint);\\n\\tfunction exchangeRateStored() external view returns (uint);\\n}\\n\\nabstract contract RhoInterface is Types {\\n\\tfunction supply(uint cTokenSupplyAmount) external virtual;\\n\\tfunction remove(uint removeCTokenAmount) external virtual;\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) external virtual;\\n\\n\\tevent Supply(address indexed supplier, uint cTokenSupplyAmount, uint newSupplyAmount);\\n\\tevent Remove(address indexed supplier, uint removeCTokenAmount, uint newSupplyValue);\\n\\tevent OpenSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress indexed owner\\n\\t);\\n\\tevent CloseSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\taddress indexed owner,\\n\\t\\tuint userPayout,\\n\\t\\tuint penalty,\\n\\t\\tuint benchmarkIndexFinal\\n\\t);\\n\\tevent Accrue(uint supplierLiquidityNew, uint lockedCollateralNew);\\n\\tevent SetInterestRateModel(address newModel, address oldModel);\\n\\tevent SetPause(bool isPaused);\\n\\tevent AdminRenounced();\\n\\tevent CompTransferred(address dest, uint amount);\\n\\tevent CompDelegated(address delegatee);\\n\\tevent SetCollateralRequirements(uint minFloatRateMantissa, uint maxFloatRateMantissa);\\n\\tevent AdminChanged(address oldAdmin, address newAdmin);\\n\\tevent SetLiquidityLimit(uint limit);\\n\\n\\tInterestRateModelInterface public interestRateModel;\\n\\n\\tuint public lastAccrualBlock;\\n\\tExp public benchmarkIndexStored;\\n\\n\\t/* Notional size of each leg, one adjusting for compounding and one static */\\n\\tuint public notionalReceivingFixed;\\n\\tuint public notionalPayingFloat;\\n\\n\\tuint public notionalPayingFixed;\\n\\tuint public notionalReceivingFloat;\\n\\n\\t/* Measure of outstanding swap obligations. 1 Unit = 1e18 notional * 1 block. Used to calculate collateral requirements */\\n\\tint public parBlocksReceivingFixed;\\n\\tint public parBlocksPayingFixed;\\n\\n\\t/* Per block fixed / float interest rates used in collateral calculations */\\n\\tExp public avgFixedRateReceiving;\\n\\tExp public avgFixedRatePaying;\\n\\n\\t/* Per block float rate bounds used in collateral calculations */\\n\\tExp public maxFloatRate;\\n\\tExp public minFloatRate;\\n\\n\\t/* Protocol PnL */\\n\\tuint public supplyIndex;\\n\\tCTokenAmount public supplierLiquidity;\\n\\n\\tint public rateFactor;// for interest rate model\\n\\n\\taddress public admin;\\n\\n\\t/* Pausing safety functions that can pause open and supply functions */\\n\\tbool public isPaused;\\n\\tCTokenAmount public liquidityLimit;\\n\\n\\tmapping(address => SupplyAccount) public supplyAccounts;\\n\\tmapping(bytes32 => bool) public swaps;\\n\\n\\tstruct SupplyAccount {\\n\\t\\tCTokenAmount amount;\\n\\t\\tuint lastBlock;\\n\\t\\tuint index;\\n\\t}\\n\\n\\tstruct Swap {\\n\\t\\tbool userPayingFixed;\\n\\t\\tuint notionalAmount;\\n\\t\\tuint swapFixedRateMantissa;\\n\\t\\tuint benchmarkIndexInit;\\n\\t\\tuint userCollateralCTokens;\\n\\t\\tuint initBlock;\\n\\t\\taddress owner;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xb5de435fab04d6ea7331a179997e5df99991e12b1eb651b48f66163aff0e44b5\"},\"contracts/Types.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\ncontract Types {\\n\\n    /*@dev A type to store amounts of cTokens, to make sure they are not confused with amounts of the underlying */\\n    struct CTokenAmount {\\n        uint val;\\n    }\\n\\n    /* @dev A type to store numbers scaled up by 18 decimals*/\\n    struct Exp {\\n        uint mantissa;\\n    }\\n}\\n\",\"keccak256\":\"0x3420c97975694664fba3d84ac78149b669b452a2ac4aee8bab41e02407a494d5\"}},\"version\":1}"},"contracts/RhoLens.sol:RhoLensV1":{"abi":"[{\"inputs\":[{\"internalType\":\"contract Rho\",\"name\":\"rho_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalOrderInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFixedRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollateralCTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollateralUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"protocolIsCollateralized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalReceivingFixed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notionalPayingFixed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgFixedRateReceiving\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgFixedRatePaying\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplyCollateralState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"lockedCollateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"supplierLiquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rho\",\"outputs\":[{\"internalType\":\"contract Rho\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"toCTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cTokenAmt\",\"type\":\"uint256\"}],\"name\":\"toUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Rho\",\"name\":\"rho_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalOrderInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFixedRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollateralCTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollateralUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"protocolIsCollateralized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalReceivingFixed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notionalPayingFixed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgFixedRateReceiving\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgFixedRatePaying\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplyCollateralState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"lockedCollateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"supplierLiquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rho\",\"outputs\":[{\"internalType\":\"contract Rho\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"toCTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cTokenAmt\",\"type\":\"uint256\"}],\"name\":\"toUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/RhoLens.sol\":\"RhoLensV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Math.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\n/* @dev A safe math lib for Rho data types. \\n   Note: always returns type of left side param */\\ncontract Math is Types {\\n\\n\\tuint constant EXP_SCALE = 1e18;\\n    Exp ONE_EXP = Exp({mantissa: EXP_SCALE});\\n\\n    function _toExp(uint num) pure internal returns (Exp memory) {\\n    \\treturn Exp({mantissa: num});\\n    }\\n\\n    function _toUint(int a) pure internal returns (uint) {\\n        return a > 0 ? uint(a) : 0;\\n    }\\n\\n    function _lt(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (bool) {\\n        return a.val < b.val;\\n    }\\n\\n    function _lte(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (bool) {\\n        return a.val <= b.val;\\n    }\\n\\n    function _add(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _add(a.mantissa, b.mantissa)});\\n    }\\n\\n    function _add(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _add(a.val, b.val)});\\n    }\\n\\n    function _add(uint a, uint b) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"addition overflow\\\");\\n        return c;\\n    }\\n\\n    function _sub(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _sub(a.mantissa, b.mantissa)});\\n    }\\n\\n    function _subToZero(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        if (b.val >= a.val) {\\n            return CTokenAmount({val: 0});\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _subToZero(uint a, uint b) pure internal returns (uint) {\\n        if (b >= a) {\\n            return 0;\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _subToZero(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        if (b.mantissa >= a.mantissa) {\\n            return Exp({mantissa: 0});\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _sub(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _sub(a.val, b.val)});\\n    }\\n\\n    function _sub(uint a, uint b) pure internal returns (uint) {\\n        require(b <= a, \\\"subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n    function _sub(int a, uint b) pure internal returns (int) {\\n        int c = a - int(b);\\n        require(a >= c, \\\"int - uint underflow\\\");\\n        return c;\\n    }\\n\\n    function _add(int a, uint b) pure internal returns (int) {\\n        int c = a + int(b);\\n        require(a <= c, \\\"int + uint overflow\\\");\\n        return c;\\n    }\\n\\n    function _mul(uint a, CTokenAmount memory b) pure internal returns (uint) {\\n        return _mul(a, b.val);\\n    }\\n\\n    function _mul(CTokenAmount memory a, uint b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _mul(a.val, b)});\\n    }\\n\\n    function _mul(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _mul(a.mantissa, b.mantissa) / EXP_SCALE});\\n    }\\n\\n    function _mul(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _mul(a.mantissa, b)});\\n    }\\n\\n    function _mul(uint a, Exp memory b) pure internal returns (uint) {\\n        return _mul(a, b.mantissa) / EXP_SCALE;\\n    }\\n\\n    function _mul(uint a, uint b) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function _div(uint a, CTokenAmount memory b) pure internal returns (uint) {\\n        return _div(a, b.val);\\n    }\\n\\n    function _div(CTokenAmount memory a, uint b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _div(a.val, b)});\\n    }\\n\\n    function _div(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _div(_mul(a.mantissa, EXP_SCALE), b.mantissa)});\\n    }\\n\\n    function _div(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _div(a.mantissa, b)});\\n    }\\n\\n    function _div(uint a, Exp memory b) pure internal returns (uint) {\\n        return _div(_mul(a, EXP_SCALE), b.mantissa);\\n    }\\n\\n    function _div(uint a, uint b) pure internal returns (uint) {\\n        require(b > 0, \\\"divide by zero\\\");\\n        return a / b;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x8c6200920feaf6aa32f936d0daf59a94bc84b9b5808c425db8b1eba60bd65e06\"},\"contracts/Rho.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Math.sol\\\";\\nimport {RhoInterface, CTokenInterface, CompInterface, InterestRateModelInterface} from \\\"./RhoInterfaces.sol\\\";\\n\\n/* @dev:\\n * CTokens are used as collateral. \\\"Underlying\\\" in Rho refers to the collateral CToken's underlying token.\\n * An Exp is a data type with 18 decimals, used for scaling up and precise calculations */\\ncontract Rho is RhoInterface, Math {\\n\\n\\tCTokenInterface public immutable cToken;\\n\\tCompInterface public immutable comp;\\n\\n\\tuint public immutable SWAP_MIN_DURATION;\\n\\tuint public immutable SUPPLY_MIN_DURATION;\\n\\tuint public immutable MIN_SWAP_NOTIONAL = 1e18;\\n\\tuint public immutable CLOSE_GRACE_PERIOD_BLOCKS = 3000; // ~12.5 hrs\\n\\tuint public immutable CLOSE_PENALTY_PER_BLOCK_MANTISSA = 1e14;// 1% (1e16) every 25 min (100 blocks)\\n\\n\\tconstructor (\\n\\t\\tInterestRateModelInterface interestRateModel_,\\n\\t\\tCTokenInterface cToken_,\\n\\t\\tCompInterface comp_,\\n\\t\\tuint minFloatRateMantissa_,\\n\\t\\tuint maxFloatRateMantissa_,\\n\\t\\tuint swapMinDuration_,\\n\\t\\tuint supplyMinDuration_,\\n\\t\\taddress admin_,\\n\\t\\tuint liquidityLimitCTokens_\\n\\t) public {\\n\\t\\trequire(minFloatRateMantissa_ < maxFloatRateMantissa_, \\\"Min float rate must be below max float rate\\\");\\n\\n\\t\\tinterestRateModel = interestRateModel_;\\n\\t\\tcToken = cToken_;\\n\\t\\tcomp = comp_;\\n\\t\\tminFloatRate = _toExp(minFloatRateMantissa_);\\n\\t\\tmaxFloatRate = _toExp(maxFloatRateMantissa_);\\n\\t\\tSWAP_MIN_DURATION = swapMinDuration_;\\n\\t\\tSUPPLY_MIN_DURATION = supplyMinDuration_;\\n\\t\\tadmin = admin_;\\n\\n\\t\\tsupplyIndex = ONE_EXP.mantissa;\\n\\t\\tbenchmarkIndexStored = _toExp(cToken_.borrowIndex());\\n\\t\\tisPaused = false;\\n\\t\\tliquidityLimit = CTokenAmount({val:liquidityLimitCTokens_});\\n\\t}\\n\\n\\t/* @dev Supplies liquidity to the protocol. Become the counterparty for all swap traders, in return for fees.\\n\\t * @param cTokenSupplyAmount Amount to supply, in CTokens.\\n\\t */\\n\\tfunction supply(uint cTokenSupplyAmount) public override {\\n\\t\\tCTokenAmount memory supplyAmount = CTokenAmount({val: cTokenSupplyAmount});\\n\\t\\tCTokenAmount memory supplierLiquidityNew = _add(supplierLiquidity, supplyAmount);\\n\\t\\t\\n\\t\\trequire(_lt(supplierLiquidityNew, liquidityLimit), \\\"Supply paused, above liquidity limit\\\");\\n\\t\\trequire(isPaused == false, \\\"Market paused\\\");\\n\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\taccrue(cTokenExchangeRate);\\n\\t\\tCTokenAmount memory prevSupply = supplyAccounts[msg.sender].amount;\\n\\n\\t\\tCTokenAmount memory truedUpPrevSupply;\\n\\t\\tif (prevSupply.val == 0) {\\n\\t\\t\\ttruedUpPrevSupply = CTokenAmount({val: 0});\\n\\t\\t} else {\\n\\t\\t\\tuint prevIndex = supplyAccounts[msg.sender].index;\\n\\t\\t\\ttruedUpPrevSupply = _div(_mul(prevSupply, supplyIndex), prevIndex);\\n\\t\\t}\\n\\n\\t\\tCTokenAmount memory newSupplyAmount = _add(truedUpPrevSupply, supplyAmount);\\n\\n\\t\\temit Supply(msg.sender, cTokenSupplyAmount, newSupplyAmount.val);\\n\\n\\t\\tsupplyAccounts[msg.sender].amount = newSupplyAmount;\\n\\t\\tsupplyAccounts[msg.sender].lastBlock = getBlockNumber();\\n\\t\\tsupplyAccounts[msg.sender].index = supplyIndex;\\n\\n\\t\\tsupplierLiquidity = supplierLiquidityNew;\\n\\n\\t\\ttransferIn(msg.sender, supplyAmount);\\n\\t}\\n\\n\\t/* @dev Remove liquidity from protocol. Can only perform after a waiting period from supplying, to prevent interest rate manipulation\\n\\t * @param removeCTokenAmount Amount of CTokens to remove. 0 removes all CTokens.\\n\\t */\\n\\tfunction remove(uint removeCTokenAmount) public override {\\n\\t\\tCTokenAmount memory removeAmount = CTokenAmount({val: removeCTokenAmount});\\n\\t\\tSupplyAccount memory account = supplyAccounts[msg.sender];\\n\\t\\trequire(account.amount.val > 0, \\\"Must withdraw from active account\\\");\\n\\t\\trequire(getBlockNumber() - account.lastBlock >= SUPPLY_MIN_DURATION, \\\"Liquidity must be supplied a minimum duration\\\");\\n\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\tCTokenAmount memory lockedCollateral = accrue(cTokenExchangeRate);\\n\\t\\tCTokenAmount memory truedUpAccountValue = _div(_mul(account.amount, supplyIndex), account.index);\\n\\n\\t\\t// Remove all liquidity\\n\\t\\tif (removeAmount.val == 0) {\\n\\t\\t\\tremoveAmount = truedUpAccountValue;\\n\\t\\t}\\n\\t\\trequire(_lte(removeAmount, truedUpAccountValue), \\\"Trying to remove more than account value\\\");\\n\\t\\tCTokenAmount memory unlockedCollateral = _sub(supplierLiquidity, lockedCollateral);\\n\\t\\t\\n\\t\\trequire(_lte(removeAmount, unlockedCollateral), \\\"Removing more liquidity than is unlocked\\\");\\n\\t\\trequire(_lte(removeAmount, supplierLiquidity), \\\"Removing more than total supplier liquidity\\\");\\n\\n\\t\\tCTokenAmount memory newAccountValue = _sub(truedUpAccountValue, removeAmount);\\n\\n\\t\\temit Remove(msg.sender, removeCTokenAmount, newAccountValue.val);\\n\\n\\t\\tsupplyAccounts[msg.sender].lastBlock = getBlockNumber();\\n\\t\\tsupplyAccounts[msg.sender].index = supplyIndex;\\n\\t\\tsupplyAccounts[msg.sender].amount = newAccountValue;\\n\\n\\t\\tsupplierLiquidity = _sub(supplierLiquidity, removeAmount);\\n\\n\\t\\ttransferOut(msg.sender, removeAmount);\\n\\t}\\n\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) public override returns(bytes32 swapHash) {\\n\\t\\treturn openInternal(true, notionalAmount, maximumFixedRateMantissa);\\n\\t}\\n\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) public override returns(bytes32 swapHash) {\\n\\t\\treturn openInternal(false, notionalAmount, minFixedRateMantissa);\\n\\t}\\n\\n\\t/* @dev Opens a new interest rate swap\\n\\t * @param userPayingFixed : The user can choose if they want to receive fixed or pay fixed (the protocol will take the opposite side)\\n\\t * @param notionalAmount : The principal that interest rate payments will be based on\\n\\t * @param fixedRateLimitMantissa : The maximum (if payingFixed) or minimum (if receivingFixed) rate the swap should succeed at. Prevents frontrunning attacks.\\n\\t \\t* The amount of interest to pay over 2,102,400 blocks (~1 year), with 18 decimals of precision. Eg: 5% per block-year => 0.5e18.\\n\\t*/\\n\\tfunction openInternal(bool userPayingFixed, uint notionalAmount, uint fixedRateLimitMantissa) internal returns (bytes32 swapHash) {\\n\\t\\trequire(isPaused == false, \\\"Market paused\\\");\\n\\t\\trequire(notionalAmount >= MIN_SWAP_NOTIONAL, \\\"Swap notional amount must exceed minimum\\\");\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\n\\t\\tCTokenAmount memory lockedCollateral = accrue(cTokenExchangeRate);\\n\\n\\t\\tCTokenAmount memory supplierLiquidityTemp = supplierLiquidity; // copy to memory for gas\\n\\t\\trequire(_lt(supplierLiquidityTemp, liquidityLimit), \\\"Open paused, above liquidity limit\\\");\\n\\t\\t\\n\\t\\t(Exp memory swapFixedRate, int rateFactorNew) = getSwapRate(userPayingFixed, notionalAmount, lockedCollateral, supplierLiquidityTemp, cTokenExchangeRate);\\n\\t\\tCTokenAmount memory userCollateralCTokens;\\n\\t\\tif (userPayingFixed) {\\n\\t\\t\\trequire(swapFixedRate.mantissa <= fixedRateLimitMantissa, \\\"The fixed rate Rho would receive is above user's limit\\\");\\n\\t\\t\\tCTokenAmount memory lockedCollateralHypothetical = _add(lockedCollateral, getReceiveFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate));\\n\\t\\t\\trequire(_lte(lockedCollateralHypothetical, supplierLiquidityTemp), \\\"Insufficient protocol collateral\\\");\\n\\t\\t\\tuserCollateralCTokens = openPayFixedSwapInternal(notionalAmount, swapFixedRate, cTokenExchangeRate);\\n\\t\\t} else {\\n\\t\\t\\trequire(swapFixedRate.mantissa >= fixedRateLimitMantissa, \\\"The fixed rate Rho would pay is below user's limit\\\");\\n\\t\\t\\tCTokenAmount memory lockedCollateralHypothetical = _add(lockedCollateral, getPayFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate));\\n\\t\\t\\trequire(_lte(lockedCollateralHypothetical, supplierLiquidityTemp), \\\"Insufficient protocol collateral\\\");\\n\\t\\t\\tuserCollateralCTokens = openReceiveFixedSwapInternal(notionalAmount, swapFixedRate, cTokenExchangeRate);\\n\\t\\t}\\n\\n\\t\\tswapHash = keccak256(abi.encode(\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexStored.mantissa,\\n\\t\\t\\tgetBlockNumber(),\\n\\t\\t\\tswapFixedRate.mantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens.val,\\n\\t\\t\\tmsg.sender\\n\\t\\t));\\n\\n\\t\\trequire(swaps[swapHash] == false, \\\"Duplicate swap\\\");\\n\\n\\t\\temit OpenSwap(\\n\\t\\t\\tswapHash,\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexStored.mantissa,\\n\\t\\t\\tgetBlockNumber(),\\n\\t\\t\\tswapFixedRate.mantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens.val,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\n\\t\\tswaps[swapHash] = true;\\n\\t\\trateFactor = rateFactorNew;\\n\\t\\ttransferIn(msg.sender, userCollateralCTokens);\\n\\t}\\n\\n\\n\\t// @dev User is paying fixed, protocol is receiving fixed\\n\\tfunction openPayFixedSwapInternal(uint notionalAmount, Exp memory swapFixedRate, Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory userCollateralCTokens) {\\n\\t\\tuint notionalReceivingFixedNew = _add(notionalReceivingFixed, notionalAmount);\\n\\t\\tuint notionalPayingFloatNew = _add(notionalPayingFloat, notionalAmount);\\n\\n\\t\\tint parBlocksReceivingFixedNew = _add(parBlocksReceivingFixed, _mul(SWAP_MIN_DURATION, notionalAmount));\\n\\n\\t\\t/* avgFixedRateReceivingNew = (avgFixedRateReceiving * notionalReceivingFixed + notionalAmount * swapFixedRate) / (notionalReceivingFixed + notionalAmount);*/\\n\\t\\tExp memory priorFixedReceivingRate = _mul(avgFixedRateReceiving, notionalReceivingFixed);\\n\\t\\tExp memory orderFixedReceivingRate = _mul(swapFixedRate, notionalAmount);\\n\\t\\tExp memory avgFixedRateReceivingNew = _div(_add(priorFixedReceivingRate, orderFixedReceivingRate), notionalReceivingFixedNew);\\n\\n\\t\\tuserCollateralCTokens = getPayFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate);\\n\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tnotionalReceivingFixed = notionalReceivingFixedNew;\\n\\t\\tavgFixedRateReceiving = avgFixedRateReceivingNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\n\\t\\treturn userCollateralCTokens;\\n\\t}\\n\\n\\t// @dev User is receiving fixed, protocol is paying fixed\\n\\tfunction openReceiveFixedSwapInternal(uint notionalAmount, Exp memory swapFixedRate, Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory userCollateralCTokens) {\\n\\t\\tuint notionalPayingFixedNew = _add(notionalPayingFixed, notionalAmount);\\n\\t\\tuint notionalReceivingFloatNew = _add(notionalReceivingFloat, notionalAmount);\\n\\n\\t\\tint parBlocksPayingFixedNew = _add(parBlocksPayingFixed, _mul(SWAP_MIN_DURATION, notionalAmount));\\n\\n\\t\\t/* avgFixedRatePayingNew = (avgFixedRatePaying * notionalPayingFixed + notionalAmount * swapFixedRate) / (notionalPayingFixed + notionalAmount) */\\n\\t\\tExp memory priorFixedPayingRate = _mul(avgFixedRatePaying, notionalPayingFixed);\\n\\t\\tExp memory orderFixedPayingRate = _mul(swapFixedRate, notionalAmount);\\n\\t\\tExp memory avgFixedRatePayingNew = _div(_add(priorFixedPayingRate, orderFixedPayingRate), notionalPayingFixedNew);\\n\\n\\t\\tuserCollateralCTokens = getReceiveFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate);\\n\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\t\\tnotionalPayingFixed = notionalPayingFixedNew;\\n\\t\\tavgFixedRatePaying = avgFixedRatePayingNew;\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\n\\t\\treturn userCollateralCTokens;\\n\\t}\\n\\n\\t/* @dev Closes an existing swap, after the min swap duration. Float payment continues even if closed late.\\n\\t * Takes params from Open event.\\n\\t * Take caution not to unecessarily revert due to underflow / overflow, as uncloseable swaps are very dangerous.\\n\\t */\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) public override {\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\taccrue(cTokenExchangeRate);\\n\\t\\tbytes32 swapHash = keccak256(abi.encode(\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexInit,\\n\\t\\t\\tinitBlock,\\n\\t\\t\\tswapFixedRateMantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens,\\n\\t\\t\\towner\\n\\t\\t));\\n\\t\\trequire(swaps[swapHash] == true, \\\"No active swap found\\\");\\n\\t\\tuint swapDuration = _sub(getBlockNumber(), initBlock);\\n\\t\\trequire(swapDuration >= SWAP_MIN_DURATION, \\\"Premature close swap\\\");\\n\\t\\tExp memory benchmarkIndexRatio = _div(benchmarkIndexStored, _toExp(benchmarkIndexInit));\\n\\n\\t\\tCTokenAmount memory userCollateral = CTokenAmount({val: userCollateralCTokens});\\n\\t\\tExp memory swapFixedRate = _toExp(swapFixedRateMantissa);\\n\\n\\t\\tCTokenAmount memory userPayout;\\n\\t\\tif (userPayingFixed) {\\n\\t\\t\\tuserPayout = closePayFixedSwapInternal(\\n\\t\\t\\t\\tswapDuration,\\n\\t\\t\\t\\tbenchmarkIndexRatio,\\n\\t\\t\\t\\tswapFixedRate,\\n\\t\\t\\t\\tnotionalAmount,\\n\\t\\t\\t\\tuserCollateral,\\n\\t\\t\\t\\tcTokenExchangeRate\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tuserPayout = closeReceiveFixedSwapInternal(\\n\\t\\t\\t\\tswapDuration,\\n\\t\\t\\t\\tbenchmarkIndexRatio,\\n\\t\\t\\t\\tswapFixedRate,\\n\\t\\t\\t\\tnotionalAmount,\\n\\t\\t\\t\\tuserCollateral,\\n\\t\\t\\t\\tcTokenExchangeRate\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tuint bal = cToken.balanceOf(address(this));\\n\\n\\t\\t// Payout is capped by total balance\\n\\t\\tif (userPayout.val > bal) userPayout = CTokenAmount({val: bal});\\n\\n\\t\\tuint lateBlocks = _sub(swapDuration, SWAP_MIN_DURATION);\\n\\t\\tCTokenAmount memory penalty = CTokenAmount(0);\\n\\n\\t\\tif (lateBlocks > CLOSE_GRACE_PERIOD_BLOCKS) {\\n\\t\\t\\tuint penaltyBlocks = lateBlocks - CLOSE_GRACE_PERIOD_BLOCKS;\\n\\t\\t\\tExp memory penaltyPercent = _mul(_toExp(CLOSE_PENALTY_PER_BLOCK_MANTISSA), penaltyBlocks);\\n\\t\\t\\tpenaltyPercent = ONE_EXP.mantissa > penaltyPercent.mantissa ? penaltyPercent : ONE_EXP; // maximum of 100% penalty\\n\\t\\t\\tpenalty = CTokenAmount(_mul(userPayout.val, penaltyPercent));\\n\\t\\t\\tuserPayout = _sub(userPayout, penalty);\\n\\t\\t}\\n\\n\\t\\temit CloseSwap(swapHash, owner, userPayout.val, penalty.val, benchmarkIndexStored.mantissa);\\n\\n\\t\\tswaps[swapHash] = false;\\n\\t\\ttransferOut(owner, userPayout);\\n\\t\\ttransferOut(msg.sender, penalty);\\n\\t}\\n\\n\\t// @dev User paid fixed, protocol paid fixed\\n\\tfunction closePayFixedSwapInternal(\\n\\t\\tuint swapDuration,\\n\\t\\tExp memory benchmarkIndexRatio,\\n\\t\\tExp memory swapFixedRate,\\n\\t\\tuint notionalAmount,\\n\\t\\tCTokenAmount memory userCollateral,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) internal returns (CTokenAmount memory userPayout) {\\n\\t\\tuint notionalReceivingFixedNew = _subToZero(notionalReceivingFixed, notionalAmount);\\n\\t\\tuint notionalPayingFloatNew = _subToZero(notionalPayingFloat, _mul(notionalAmount, benchmarkIndexRatio));\\n\\n\\t\\t/* avgFixedRateReceiving = avgFixedRateReceiving * notionalReceivingFixed - swapFixedRate * notionalAmount / notionalReceivingFixedNew */\\n\\t\\tExp memory avgFixedRateReceivingNew;\\n\\t\\tif (notionalReceivingFixedNew == 0){\\n\\t\\t\\tavgFixedRateReceivingNew = _toExp(0);\\n\\t\\t} else {\\n\\t\\t\\tExp memory numerator = _subToZero(_mul(avgFixedRateReceiving, notionalReceivingFixed), _mul(swapFixedRate, notionalAmount));\\n\\t\\t\\tavgFixedRateReceivingNew = _div(numerator, notionalReceivingFixedNew);\\n\\t\\t}\\n\\n\\t\\t/* The protocol reserved enough collateral for this swap for SWAP_MIN_DURATION, but its has been longer.\\n\\t\\t * We have decreased lockedCollateral in `accrue` for the late blocks, meaning we decreased it by more than the \\\"open\\\" tx added to it in the first place.\\n\\t\\t */\\n\\t\\tint parBlocksReceivingFixedNew = _add(parBlocksReceivingFixed, _mul(notionalAmount, _sub(swapDuration, SWAP_MIN_DURATION)));\\n\\n\\t\\tCTokenAmount memory fixedLeg = toCTokens(_mul(_mul(notionalAmount, swapDuration), swapFixedRate), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory floatLeg = toCTokens(_mul(notionalAmount, _sub(benchmarkIndexRatio, ONE_EXP)), cTokenExchangeRate);\\n\\t\\tuserPayout = _subToZero(_add(userCollateral, floatLeg), fixedLeg); // no underflows\\n\\n\\t\\tnotionalReceivingFixed = notionalReceivingFixedNew;\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\t\\tavgFixedRateReceiving = avgFixedRateReceivingNew;\\n\\n\\t\\treturn userPayout;\\n\\t}\\n\\n\\t// @dev User received fixed, protocol paid fixed\\n\\tfunction closeReceiveFixedSwapInternal(\\n\\t\\tuint swapDuration,\\n\\t\\tExp memory benchmarkIndexRatio,\\n\\t\\tExp memory swapFixedRate,\\n\\t\\tuint notionalAmount,\\n\\t\\tCTokenAmount memory userCollateral,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) internal returns (CTokenAmount memory userPayout) {\\n\\t\\tuint notionalPayingFixedNew = _subToZero(notionalPayingFixed, notionalAmount);\\n\\t\\tuint notionalReceivingFloatNew = _subToZero(notionalReceivingFloat, _mul(notionalAmount, benchmarkIndexRatio));\\n\\n\\t\\t/* avgFixedRatePaying = avgFixedRatePaying * notionalPayingFixed - swapFixedRate * notionalAmount / notionalReceivingFixedNew */\\n\\t\\tExp memory avgFixedRatePayingNew;\\n\\t\\tif (notionalPayingFixedNew == 0) {\\n\\t\\t\\tavgFixedRatePayingNew = _toExp(0);\\n\\t\\t} else {\\n\\t\\t\\tExp memory numerator = _subToZero(_mul(avgFixedRatePaying, notionalPayingFixed), _mul(swapFixedRate, notionalAmount));\\n\\t\\t\\tavgFixedRatePayingNew = _div(numerator, notionalReceivingFloatNew);\\n\\t\\t}\\n\\n\\t\\t/* The protocol reserved enough collateral for this swap for SWAP_MIN_DURATION, but its has been longer.\\n\\t\\t * We have decreased lockedCollateral in `accrue` for the late blocks, meaning we decreased it by more than the \\\"open\\\" tx added to it in the first place.\\n\\t\\t */\\n\\t\\tint parBlocksPayingFixedNew = _add(parBlocksPayingFixed, _mul(notionalAmount, _sub(swapDuration, SWAP_MIN_DURATION)));\\n\\n\\t\\tCTokenAmount memory fixedLeg = toCTokens(_mul(_mul(notionalAmount, swapDuration), swapFixedRate), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory floatLeg = toCTokens(_mul(notionalAmount, _sub(benchmarkIndexRatio, ONE_EXP)), cTokenExchangeRate);\\n\\t\\tuserPayout = _subToZero(_add(userCollateral, fixedLeg), floatLeg);\\n\\n\\t\\tnotionalPayingFixed = notionalPayingFixedNew;\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\t\\tavgFixedRatePaying = avgFixedRatePayingNew;\\n\\n\\t\\treturn userPayout;\\n\\t}\\n\\n\\t/* @dev Called internally at the beginning of external swap and liquidity provider functions.\\n\\t * WRITES TO STORAGE\\n\\t * Accounts for interest rate payments and adjust collateral requirements with the passage of time.\\n\\t * @return lockedCollateralNew : The amount of collateral the protocol needs to keep locked.\\n\\t */\\n\\tfunction accrue(Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory) {\\n\\t\\trequire(getBlockNumber() >= lastAccrualBlock, \\\"Block number decreasing\\\");\\n\\t\\tuint accruedBlocks = getBlockNumber() - lastAccrualBlock;\\n\\t\\t(CTokenAmount memory lockedCollateralNew, int parBlocksReceivingFixedNew, int parBlocksPayingFixedNew) = getLockedCollateral(accruedBlocks, cTokenExchangeRate);\\n\\n\\t\\tif (accruedBlocks == 0) {\\n\\t\\t\\treturn lockedCollateralNew;\\n\\t\\t}\\n\\n\\t\\tExp memory benchmarkIndexNew = getBenchmarkIndex();\\n\\t\\tExp memory benchmarkIndexRatio = _div(benchmarkIndexNew, benchmarkIndexStored);\\n\\t\\tExp memory floatRate = _sub(benchmarkIndexRatio, ONE_EXP);\\n\\n\\t\\tCTokenAmount memory supplierLiquidityNew = getSupplierLiquidity(accruedBlocks, floatRate, cTokenExchangeRate);\\n\\n\\t\\t// supplyIndex *= supplierLiquidityNew / supplierLiquidity\\n\\t\\tuint supplyIndexNew = supplyIndex;\\n\\t\\tif (supplierLiquidityNew.val != 0) {\\n\\t\\t\\tsupplyIndexNew = _div(_mul(supplyIndex, supplierLiquidityNew), supplierLiquidity);\\n\\t\\t}\\n\\n\\t\\tuint notionalPayingFloatNew = _mul(notionalPayingFloat, benchmarkIndexRatio);\\n\\t\\tuint notionalReceivingFloatNew = _mul(notionalReceivingFloat, benchmarkIndexRatio);\\n\\n\\t\\t/** Apply Effects **/\\n\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\n\\t\\tsupplierLiquidity = supplierLiquidityNew;\\n\\t\\tsupplyIndex = supplyIndexNew;\\n\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\n\\t\\tbenchmarkIndexStored = benchmarkIndexNew;\\n\\t\\tlastAccrualBlock = getBlockNumber();\\n\\n\\t\\temit Accrue(supplierLiquidityNew.val, lockedCollateralNew.val);\\n\\t\\treturn lockedCollateralNew;\\n\\t}\\n\\n\\tfunction transferIn(address from, CTokenAmount memory cTokenAmount) internal {\\n\\t\\trequire(cToken.transferFrom(from, address(this), cTokenAmount.val) == true, \\\"Transfer In Failed\\\");\\n\\t}\\n\\n\\tfunction transferOut(address to, CTokenAmount memory cTokenAmount) internal {\\n\\t\\tif (cTokenAmount.val > 0) {\\n\\t\\t\\trequire(cToken.transfer(to, cTokenAmount.val), \\\"Transfer Out failed\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t// ** PUBLIC PURE HELPERS ** //\\n\\n\\tfunction toCTokens(uint amount, Exp memory cTokenExchangeRate) public pure returns (CTokenAmount memory) {\\n\\t\\tuint cTokenAmount = _div(amount, cTokenExchangeRate);\\n\\t\\treturn CTokenAmount({val: cTokenAmount});\\n\\t}\\n\\n\\tfunction toUnderlying(CTokenAmount memory amount, Exp memory cTokenExchangeRate) public pure returns (uint) {\\n\\t\\treturn _mul(amount.val, cTokenExchangeRate);\\n\\t}\\n\\n\\t// *** PUBLIC VIEW GETTERS *** //\\n\\n\\t// @dev Calculate protocol locked collateral and parBlocks, which is a measure of the fixed rate credit/debt.\\n\\t// * Uses int to keep negatives, for correct late blocks calc when a single swap is outstanding\\n\\tfunction getLockedCollateral(uint accruedBlocks, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory lockedCollateral, int parBlocksReceivingFixedNew, int parBlocksPayingFixedNew) {\\n\\t\\tparBlocksReceivingFixedNew = _sub(parBlocksReceivingFixed, _mul(accruedBlocks, notionalReceivingFixed));\\n\\t\\tparBlocksPayingFixedNew = _sub(parBlocksPayingFixed, _mul(accruedBlocks, notionalPayingFixed));\\n\\n\\t\\t// Par blocks can be negative during the first or last ever swap, so floor them to 0\\n\\t\\tuint minFloatToReceive = _mul(_toUint(parBlocksPayingFixedNew), minFloatRate);\\n\\t\\tuint maxFloatToPay = _mul(_toUint(parBlocksReceivingFixedNew), maxFloatRate);\\n\\n\\t\\tuint fixedToReceive = _mul(_toUint(parBlocksReceivingFixedNew), avgFixedRateReceiving);\\n\\t\\tuint fixedToPay = _mul(_toUint(parBlocksPayingFixedNew), avgFixedRatePaying);\\n\\n\\t\\tuint minCredit = _add(fixedToReceive, minFloatToReceive);\\n\\t\\tuint maxDebt = _add(fixedToPay, maxFloatToPay);\\n\\n\\t\\tif (maxDebt > minCredit) {\\n\\t\\t\\tlockedCollateral = toCTokens(_sub(maxDebt, minCredit), cTokenExchangeRate);\\n\\t\\t} else {\\n\\t\\t\\tlockedCollateral = CTokenAmount({val:0});\\n\\t\\t}\\n\\t}\\n\\n\\t/* @dev Calculate protocol P/L by adding the cashflows since last accrual.\\n\\t * \\t\\tsupplierLiquidity += fixedReceived + floatReceived - fixedPaid - floatPaid\\n\\t */\\n\\tfunction getSupplierLiquidity(uint accruedBlocks, Exp memory floatRate, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory supplierLiquidityNew) {\\n\\t\\tuint floatPaid = _mul(notionalPayingFloat, floatRate);\\n\\t\\tuint floatReceived = _mul(notionalReceivingFloat, floatRate);\\n\\t\\tuint fixedPaid = _mul(accruedBlocks, _mul(notionalPayingFixed, avgFixedRatePaying));\\n\\t\\tuint fixedReceived = _mul(accruedBlocks, _mul(notionalReceivingFixed, avgFixedRateReceiving));\\n\\n\\t\\tCTokenAmount memory rec = toCTokens(_add(fixedReceived, floatReceived), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory paid = toCTokens(_add(fixedPaid, floatPaid), cTokenExchangeRate);\\n\\t\\tsupplierLiquidityNew = _subToZero(_add(supplierLiquidity, rec), paid);\\n\\t}\\n\\n\\t// @dev Get the rate for incoming swaps\\n\\tfunction getSwapRate(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tCTokenAmount memory lockedCollateral,\\n\\t\\tCTokenAmount memory supplierLiquidity_,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) public view returns (Exp memory, int) {\\n\\t\\t(uint ratePerBlockMantissa, int rateFactorNew) = interestRateModel.getSwapRate(\\n\\t\\t\\trateFactor,\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\torderNotional,\\n\\t\\t\\ttoUnderlying(lockedCollateral, cTokenExchangeRate),\\n\\t\\t\\ttoUnderlying(supplierLiquidity_, cTokenExchangeRate)\\n\\t\\t);\\n\\t\\treturn (_toExp(ratePerBlockMantissa), rateFactorNew);\\n\\t}\\n\\n\\t// @dev The amount that must be locked up for the payFixed leg of a swap paying fixed. Used to calculate both the protocol and user's collateral.\\n\\t// = notionalAmount * SWAP_MIN_DURATION * (swapFixedRate - minFloatRate)\\n\\tfunction getPayFixedInitCollateral(Exp memory fixedRate, uint notionalAmount, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory) {\\n\\t\\tExp memory rateDelta = _sub(fixedRate, minFloatRate);\\n\\t\\tuint amt = _mul(_mul(SWAP_MIN_DURATION, notionalAmount), rateDelta);\\n\\t\\treturn toCTokens(amt, cTokenExchangeRate);\\n\\t}\\n\\n\\t// @dev The amount that must be locked up for the receiveFixed leg of a swap receiving fixed. Used to calculate both the protocol and user's collateral.\\n\\t// = notionalAmount * SWAP_MIN_DURATION * (maxFloatRate - swapFixedRate)\\n\\tfunction getReceiveFixedInitCollateral(Exp memory fixedRate, uint notionalAmount, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory) {\\n\\t\\tExp memory rateDelta = _sub(maxFloatRate, fixedRate);\\n\\t\\tuint amt = _mul(_mul(SWAP_MIN_DURATION, notionalAmount), rateDelta);\\n\\t\\treturn toCTokens(amt, cTokenExchangeRate);\\n\\t}\\n\\n\\t// @dev Interpolates to get the current borrow index from a compound CToken (or some other similar interface)\\n\\tfunction getBenchmarkIndex() public view returns (Exp memory) {\\n\\t\\tExp memory borrowIndex = _toExp(cToken.borrowIndex());\\n\\t\\trequire(borrowIndex.mantissa != 0, \\\"Benchmark index is zero\\\");\\n\\t\\tuint accrualBlockNumber = cToken.accrualBlockNumber();\\n\\t\\trequire(getBlockNumber() >= accrualBlockNumber, \\\"Bn decreasing\\\");\\n\\t\\tuint blockDelta = _sub(getBlockNumber(), accrualBlockNumber);\\n\\n\\t\\tif (blockDelta == 0) {\\n\\t\\t\\treturn borrowIndex;\\n\\t\\t} else {\\n\\t\\t\\tExp memory borrowRateMantissa = _toExp(cToken.borrowRatePerBlock());\\n\\t\\t\\tExp memory simpleInterestFactor = _mul(borrowRateMantissa, blockDelta);\\n\\t\\t\\treturn _mul(borrowIndex, _add(simpleInterestFactor, ONE_EXP));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getExchangeRate() public view returns (Exp memory) {\\n\\t\\treturn _toExp(cToken.exchangeRateStored());\\n\\t}\\n\\n\\tfunction getBlockNumber() public view virtual returns (uint) {\\n\\t\\treturn block.number;\\n\\t}\\n\\n\\t/** ADMIN FUNCTIONS **/\\n\\n\\tfunction _setInterestRateModel(InterestRateModelInterface newModel) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set interest rate model\\\");\\n\\t\\trequire(newModel != interestRateModel, \\\"Resetting to same model\\\");\\n\\t\\temit SetInterestRateModel(address(newModel), address(interestRateModel));\\n\\t\\tinterestRateModel = newModel;\\n\\t}\\n\\n\\tfunction _setCollateralRequirements(uint minFloatRateMantissa_, uint maxFloatRateMantissa_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set collateral requirements\\\");\\n\\t\\trequire(minFloatRateMantissa_ < maxFloatRateMantissa_, \\\"Min float rate must be below max float rate\\\");\\n\\n\\t\\temit SetCollateralRequirements(minFloatRateMantissa_, maxFloatRateMantissa_);\\n\\t\\tminFloatRate = _toExp(minFloatRateMantissa_);\\n\\t\\tmaxFloatRate = _toExp(maxFloatRateMantissa_);\\n\\t}\\n\\n\\tfunction _setLiquidityLimit(uint limit_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set liqiudity limit\\\");\\n\\t\\temit SetLiquidityLimit(limit_);\\n\\t\\tliquidityLimit = CTokenAmount({val: limit_});\\n\\t}\\n\\n\\tfunction _pause(bool isPaused_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to pause\\\");\\n\\t\\trequire(isPaused_ != isPaused, \\\"Must change isPaused\\\");\\n\\t\\temit SetPause(isPaused_);\\n\\t\\tisPaused = isPaused_;\\n\\t}\\n\\n\\tfunction _transferComp(address dest, uint amount) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to transfer comp\\\");\\n\\t\\temit CompTransferred(dest, amount);\\n\\t\\tcomp.transfer(dest, amount);\\n\\t}\\n\\n\\tfunction _delegateComp(address delegatee) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to delegate comp\\\");\\n\\t\\temit CompDelegated(delegatee);\\n\\t\\tcomp.delegate(delegatee);\\n\\t}\\n\\n\\tfunction _changeAdmin(address admin_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to change admin\\\");\\n\\t\\temit AdminChanged(admin, admin_);\\n\\t\\tadmin = admin_;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xba5537c4bfd0b58acb50c9619c3eb173343af4d88ebe599094a2860ed6796aaa\"},\"contracts/RhoInterfaces.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\ninterface InterestRateModelInterface {\\n\\tfunction getSwapRate(\\n\\t\\tint rateFactorPrev,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tuint lockedCollateralUnderlying,\\n\\t\\tuint supplierLiquidityUnderlying\\n\\t) external view returns (uint rate, int rateFactorNew);\\n}\\n\\ninterface ERC20Interface {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function balanceOf(address who) external returns (uint);\\n}\\n\\ninterface CompInterface is ERC20Interface{\\n\\tfunction delegate(address delegatee) external;\\n}\\n\\ninterface CTokenInterface is ERC20Interface {\\n\\tfunction borrowIndex() external view returns (uint);\\n\\tfunction accrualBlockNumber() external view returns(uint);\\n\\tfunction borrowRatePerBlock() external view returns(uint);\\n\\tfunction exchangeRateStored() external view returns (uint);\\n}\\n\\nabstract contract RhoInterface is Types {\\n\\tfunction supply(uint cTokenSupplyAmount) external virtual;\\n\\tfunction remove(uint removeCTokenAmount) external virtual;\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) external virtual;\\n\\n\\tevent Supply(address indexed supplier, uint cTokenSupplyAmount, uint newSupplyAmount);\\n\\tevent Remove(address indexed supplier, uint removeCTokenAmount, uint newSupplyValue);\\n\\tevent OpenSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress indexed owner\\n\\t);\\n\\tevent CloseSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\taddress indexed owner,\\n\\t\\tuint userPayout,\\n\\t\\tuint penalty,\\n\\t\\tuint benchmarkIndexFinal\\n\\t);\\n\\tevent Accrue(uint supplierLiquidityNew, uint lockedCollateralNew);\\n\\tevent SetInterestRateModel(address newModel, address oldModel);\\n\\tevent SetPause(bool isPaused);\\n\\tevent AdminRenounced();\\n\\tevent CompTransferred(address dest, uint amount);\\n\\tevent CompDelegated(address delegatee);\\n\\tevent SetCollateralRequirements(uint minFloatRateMantissa, uint maxFloatRateMantissa);\\n\\tevent AdminChanged(address oldAdmin, address newAdmin);\\n\\tevent SetLiquidityLimit(uint limit);\\n\\n\\tInterestRateModelInterface public interestRateModel;\\n\\n\\tuint public lastAccrualBlock;\\n\\tExp public benchmarkIndexStored;\\n\\n\\t/* Notional size of each leg, one adjusting for compounding and one static */\\n\\tuint public notionalReceivingFixed;\\n\\tuint public notionalPayingFloat;\\n\\n\\tuint public notionalPayingFixed;\\n\\tuint public notionalReceivingFloat;\\n\\n\\t/* Measure of outstanding swap obligations. 1 Unit = 1e18 notional * 1 block. Used to calculate collateral requirements */\\n\\tint public parBlocksReceivingFixed;\\n\\tint public parBlocksPayingFixed;\\n\\n\\t/* Per block fixed / float interest rates used in collateral calculations */\\n\\tExp public avgFixedRateReceiving;\\n\\tExp public avgFixedRatePaying;\\n\\n\\t/* Per block float rate bounds used in collateral calculations */\\n\\tExp public maxFloatRate;\\n\\tExp public minFloatRate;\\n\\n\\t/* Protocol PnL */\\n\\tuint public supplyIndex;\\n\\tCTokenAmount public supplierLiquidity;\\n\\n\\tint public rateFactor;// for interest rate model\\n\\n\\taddress public admin;\\n\\n\\t/* Pausing safety functions that can pause open and supply functions */\\n\\tbool public isPaused;\\n\\tCTokenAmount public liquidityLimit;\\n\\n\\tmapping(address => SupplyAccount) public supplyAccounts;\\n\\tmapping(bytes32 => bool) public swaps;\\n\\n\\tstruct SupplyAccount {\\n\\t\\tCTokenAmount amount;\\n\\t\\tuint lastBlock;\\n\\t\\tuint index;\\n\\t}\\n\\n\\tstruct Swap {\\n\\t\\tbool userPayingFixed;\\n\\t\\tuint notionalAmount;\\n\\t\\tuint swapFixedRateMantissa;\\n\\t\\tuint benchmarkIndexInit;\\n\\t\\tuint userCollateralCTokens;\\n\\t\\tuint initBlock;\\n\\t\\taddress owner;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xb5de435fab04d6ea7331a179997e5df99991e12b1eb651b48f66163aff0e44b5\"},\"contracts/RhoLens.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Rho.sol\\\";\\nimport \\\"./Math.sol\\\";\\n\\n/* @dev A utility view contract for front-ends to use. Not part of the protocol. */\\ncontract RhoLensV1 is Math {\\n\\n\\tRho public immutable rho;\\n\\n\\tconstructor(Rho rho_) public {\\n\\t\\trho = rho_;\\n\\t}\\n\\n\\tfunction getHypotheticalOrderInfo(bool userPayingFixed, uint notionalAmount) \\n\\t\\texternal \\n\\t\\tview \\n\\t\\treturns (\\n\\t\\t\\tuint swapFixedRateMantissa, \\n\\t\\t\\tuint userCollateralCTokens, \\n\\t\\t\\tuint userCollateralUnderlying, \\n\\t\\t\\tbool protocolIsCollateralized\\n\\t\\t)\\n\\t{\\n\\t\\t(CTokenAmount memory lockedCollateral, CTokenAmount memory supplierLiquidity, Exp memory cTokenExchangeRate) = getSupplyCollateralState();\\n\\t\\t(Exp memory swapFixedRate,) = rho.getSwapRate(userPayingFixed, notionalAmount, lockedCollateral, supplierLiquidity, cTokenExchangeRate);\\n\\t\\tprotocolIsCollateralized = true;\\n\\t\\tCTokenAmount memory userCollateral;\\n\\t\\tCTokenAmount memory lockedCollateralHypothetical;\\n\\t\\tif (userPayingFixed) {\\n\\t\\t\\tuserCollateral = rho.getPayFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate);\\n\\t\\t\\tlockedCollateralHypothetical = _add(lockedCollateral, rho.getReceiveFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate));\\n\\t\\t} else {\\n\\t\\t\\tuserCollateral = rho.getReceiveFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate);\\n\\t\\t\\tlockedCollateralHypothetical = _add(lockedCollateral, rho.getPayFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate));\\n\\t\\t}\\n\\t\\tif (supplierLiquidity.val < lockedCollateralHypothetical.val) {\\n\\t\\t\\tprotocolIsCollateralized = false;\\n\\t\\t}\\n\\t\\treturn (swapFixedRate.mantissa, userCollateral.val, toUnderlying(userCollateral.val), protocolIsCollateralized);\\n\\t}\\n\\n\\tfunction getSupplyCollateralState() \\n\\t\\tpublic \\n\\t\\tview \\n\\t\\treturns (\\n\\t\\t\\tCTokenAmount memory lockedCollateral, \\n\\t\\t\\tCTokenAmount memory supplierLiquidity, \\n\\t\\t\\tExp memory cTokenExchangeRate\\n\\t\\t) \\n\\t{\\n\\t\\tcTokenExchangeRate = rho.getExchangeRate();\\n\\n\\t\\tuint accruedBlocks = rho.getBlockNumber() - rho.lastAccrualBlock();\\n\\t\\t(lockedCollateral,,) = rho.getLockedCollateral(accruedBlocks, cTokenExchangeRate);\\n\\n\\t\\tExp memory benchmarkIndexRatio = _div(rho.getBenchmarkIndex(), _toExp(rho.benchmarkIndexStored()));\\n\\t\\tExp memory floatRate = _sub(benchmarkIndexRatio, ONE_EXP);\\n\\n\\t\\tsupplierLiquidity = rho.getSupplierLiquidity(accruedBlocks, floatRate, cTokenExchangeRate);\\n\\t}\\n\\n\\tfunction getMarkets() \\n\\t\\tpublic \\n\\t\\tview \\n\\t\\treturns (\\n\\t\\t\\tuint notionalReceivingFixed,\\n\\t\\t\\tuint notionalPayingFixed,\\n\\t\\t\\tuint avgFixedRateReceiving,\\n\\t\\t\\tuint avgFixedRatePaying\\n\\t\\t) \\n\\t{\\n\\t\\treturn (rho.notionalReceivingFixed(), rho.notionalPayingFixed(), rho.avgFixedRateReceiving(), rho.avgFixedRatePaying());\\n\\t}\\n\\n\\tfunction toUnderlying(uint cTokenAmt) public view returns (uint underlyingAmount) {\\n\\t\\tExp memory rate = rho.getExchangeRate();\\n\\t\\tCTokenAmount memory amount = CTokenAmount({val: cTokenAmt});\\n\\t\\treturn rho.toUnderlying(amount, rate);\\n\\t}\\n\\n\\tfunction toCTokens(uint underlyingAmount) public view returns (uint cTokenAmount) {\\n\\t\\tExp memory rate = rho.getExchangeRate();\\n\\t\\tCTokenAmount memory amount = rho.toCTokens(underlyingAmount, rate);\\n\\t\\treturn amount.val;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xf09fd0941d7f1b7d5428339c7b24d7afecae37af59bba48f580555f6bea086ac\"},\"contracts/Types.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\ncontract Types {\\n\\n    /*@dev A type to store amounts of cTokens, to make sure they are not confused with amounts of the underlying */\\n    struct CTokenAmount {\\n        uint val;\\n    }\\n\\n    /* @dev A type to store numbers scaled up by 18 decimals*/\\n    struct Exp {\\n        uint mantissa;\\n    }\\n}\\n\",\"keccak256\":\"0x3420c97975694664fba3d84ac78149b669b452a2ac4aee8bab41e02407a494d5\"}},\"version\":1}"},"contracts/Types.sol:Types":{"abi":"[]","bin":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212207517808e5264091434aac2158393800e82a1a7fdf70ce9b80db280c38e99cc8564736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Types.sol\":\"Types\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Types.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\ncontract Types {\\n\\n    /*@dev A type to store amounts of cTokens, to make sure they are not confused with amounts of the underlying */\\n    struct CTokenAmount {\\n        uint val;\\n    }\\n\\n    /* @dev A type to store numbers scaled up by 18 decimals*/\\n    struct Exp {\\n        uint mantissa;\\n    }\\n}\\n\",\"keccak256\":\"0x3420c97975694664fba3d84ac78149b669b452a2ac4aee8bab41e02407a494d5\"}},\"version\":1}"},"contracts/test/FaucetToken.sol:FaucetToken":{"abi":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"allocateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"60806040523480156200001157600080fd5b5060405162000e4038038062000e40833981810160405260808110156200003757600080fd5b8151602083018051604051929492938301929190846401000000008211156200005f57600080fd5b9083019060208201858111156200007557600080fd5b82516401000000008111828201881017156200009057600080fd5b82525081516020918201929091019080838360005b83811015620000bf578181015183820152602001620000a5565b50505050905090810190601f168015620000ed5780820380516001836020036101000a031916815260200191505b506040818152602083015192018051929491939192846401000000008211156200011657600080fd5b9083019060208201858111156200012c57600080fd5b82516401000000008111828201881017156200014757600080fd5b82525081516020918201929091019080838360005b83811015620001765781810151838201526020016200015c565b50505050905090810190601f168015620001a45780820380516001836020036101000a031916815260200191505b506040908152600188905533600090815260208181529190208890558651620001d794506003935090870191506200020c565b508051620001ed9060049060208401906200020c565b50506005805460ff191660ff9290921691909117905550620002b19050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024f57805160ff19168380011785556200027f565b828001600101855582156200027f579182015b828111156200027f57825182559160200191906001019062000262565b506200028d92915062000291565b5090565b620002ae91905b808211156200028d576000815560010162000298565b90565b610b7f80620002c16000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80636618846311610071578063661884631461021257806370a082311461023e57806395d89b4114610264578063a9059cbb1461026c578063d73dd62314610298578063dd62ed3e146102c4576100b4565b806306fdde03146100b957806308bca56614610136578063095ea7b31461016457806318160ddd146101a457806323b872dd146101be578063313ce567146101f4575b600080fd5b6100c16102f2565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100fb5781810151838201526020016100e3565b50505050905090810190601f1680156101285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101626004803603604081101561014c57600080fd5b506001600160a01b038135169060200135610380565b005b6101906004803603604081101561017a57600080fd5b506001600160a01b0381351690602001356103de565b604080519115158252519081900360200190f35b6101ac610444565b60408051918252519081900360200190f35b610190600480360360608110156101d457600080fd5b506001600160a01b0381358116916020810135909116906040013561044a565b6101fc61066b565b6040805160ff9092168252519081900360200190f35b6101906004803603604081101561022857600080fd5b506001600160a01b038135169060200135610674565b6101ac6004803603602081101561025457600080fd5b50356001600160a01b0316610764565b6100c161077f565b6101906004803603604081101561028257600080fd5b506001600160a01b0381351690602001356107da565b610190600480360360408110156102ae57600080fd5b506001600160a01b038135169060200135610901565b6101ac600480360360408110156102da57600080fd5b506001600160a01b038135811691602001351661099a565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103785780601f1061034d57610100808354040283529160200191610378565b820191906000526020600020905b81548152906001019060200180831161035b57829003601f168201915b505050505081565b6001600160a01b0382166000818152602081815260409182902080548501905560018054850190558151848152915130927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92908290030190a35050565b3360008181526002602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b60006001600160a01b0383166104915760405162461bcd60e51b8152600401808060200182810382526028815260200180610b226028913960400191505060405180910390fd5b6001600160a01b0384166000908152602081905260409020548211156104fe576040805162461bcd60e51b815260206004820181905260248201527f5472616e7366657246726f6d3a20496e61646571756174652062616c616e6365604482015290519081900360640190fd5b6001600160a01b03841660009081526002602090815260408083203384529091529020548211156105605760405162461bcd60e51b8152600401808060200182810382526022815260200180610b006022913960400191505060405180910390fd5b6001600160a01b038416600090815260208190526040902054610589908363ffffffff6109c516565b6001600160a01b0380861660009081526020819052604080822093909355908516815220546105be908363ffffffff610a0e16565b6001600160a01b03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610600908363ffffffff6109c516565b6001600160a01b03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60055460ff1681565b3360009081526002602090815260408083206001600160a01b0386168452909152812054808311156106c9573360009081526002602090815260408083206001600160a01b03881684529091528120556106fe565b6106d9818463ffffffff6109c516565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6001600160a01b031660009081526020819052604090205490565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103785780601f1061034d57610100808354040283529160200191610378565b60006001600160a01b0383166107ef57600080fd5b33600090815260208190526040902054821115610853576040805162461bcd60e51b815260206004820152601e60248201527f5472616e736665723a20696e73756666696369656e742062616c616e63650000604482015290519081900360640190fd5b33600090815260208190526040902054610873908363ffffffff6109c516565b33600090815260208190526040808220929092556001600160a01b038516815220546108a5908363ffffffff610a0e16565b6001600160a01b038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b3360009081526002602090815260408083206001600160a01b0386168452909152812054610935908363ffffffff610a0e16565b3360008181526002602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6000610a0783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610a68565b9392505050565b600082820183811015610a07576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008184841115610af75760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610abc578181015183820152602001610aa4565b50505050905090810190601f168015610ae95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe5472616e7366657246726f6d3a20496e616465717561746520616c6c6f77616e63655472616e7366657246726f6d3a2043616e27742073656e6420746f2061646472657373207a65726fa26469706673582212205fbc810967e2d56b3a1659e90ab49a2c49d0e2bbc2ce5a54c4aaa8491b024de264736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"allocateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"returns\":{\"_0\":\"A uint256 specifying the amount of tokens still available for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"_0\":\"An uint256 representing the amount owned by the passed address.\"}},\"decreaseApproval(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseApproval(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_addedValue\":\"The amount of tokens to increase the allowance by.\",\"_spender\":\"The address which will spend the funds.\"}},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint256 the amount of tokens to be transferred\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/FaucetToken.sol\":\"FaucetToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/FaucetToken.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./StandardToken.sol\\\";\\n\\ncontract FaucetToken is StandardToken {\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\\n        totalSupply_ = _initialAmount;\\n        balances[msg.sender] = _initialAmount;\\n        name = _tokenName;\\n        symbol = _tokenSymbol;\\n        decimals = _decimalUnits;\\n    }\\n\\n    function allocateTo(address _owner, uint256 value) public {\\n        balances[_owner] += value;\\n        totalSupply_ += value;\\n        emit Transfer(address(this), _owner, value);\\n    }\\n}\\n\",\"keccak256\":\"0xf4ea18824410d4a0b355ab4a738ca788384aea817c38bef9610353d277aa1804\"},\"contracts/test/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xabba6407e3cc0e14aa98d71eac7c59513b9b68b4ac734293ac2dbab9d5cb3dfb\"},\"contracts/test/StandardToken.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n    function totalSupply() public view virtual returns (uint256);\\n    function balanceOf(address who) public view virtual returns (uint256);\\n    function transfer(address to, uint256 value) public virtual returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) balances;\\n\\n    uint256 totalSupply_;\\n\\n    /**\\n    * @dev Total number of tokens in existence\\n    */\\n    function totalSupply() public view override returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint256 _value) public override returns (bool) {\\n        require(_to != address(0));\\n        require(_value <= balances[msg.sender], \\\"Transfer: insufficient balance\\\");\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint256 representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public view virtual returns (uint256);\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n    function approve(address spender, uint256 value) public virtual returns (bool);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n    mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param _from address The address which you want to send tokens from\\n     * @param _to address The address which you want to transfer to\\n     * @param _value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"TransferFrom: Can't send to address zero\\\");\\n        require(_value <= balances[_from], \\\"TransferFrom: Inadequate balance\\\");\\n        require(_value <= allowed[_from][msg.sender], \\\"TransferFrom: Inadequate allowance\\\");\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value) public override returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param _owner address The address which owns the funds.\\n     * @param _spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(\\n        address _owner,\\n        address _spender\\n     )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To increment\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseApproval(\\n        address _spender,\\n        uint256 _addedValue\\n    )\\n        public\\n        returns (bool)\\n    {\\n        allowed[msg.sender][_spender] = (\\n            allowed[msg.sender][_spender].add(_addedValue));\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To decrement\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseApproval(\\n        address _spender,\\n        uint256 _subtractedValue\\n    )\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = allowed[msg.sender][_spender];\\n        if (_subtractedValue > oldValue) {\\n            allowed[msg.sender][_spender] = 0;\\n        } else {\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x33a81ce8e70f59fe7a0d01872dc70e6c46fe7b90dd983c960f074ee907feb93e\"}},\"version\":1}"},"contracts/test/MockCToken.sol:MockCToken":{"abi":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowRatePerBlockMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"advanceBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"allocateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bn\",\"type\":\"uint256\"}],\"name\":\"setAccrualBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowIndex_\",\"type\":\"uint256\"}],\"name\":\"setBorrowIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"6080604052670de0b6b3a764000060065560646007553480156200002257600080fd5b5060405162000fa438038062000fa4833981810160405260c08110156200004857600080fd5b8151602083015160408085015160608601805192519496939591949391820192846401000000008211156200007c57600080fd5b9083019060208201858111156200009257600080fd5b8251640100000000811182820188101715620000ad57600080fd5b82525081516020918201929091019080838360005b83811015620000dc578181015183820152602001620000c2565b50505050905090810190601f1680156200010a5780820380516001836020036101000a031916815260200191505b506040818152602083015192018051929491939192846401000000008211156200013357600080fd5b9083019060208201858111156200014957600080fd5b82516401000000008111828201881017156200016457600080fd5b82525081516020918201929091019080838360005b838110156200019357818101518382015260200162000179565b50505050905090810190601f168015620001c15780820380516001836020036101000a031916815260200191505b5060409081526001889055336000908152602081815291902088905586518894508793508692508591620001fb9160039186019062000246565b5080516200021190600490602084019062000246565b50506005805460ff191660ff92909216919091179055505050600893909355505050670de0b6b3a764000002600955620002eb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028957805160ff1916838001178555620002b9565b82800160010185558215620002b9579182015b82811115620002b95782518255916020019190600101906200029c565b50620002c7929150620002cb565b5090565b620002e891905b80821115620002c75760008155600101620002d2565b90565b610ca980620002fb6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636c540baf116100ad578063aa5af0fd11610071578063aa5af0fd14610362578063c5a6c9431461036a578063d73dd62314610387578063dd62ed3e146103b3578063f8f9da28146103e15761012c565b80636c540baf146102e35780636c979157146102eb57806370a082311461030857806395d89b411461032e578063a9059cbb146103365761012c565b806323b872dd116100f457806323b872dd1461023e578063313ce5671461027457806337d9bd92146102925780633ba0b9a9146102af57806366188463146102b75761012c565b806306fdde031461013157806308bca566146101ae578063095ea7b3146101dc57806318160ddd1461021c578063182df0f514610236575b600080fd5b6101396103e9565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017357818101518382015260200161015b565b50505050905090810190601f1680156101a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101da600480360360408110156101c457600080fd5b506001600160a01b038135169060200135610477565b005b610208600480360360408110156101f257600080fd5b506001600160a01b0381351690602001356104d5565b604080519115158252519081900360200190f35b61022461053b565b60408051918252519081900360200190f35b610224610541565b6102086004803603606081101561025457600080fd5b506001600160a01b03813581169160208101359091169060400135610547565b61027c610768565b6040805160ff9092168252519081900360200190f35b6101da600480360360208110156102a857600080fd5b5035610771565b610224610776565b610208600480360360408110156102cd57600080fd5b506001600160a01b03813516906020013561077c565b61022461086c565b6101da6004803603602081101561030157600080fd5b5035610872565b6102246004803603602081101561031e57600080fd5b50356001600160a01b031661087d565b610139610898565b6102086004803603604081101561034c57600080fd5b506001600160a01b0381351690602001356108f3565b610224610a1a565b6101da6004803603602081101561038057600080fd5b5035610a20565b6102086004803603604081101561039d57600080fd5b506001600160a01b038135169060200135610a25565b610224600480360360408110156103c957600080fd5b506001600160a01b0381358116916020013516610abe565b610224610ae9565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561046f5780601f106104445761010080835404028352916020019161046f565b820191906000526020600020905b81548152906001019060200180831161045257829003601f168201915b505050505081565b6001600160a01b0382166000818152602081815260409182902080548501905560018054850190558151848152915130927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92908290030190a35050565b3360008181526002602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b60095490565b60006001600160a01b03831661058e5760405162461bcd60e51b8152600401808060200182810382526028815260200180610c4c6028913960400191505060405180910390fd5b6001600160a01b0384166000908152602081905260409020548211156105fb576040805162461bcd60e51b815260206004820181905260248201527f5472616e7366657246726f6d3a20496e61646571756174652062616c616e6365604482015290519081900360640190fd5b6001600160a01b038416600090815260026020908152604080832033845290915290205482111561065d5760405162461bcd60e51b8152600401808060200182810382526022815260200180610c2a6022913960400191505060405180910390fd5b6001600160a01b038416600090815260208190526040902054610686908363ffffffff610aef16565b6001600160a01b0380861660009081526020819052604080822093909355908516815220546106bb908363ffffffff610b3816565b6001600160a01b038085166000908152602081815260408083209490945591871681526002825282812033825290915220546106fd908363ffffffff610aef16565b6001600160a01b03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60055460ff1681565b600655565b60095481565b3360009081526002602090815260408083206001600160a01b0386168452909152812054808311156107d1573360009081526002602090815260408083206001600160a01b0388168452909152812055610806565b6107e1818463ffffffff610aef16565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60075481565b600780549091019055565b6001600160a01b031660009081526020819052604090205490565b6004805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561046f5780601f106104445761010080835404028352916020019161046f565b60006001600160a01b03831661090857600080fd5b3360009081526020819052604090205482111561096c576040805162461bcd60e51b815260206004820152601e60248201527f5472616e736665723a20696e73756666696369656e742062616c616e63650000604482015290519081900360640190fd5b3360009081526020819052604090205461098c908363ffffffff610aef16565b33600090815260208190526040808220929092556001600160a01b038516815220546109be908363ffffffff610b3816565b6001600160a01b038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60065481565b600755565b3360009081526002602090815260408083206001600160a01b0386168452909152812054610a59908363ffffffff610b3816565b3360008181526002602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b60085481565b6000610b3183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610b92565b9392505050565b600082820183811015610b31576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008184841115610c215760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610be6578181015183820152602001610bce565b50505050905090810190601f168015610c135780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe5472616e7366657246726f6d3a20496e616465717561746520616c6c6f77616e63655472616e7366657246726f6d3a2043616e27742073656e6420746f2061646472657373207a65726fa26469706673582212200cd8f2f325bca78e3fe42a6cd2f3e97d1e2308260329ef7a5b431c383870ee7264736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowRatePerBlockMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"advanceBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"allocateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bn\",\"type\":\"uint256\"}],\"name\":\"setAccrualBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowIndex_\",\"type\":\"uint256\"}],\"name\":\"setBorrowIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"returns\":{\"_0\":\"A uint256 specifying the amount of tokens still available for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"_0\":\"An uint256 representing the amount owned by the passed address.\"}},\"decreaseApproval(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseApproval(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_addedValue\":\"The amount of tokens to increase the allowance by.\",\"_spender\":\"The address which will spend the funds.\"}},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint256 the amount of tokens to be transferred\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockCToken.sol\":\"MockCToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Math.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\n/* @dev A safe math lib for Rho data types. \\n   Note: always returns type of left side param */\\ncontract Math is Types {\\n\\n\\tuint constant EXP_SCALE = 1e18;\\n    Exp ONE_EXP = Exp({mantissa: EXP_SCALE});\\n\\n    function _toExp(uint num) pure internal returns (Exp memory) {\\n    \\treturn Exp({mantissa: num});\\n    }\\n\\n    function _toUint(int a) pure internal returns (uint) {\\n        return a > 0 ? uint(a) : 0;\\n    }\\n\\n    function _lt(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (bool) {\\n        return a.val < b.val;\\n    }\\n\\n    function _lte(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (bool) {\\n        return a.val <= b.val;\\n    }\\n\\n    function _add(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _add(a.mantissa, b.mantissa)});\\n    }\\n\\n    function _add(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _add(a.val, b.val)});\\n    }\\n\\n    function _add(uint a, uint b) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"addition overflow\\\");\\n        return c;\\n    }\\n\\n    function _sub(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _sub(a.mantissa, b.mantissa)});\\n    }\\n\\n    function _subToZero(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        if (b.val >= a.val) {\\n            return CTokenAmount({val: 0});\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _subToZero(uint a, uint b) pure internal returns (uint) {\\n        if (b >= a) {\\n            return 0;\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _subToZero(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        if (b.mantissa >= a.mantissa) {\\n            return Exp({mantissa: 0});\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _sub(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _sub(a.val, b.val)});\\n    }\\n\\n    function _sub(uint a, uint b) pure internal returns (uint) {\\n        require(b <= a, \\\"subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n    function _sub(int a, uint b) pure internal returns (int) {\\n        int c = a - int(b);\\n        require(a >= c, \\\"int - uint underflow\\\");\\n        return c;\\n    }\\n\\n    function _add(int a, uint b) pure internal returns (int) {\\n        int c = a + int(b);\\n        require(a <= c, \\\"int + uint overflow\\\");\\n        return c;\\n    }\\n\\n    function _mul(uint a, CTokenAmount memory b) pure internal returns (uint) {\\n        return _mul(a, b.val);\\n    }\\n\\n    function _mul(CTokenAmount memory a, uint b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _mul(a.val, b)});\\n    }\\n\\n    function _mul(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _mul(a.mantissa, b.mantissa) / EXP_SCALE});\\n    }\\n\\n    function _mul(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _mul(a.mantissa, b)});\\n    }\\n\\n    function _mul(uint a, Exp memory b) pure internal returns (uint) {\\n        return _mul(a, b.mantissa) / EXP_SCALE;\\n    }\\n\\n    function _mul(uint a, uint b) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function _div(uint a, CTokenAmount memory b) pure internal returns (uint) {\\n        return _div(a, b.val);\\n    }\\n\\n    function _div(CTokenAmount memory a, uint b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _div(a.val, b)});\\n    }\\n\\n    function _div(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _div(_mul(a.mantissa, EXP_SCALE), b.mantissa)});\\n    }\\n\\n    function _div(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _div(a.mantissa, b)});\\n    }\\n\\n    function _div(uint a, Exp memory b) pure internal returns (uint) {\\n        return _div(_mul(a, EXP_SCALE), b.mantissa);\\n    }\\n\\n    function _div(uint a, uint b) pure internal returns (uint) {\\n        require(b > 0, \\\"divide by zero\\\");\\n        return a / b;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x8c6200920feaf6aa32f936d0daf59a94bc84b9b5808c425db8b1eba60bd65e06\"},\"contracts/Rho.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Math.sol\\\";\\nimport {RhoInterface, CTokenInterface, CompInterface, InterestRateModelInterface} from \\\"./RhoInterfaces.sol\\\";\\n\\n/* @dev:\\n * CTokens are used as collateral. \\\"Underlying\\\" in Rho refers to the collateral CToken's underlying token.\\n * An Exp is a data type with 18 decimals, used for scaling up and precise calculations */\\ncontract Rho is RhoInterface, Math {\\n\\n\\tCTokenInterface public immutable cToken;\\n\\tCompInterface public immutable comp;\\n\\n\\tuint public immutable SWAP_MIN_DURATION;\\n\\tuint public immutable SUPPLY_MIN_DURATION;\\n\\tuint public immutable MIN_SWAP_NOTIONAL = 1e18;\\n\\tuint public immutable CLOSE_GRACE_PERIOD_BLOCKS = 3000; // ~12.5 hrs\\n\\tuint public immutable CLOSE_PENALTY_PER_BLOCK_MANTISSA = 1e14;// 1% (1e16) every 25 min (100 blocks)\\n\\n\\tconstructor (\\n\\t\\tInterestRateModelInterface interestRateModel_,\\n\\t\\tCTokenInterface cToken_,\\n\\t\\tCompInterface comp_,\\n\\t\\tuint minFloatRateMantissa_,\\n\\t\\tuint maxFloatRateMantissa_,\\n\\t\\tuint swapMinDuration_,\\n\\t\\tuint supplyMinDuration_,\\n\\t\\taddress admin_,\\n\\t\\tuint liquidityLimitCTokens_\\n\\t) public {\\n\\t\\trequire(minFloatRateMantissa_ < maxFloatRateMantissa_, \\\"Min float rate must be below max float rate\\\");\\n\\n\\t\\tinterestRateModel = interestRateModel_;\\n\\t\\tcToken = cToken_;\\n\\t\\tcomp = comp_;\\n\\t\\tminFloatRate = _toExp(minFloatRateMantissa_);\\n\\t\\tmaxFloatRate = _toExp(maxFloatRateMantissa_);\\n\\t\\tSWAP_MIN_DURATION = swapMinDuration_;\\n\\t\\tSUPPLY_MIN_DURATION = supplyMinDuration_;\\n\\t\\tadmin = admin_;\\n\\n\\t\\tsupplyIndex = ONE_EXP.mantissa;\\n\\t\\tbenchmarkIndexStored = _toExp(cToken_.borrowIndex());\\n\\t\\tisPaused = false;\\n\\t\\tliquidityLimit = CTokenAmount({val:liquidityLimitCTokens_});\\n\\t}\\n\\n\\t/* @dev Supplies liquidity to the protocol. Become the counterparty for all swap traders, in return for fees.\\n\\t * @param cTokenSupplyAmount Amount to supply, in CTokens.\\n\\t */\\n\\tfunction supply(uint cTokenSupplyAmount) public override {\\n\\t\\tCTokenAmount memory supplyAmount = CTokenAmount({val: cTokenSupplyAmount});\\n\\t\\tCTokenAmount memory supplierLiquidityNew = _add(supplierLiquidity, supplyAmount);\\n\\t\\t\\n\\t\\trequire(_lt(supplierLiquidityNew, liquidityLimit), \\\"Supply paused, above liquidity limit\\\");\\n\\t\\trequire(isPaused == false, \\\"Market paused\\\");\\n\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\taccrue(cTokenExchangeRate);\\n\\t\\tCTokenAmount memory prevSupply = supplyAccounts[msg.sender].amount;\\n\\n\\t\\tCTokenAmount memory truedUpPrevSupply;\\n\\t\\tif (prevSupply.val == 0) {\\n\\t\\t\\ttruedUpPrevSupply = CTokenAmount({val: 0});\\n\\t\\t} else {\\n\\t\\t\\tuint prevIndex = supplyAccounts[msg.sender].index;\\n\\t\\t\\ttruedUpPrevSupply = _div(_mul(prevSupply, supplyIndex), prevIndex);\\n\\t\\t}\\n\\n\\t\\tCTokenAmount memory newSupplyAmount = _add(truedUpPrevSupply, supplyAmount);\\n\\n\\t\\temit Supply(msg.sender, cTokenSupplyAmount, newSupplyAmount.val);\\n\\n\\t\\tsupplyAccounts[msg.sender].amount = newSupplyAmount;\\n\\t\\tsupplyAccounts[msg.sender].lastBlock = getBlockNumber();\\n\\t\\tsupplyAccounts[msg.sender].index = supplyIndex;\\n\\n\\t\\tsupplierLiquidity = supplierLiquidityNew;\\n\\n\\t\\ttransferIn(msg.sender, supplyAmount);\\n\\t}\\n\\n\\t/* @dev Remove liquidity from protocol. Can only perform after a waiting period from supplying, to prevent interest rate manipulation\\n\\t * @param removeCTokenAmount Amount of CTokens to remove. 0 removes all CTokens.\\n\\t */\\n\\tfunction remove(uint removeCTokenAmount) public override {\\n\\t\\tCTokenAmount memory removeAmount = CTokenAmount({val: removeCTokenAmount});\\n\\t\\tSupplyAccount memory account = supplyAccounts[msg.sender];\\n\\t\\trequire(account.amount.val > 0, \\\"Must withdraw from active account\\\");\\n\\t\\trequire(getBlockNumber() - account.lastBlock >= SUPPLY_MIN_DURATION, \\\"Liquidity must be supplied a minimum duration\\\");\\n\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\tCTokenAmount memory lockedCollateral = accrue(cTokenExchangeRate);\\n\\t\\tCTokenAmount memory truedUpAccountValue = _div(_mul(account.amount, supplyIndex), account.index);\\n\\n\\t\\t// Remove all liquidity\\n\\t\\tif (removeAmount.val == 0) {\\n\\t\\t\\tremoveAmount = truedUpAccountValue;\\n\\t\\t}\\n\\t\\trequire(_lte(removeAmount, truedUpAccountValue), \\\"Trying to remove more than account value\\\");\\n\\t\\tCTokenAmount memory unlockedCollateral = _sub(supplierLiquidity, lockedCollateral);\\n\\t\\t\\n\\t\\trequire(_lte(removeAmount, unlockedCollateral), \\\"Removing more liquidity than is unlocked\\\");\\n\\t\\trequire(_lte(removeAmount, supplierLiquidity), \\\"Removing more than total supplier liquidity\\\");\\n\\n\\t\\tCTokenAmount memory newAccountValue = _sub(truedUpAccountValue, removeAmount);\\n\\n\\t\\temit Remove(msg.sender, removeCTokenAmount, newAccountValue.val);\\n\\n\\t\\tsupplyAccounts[msg.sender].lastBlock = getBlockNumber();\\n\\t\\tsupplyAccounts[msg.sender].index = supplyIndex;\\n\\t\\tsupplyAccounts[msg.sender].amount = newAccountValue;\\n\\n\\t\\tsupplierLiquidity = _sub(supplierLiquidity, removeAmount);\\n\\n\\t\\ttransferOut(msg.sender, removeAmount);\\n\\t}\\n\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) public override returns(bytes32 swapHash) {\\n\\t\\treturn openInternal(true, notionalAmount, maximumFixedRateMantissa);\\n\\t}\\n\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) public override returns(bytes32 swapHash) {\\n\\t\\treturn openInternal(false, notionalAmount, minFixedRateMantissa);\\n\\t}\\n\\n\\t/* @dev Opens a new interest rate swap\\n\\t * @param userPayingFixed : The user can choose if they want to receive fixed or pay fixed (the protocol will take the opposite side)\\n\\t * @param notionalAmount : The principal that interest rate payments will be based on\\n\\t * @param fixedRateLimitMantissa : The maximum (if payingFixed) or minimum (if receivingFixed) rate the swap should succeed at. Prevents frontrunning attacks.\\n\\t \\t* The amount of interest to pay over 2,102,400 blocks (~1 year), with 18 decimals of precision. Eg: 5% per block-year => 0.5e18.\\n\\t*/\\n\\tfunction openInternal(bool userPayingFixed, uint notionalAmount, uint fixedRateLimitMantissa) internal returns (bytes32 swapHash) {\\n\\t\\trequire(isPaused == false, \\\"Market paused\\\");\\n\\t\\trequire(notionalAmount >= MIN_SWAP_NOTIONAL, \\\"Swap notional amount must exceed minimum\\\");\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\n\\t\\tCTokenAmount memory lockedCollateral = accrue(cTokenExchangeRate);\\n\\n\\t\\tCTokenAmount memory supplierLiquidityTemp = supplierLiquidity; // copy to memory for gas\\n\\t\\trequire(_lt(supplierLiquidityTemp, liquidityLimit), \\\"Open paused, above liquidity limit\\\");\\n\\t\\t\\n\\t\\t(Exp memory swapFixedRate, int rateFactorNew) = getSwapRate(userPayingFixed, notionalAmount, lockedCollateral, supplierLiquidityTemp, cTokenExchangeRate);\\n\\t\\tCTokenAmount memory userCollateralCTokens;\\n\\t\\tif (userPayingFixed) {\\n\\t\\t\\trequire(swapFixedRate.mantissa <= fixedRateLimitMantissa, \\\"The fixed rate Rho would receive is above user's limit\\\");\\n\\t\\t\\tCTokenAmount memory lockedCollateralHypothetical = _add(lockedCollateral, getReceiveFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate));\\n\\t\\t\\trequire(_lte(lockedCollateralHypothetical, supplierLiquidityTemp), \\\"Insufficient protocol collateral\\\");\\n\\t\\t\\tuserCollateralCTokens = openPayFixedSwapInternal(notionalAmount, swapFixedRate, cTokenExchangeRate);\\n\\t\\t} else {\\n\\t\\t\\trequire(swapFixedRate.mantissa >= fixedRateLimitMantissa, \\\"The fixed rate Rho would pay is below user's limit\\\");\\n\\t\\t\\tCTokenAmount memory lockedCollateralHypothetical = _add(lockedCollateral, getPayFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate));\\n\\t\\t\\trequire(_lte(lockedCollateralHypothetical, supplierLiquidityTemp), \\\"Insufficient protocol collateral\\\");\\n\\t\\t\\tuserCollateralCTokens = openReceiveFixedSwapInternal(notionalAmount, swapFixedRate, cTokenExchangeRate);\\n\\t\\t}\\n\\n\\t\\tswapHash = keccak256(abi.encode(\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexStored.mantissa,\\n\\t\\t\\tgetBlockNumber(),\\n\\t\\t\\tswapFixedRate.mantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens.val,\\n\\t\\t\\tmsg.sender\\n\\t\\t));\\n\\n\\t\\trequire(swaps[swapHash] == false, \\\"Duplicate swap\\\");\\n\\n\\t\\temit OpenSwap(\\n\\t\\t\\tswapHash,\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexStored.mantissa,\\n\\t\\t\\tgetBlockNumber(),\\n\\t\\t\\tswapFixedRate.mantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens.val,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\n\\t\\tswaps[swapHash] = true;\\n\\t\\trateFactor = rateFactorNew;\\n\\t\\ttransferIn(msg.sender, userCollateralCTokens);\\n\\t}\\n\\n\\n\\t// @dev User is paying fixed, protocol is receiving fixed\\n\\tfunction openPayFixedSwapInternal(uint notionalAmount, Exp memory swapFixedRate, Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory userCollateralCTokens) {\\n\\t\\tuint notionalReceivingFixedNew = _add(notionalReceivingFixed, notionalAmount);\\n\\t\\tuint notionalPayingFloatNew = _add(notionalPayingFloat, notionalAmount);\\n\\n\\t\\tint parBlocksReceivingFixedNew = _add(parBlocksReceivingFixed, _mul(SWAP_MIN_DURATION, notionalAmount));\\n\\n\\t\\t/* avgFixedRateReceivingNew = (avgFixedRateReceiving * notionalReceivingFixed + notionalAmount * swapFixedRate) / (notionalReceivingFixed + notionalAmount);*/\\n\\t\\tExp memory priorFixedReceivingRate = _mul(avgFixedRateReceiving, notionalReceivingFixed);\\n\\t\\tExp memory orderFixedReceivingRate = _mul(swapFixedRate, notionalAmount);\\n\\t\\tExp memory avgFixedRateReceivingNew = _div(_add(priorFixedReceivingRate, orderFixedReceivingRate), notionalReceivingFixedNew);\\n\\n\\t\\tuserCollateralCTokens = getPayFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate);\\n\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tnotionalReceivingFixed = notionalReceivingFixedNew;\\n\\t\\tavgFixedRateReceiving = avgFixedRateReceivingNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\n\\t\\treturn userCollateralCTokens;\\n\\t}\\n\\n\\t// @dev User is receiving fixed, protocol is paying fixed\\n\\tfunction openReceiveFixedSwapInternal(uint notionalAmount, Exp memory swapFixedRate, Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory userCollateralCTokens) {\\n\\t\\tuint notionalPayingFixedNew = _add(notionalPayingFixed, notionalAmount);\\n\\t\\tuint notionalReceivingFloatNew = _add(notionalReceivingFloat, notionalAmount);\\n\\n\\t\\tint parBlocksPayingFixedNew = _add(parBlocksPayingFixed, _mul(SWAP_MIN_DURATION, notionalAmount));\\n\\n\\t\\t/* avgFixedRatePayingNew = (avgFixedRatePaying * notionalPayingFixed + notionalAmount * swapFixedRate) / (notionalPayingFixed + notionalAmount) */\\n\\t\\tExp memory priorFixedPayingRate = _mul(avgFixedRatePaying, notionalPayingFixed);\\n\\t\\tExp memory orderFixedPayingRate = _mul(swapFixedRate, notionalAmount);\\n\\t\\tExp memory avgFixedRatePayingNew = _div(_add(priorFixedPayingRate, orderFixedPayingRate), notionalPayingFixedNew);\\n\\n\\t\\tuserCollateralCTokens = getReceiveFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate);\\n\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\t\\tnotionalPayingFixed = notionalPayingFixedNew;\\n\\t\\tavgFixedRatePaying = avgFixedRatePayingNew;\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\n\\t\\treturn userCollateralCTokens;\\n\\t}\\n\\n\\t/* @dev Closes an existing swap, after the min swap duration. Float payment continues even if closed late.\\n\\t * Takes params from Open event.\\n\\t * Take caution not to unecessarily revert due to underflow / overflow, as uncloseable swaps are very dangerous.\\n\\t */\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) public override {\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\taccrue(cTokenExchangeRate);\\n\\t\\tbytes32 swapHash = keccak256(abi.encode(\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexInit,\\n\\t\\t\\tinitBlock,\\n\\t\\t\\tswapFixedRateMantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens,\\n\\t\\t\\towner\\n\\t\\t));\\n\\t\\trequire(swaps[swapHash] == true, \\\"No active swap found\\\");\\n\\t\\tuint swapDuration = _sub(getBlockNumber(), initBlock);\\n\\t\\trequire(swapDuration >= SWAP_MIN_DURATION, \\\"Premature close swap\\\");\\n\\t\\tExp memory benchmarkIndexRatio = _div(benchmarkIndexStored, _toExp(benchmarkIndexInit));\\n\\n\\t\\tCTokenAmount memory userCollateral = CTokenAmount({val: userCollateralCTokens});\\n\\t\\tExp memory swapFixedRate = _toExp(swapFixedRateMantissa);\\n\\n\\t\\tCTokenAmount memory userPayout;\\n\\t\\tif (userPayingFixed) {\\n\\t\\t\\tuserPayout = closePayFixedSwapInternal(\\n\\t\\t\\t\\tswapDuration,\\n\\t\\t\\t\\tbenchmarkIndexRatio,\\n\\t\\t\\t\\tswapFixedRate,\\n\\t\\t\\t\\tnotionalAmount,\\n\\t\\t\\t\\tuserCollateral,\\n\\t\\t\\t\\tcTokenExchangeRate\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tuserPayout = closeReceiveFixedSwapInternal(\\n\\t\\t\\t\\tswapDuration,\\n\\t\\t\\t\\tbenchmarkIndexRatio,\\n\\t\\t\\t\\tswapFixedRate,\\n\\t\\t\\t\\tnotionalAmount,\\n\\t\\t\\t\\tuserCollateral,\\n\\t\\t\\t\\tcTokenExchangeRate\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tuint bal = cToken.balanceOf(address(this));\\n\\n\\t\\t// Payout is capped by total balance\\n\\t\\tif (userPayout.val > bal) userPayout = CTokenAmount({val: bal});\\n\\n\\t\\tuint lateBlocks = _sub(swapDuration, SWAP_MIN_DURATION);\\n\\t\\tCTokenAmount memory penalty = CTokenAmount(0);\\n\\n\\t\\tif (lateBlocks > CLOSE_GRACE_PERIOD_BLOCKS) {\\n\\t\\t\\tuint penaltyBlocks = lateBlocks - CLOSE_GRACE_PERIOD_BLOCKS;\\n\\t\\t\\tExp memory penaltyPercent = _mul(_toExp(CLOSE_PENALTY_PER_BLOCK_MANTISSA), penaltyBlocks);\\n\\t\\t\\tpenaltyPercent = ONE_EXP.mantissa > penaltyPercent.mantissa ? penaltyPercent : ONE_EXP; // maximum of 100% penalty\\n\\t\\t\\tpenalty = CTokenAmount(_mul(userPayout.val, penaltyPercent));\\n\\t\\t\\tuserPayout = _sub(userPayout, penalty);\\n\\t\\t}\\n\\n\\t\\temit CloseSwap(swapHash, owner, userPayout.val, penalty.val, benchmarkIndexStored.mantissa);\\n\\n\\t\\tswaps[swapHash] = false;\\n\\t\\ttransferOut(owner, userPayout);\\n\\t\\ttransferOut(msg.sender, penalty);\\n\\t}\\n\\n\\t// @dev User paid fixed, protocol paid fixed\\n\\tfunction closePayFixedSwapInternal(\\n\\t\\tuint swapDuration,\\n\\t\\tExp memory benchmarkIndexRatio,\\n\\t\\tExp memory swapFixedRate,\\n\\t\\tuint notionalAmount,\\n\\t\\tCTokenAmount memory userCollateral,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) internal returns (CTokenAmount memory userPayout) {\\n\\t\\tuint notionalReceivingFixedNew = _subToZero(notionalReceivingFixed, notionalAmount);\\n\\t\\tuint notionalPayingFloatNew = _subToZero(notionalPayingFloat, _mul(notionalAmount, benchmarkIndexRatio));\\n\\n\\t\\t/* avgFixedRateReceiving = avgFixedRateReceiving * notionalReceivingFixed - swapFixedRate * notionalAmount / notionalReceivingFixedNew */\\n\\t\\tExp memory avgFixedRateReceivingNew;\\n\\t\\tif (notionalReceivingFixedNew == 0){\\n\\t\\t\\tavgFixedRateReceivingNew = _toExp(0);\\n\\t\\t} else {\\n\\t\\t\\tExp memory numerator = _subToZero(_mul(avgFixedRateReceiving, notionalReceivingFixed), _mul(swapFixedRate, notionalAmount));\\n\\t\\t\\tavgFixedRateReceivingNew = _div(numerator, notionalReceivingFixedNew);\\n\\t\\t}\\n\\n\\t\\t/* The protocol reserved enough collateral for this swap for SWAP_MIN_DURATION, but its has been longer.\\n\\t\\t * We have decreased lockedCollateral in `accrue` for the late blocks, meaning we decreased it by more than the \\\"open\\\" tx added to it in the first place.\\n\\t\\t */\\n\\t\\tint parBlocksReceivingFixedNew = _add(parBlocksReceivingFixed, _mul(notionalAmount, _sub(swapDuration, SWAP_MIN_DURATION)));\\n\\n\\t\\tCTokenAmount memory fixedLeg = toCTokens(_mul(_mul(notionalAmount, swapDuration), swapFixedRate), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory floatLeg = toCTokens(_mul(notionalAmount, _sub(benchmarkIndexRatio, ONE_EXP)), cTokenExchangeRate);\\n\\t\\tuserPayout = _subToZero(_add(userCollateral, floatLeg), fixedLeg); // no underflows\\n\\n\\t\\tnotionalReceivingFixed = notionalReceivingFixedNew;\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\t\\tavgFixedRateReceiving = avgFixedRateReceivingNew;\\n\\n\\t\\treturn userPayout;\\n\\t}\\n\\n\\t// @dev User received fixed, protocol paid fixed\\n\\tfunction closeReceiveFixedSwapInternal(\\n\\t\\tuint swapDuration,\\n\\t\\tExp memory benchmarkIndexRatio,\\n\\t\\tExp memory swapFixedRate,\\n\\t\\tuint notionalAmount,\\n\\t\\tCTokenAmount memory userCollateral,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) internal returns (CTokenAmount memory userPayout) {\\n\\t\\tuint notionalPayingFixedNew = _subToZero(notionalPayingFixed, notionalAmount);\\n\\t\\tuint notionalReceivingFloatNew = _subToZero(notionalReceivingFloat, _mul(notionalAmount, benchmarkIndexRatio));\\n\\n\\t\\t/* avgFixedRatePaying = avgFixedRatePaying * notionalPayingFixed - swapFixedRate * notionalAmount / notionalReceivingFixedNew */\\n\\t\\tExp memory avgFixedRatePayingNew;\\n\\t\\tif (notionalPayingFixedNew == 0) {\\n\\t\\t\\tavgFixedRatePayingNew = _toExp(0);\\n\\t\\t} else {\\n\\t\\t\\tExp memory numerator = _subToZero(_mul(avgFixedRatePaying, notionalPayingFixed), _mul(swapFixedRate, notionalAmount));\\n\\t\\t\\tavgFixedRatePayingNew = _div(numerator, notionalReceivingFloatNew);\\n\\t\\t}\\n\\n\\t\\t/* The protocol reserved enough collateral for this swap for SWAP_MIN_DURATION, but its has been longer.\\n\\t\\t * We have decreased lockedCollateral in `accrue` for the late blocks, meaning we decreased it by more than the \\\"open\\\" tx added to it in the first place.\\n\\t\\t */\\n\\t\\tint parBlocksPayingFixedNew = _add(parBlocksPayingFixed, _mul(notionalAmount, _sub(swapDuration, SWAP_MIN_DURATION)));\\n\\n\\t\\tCTokenAmount memory fixedLeg = toCTokens(_mul(_mul(notionalAmount, swapDuration), swapFixedRate), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory floatLeg = toCTokens(_mul(notionalAmount, _sub(benchmarkIndexRatio, ONE_EXP)), cTokenExchangeRate);\\n\\t\\tuserPayout = _subToZero(_add(userCollateral, fixedLeg), floatLeg);\\n\\n\\t\\tnotionalPayingFixed = notionalPayingFixedNew;\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\t\\tavgFixedRatePaying = avgFixedRatePayingNew;\\n\\n\\t\\treturn userPayout;\\n\\t}\\n\\n\\t/* @dev Called internally at the beginning of external swap and liquidity provider functions.\\n\\t * WRITES TO STORAGE\\n\\t * Accounts for interest rate payments and adjust collateral requirements with the passage of time.\\n\\t * @return lockedCollateralNew : The amount of collateral the protocol needs to keep locked.\\n\\t */\\n\\tfunction accrue(Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory) {\\n\\t\\trequire(getBlockNumber() >= lastAccrualBlock, \\\"Block number decreasing\\\");\\n\\t\\tuint accruedBlocks = getBlockNumber() - lastAccrualBlock;\\n\\t\\t(CTokenAmount memory lockedCollateralNew, int parBlocksReceivingFixedNew, int parBlocksPayingFixedNew) = getLockedCollateral(accruedBlocks, cTokenExchangeRate);\\n\\n\\t\\tif (accruedBlocks == 0) {\\n\\t\\t\\treturn lockedCollateralNew;\\n\\t\\t}\\n\\n\\t\\tExp memory benchmarkIndexNew = getBenchmarkIndex();\\n\\t\\tExp memory benchmarkIndexRatio = _div(benchmarkIndexNew, benchmarkIndexStored);\\n\\t\\tExp memory floatRate = _sub(benchmarkIndexRatio, ONE_EXP);\\n\\n\\t\\tCTokenAmount memory supplierLiquidityNew = getSupplierLiquidity(accruedBlocks, floatRate, cTokenExchangeRate);\\n\\n\\t\\t// supplyIndex *= supplierLiquidityNew / supplierLiquidity\\n\\t\\tuint supplyIndexNew = supplyIndex;\\n\\t\\tif (supplierLiquidityNew.val != 0) {\\n\\t\\t\\tsupplyIndexNew = _div(_mul(supplyIndex, supplierLiquidityNew), supplierLiquidity);\\n\\t\\t}\\n\\n\\t\\tuint notionalPayingFloatNew = _mul(notionalPayingFloat, benchmarkIndexRatio);\\n\\t\\tuint notionalReceivingFloatNew = _mul(notionalReceivingFloat, benchmarkIndexRatio);\\n\\n\\t\\t/** Apply Effects **/\\n\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\n\\t\\tsupplierLiquidity = supplierLiquidityNew;\\n\\t\\tsupplyIndex = supplyIndexNew;\\n\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\n\\t\\tbenchmarkIndexStored = benchmarkIndexNew;\\n\\t\\tlastAccrualBlock = getBlockNumber();\\n\\n\\t\\temit Accrue(supplierLiquidityNew.val, lockedCollateralNew.val);\\n\\t\\treturn lockedCollateralNew;\\n\\t}\\n\\n\\tfunction transferIn(address from, CTokenAmount memory cTokenAmount) internal {\\n\\t\\trequire(cToken.transferFrom(from, address(this), cTokenAmount.val) == true, \\\"Transfer In Failed\\\");\\n\\t}\\n\\n\\tfunction transferOut(address to, CTokenAmount memory cTokenAmount) internal {\\n\\t\\tif (cTokenAmount.val > 0) {\\n\\t\\t\\trequire(cToken.transfer(to, cTokenAmount.val), \\\"Transfer Out failed\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t// ** PUBLIC PURE HELPERS ** //\\n\\n\\tfunction toCTokens(uint amount, Exp memory cTokenExchangeRate) public pure returns (CTokenAmount memory) {\\n\\t\\tuint cTokenAmount = _div(amount, cTokenExchangeRate);\\n\\t\\treturn CTokenAmount({val: cTokenAmount});\\n\\t}\\n\\n\\tfunction toUnderlying(CTokenAmount memory amount, Exp memory cTokenExchangeRate) public pure returns (uint) {\\n\\t\\treturn _mul(amount.val, cTokenExchangeRate);\\n\\t}\\n\\n\\t// *** PUBLIC VIEW GETTERS *** //\\n\\n\\t// @dev Calculate protocol locked collateral and parBlocks, which is a measure of the fixed rate credit/debt.\\n\\t// * Uses int to keep negatives, for correct late blocks calc when a single swap is outstanding\\n\\tfunction getLockedCollateral(uint accruedBlocks, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory lockedCollateral, int parBlocksReceivingFixedNew, int parBlocksPayingFixedNew) {\\n\\t\\tparBlocksReceivingFixedNew = _sub(parBlocksReceivingFixed, _mul(accruedBlocks, notionalReceivingFixed));\\n\\t\\tparBlocksPayingFixedNew = _sub(parBlocksPayingFixed, _mul(accruedBlocks, notionalPayingFixed));\\n\\n\\t\\t// Par blocks can be negative during the first or last ever swap, so floor them to 0\\n\\t\\tuint minFloatToReceive = _mul(_toUint(parBlocksPayingFixedNew), minFloatRate);\\n\\t\\tuint maxFloatToPay = _mul(_toUint(parBlocksReceivingFixedNew), maxFloatRate);\\n\\n\\t\\tuint fixedToReceive = _mul(_toUint(parBlocksReceivingFixedNew), avgFixedRateReceiving);\\n\\t\\tuint fixedToPay = _mul(_toUint(parBlocksPayingFixedNew), avgFixedRatePaying);\\n\\n\\t\\tuint minCredit = _add(fixedToReceive, minFloatToReceive);\\n\\t\\tuint maxDebt = _add(fixedToPay, maxFloatToPay);\\n\\n\\t\\tif (maxDebt > minCredit) {\\n\\t\\t\\tlockedCollateral = toCTokens(_sub(maxDebt, minCredit), cTokenExchangeRate);\\n\\t\\t} else {\\n\\t\\t\\tlockedCollateral = CTokenAmount({val:0});\\n\\t\\t}\\n\\t}\\n\\n\\t/* @dev Calculate protocol P/L by adding the cashflows since last accrual.\\n\\t * \\t\\tsupplierLiquidity += fixedReceived + floatReceived - fixedPaid - floatPaid\\n\\t */\\n\\tfunction getSupplierLiquidity(uint accruedBlocks, Exp memory floatRate, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory supplierLiquidityNew) {\\n\\t\\tuint floatPaid = _mul(notionalPayingFloat, floatRate);\\n\\t\\tuint floatReceived = _mul(notionalReceivingFloat, floatRate);\\n\\t\\tuint fixedPaid = _mul(accruedBlocks, _mul(notionalPayingFixed, avgFixedRatePaying));\\n\\t\\tuint fixedReceived = _mul(accruedBlocks, _mul(notionalReceivingFixed, avgFixedRateReceiving));\\n\\n\\t\\tCTokenAmount memory rec = toCTokens(_add(fixedReceived, floatReceived), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory paid = toCTokens(_add(fixedPaid, floatPaid), cTokenExchangeRate);\\n\\t\\tsupplierLiquidityNew = _subToZero(_add(supplierLiquidity, rec), paid);\\n\\t}\\n\\n\\t// @dev Get the rate for incoming swaps\\n\\tfunction getSwapRate(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tCTokenAmount memory lockedCollateral,\\n\\t\\tCTokenAmount memory supplierLiquidity_,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) public view returns (Exp memory, int) {\\n\\t\\t(uint ratePerBlockMantissa, int rateFactorNew) = interestRateModel.getSwapRate(\\n\\t\\t\\trateFactor,\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\torderNotional,\\n\\t\\t\\ttoUnderlying(lockedCollateral, cTokenExchangeRate),\\n\\t\\t\\ttoUnderlying(supplierLiquidity_, cTokenExchangeRate)\\n\\t\\t);\\n\\t\\treturn (_toExp(ratePerBlockMantissa), rateFactorNew);\\n\\t}\\n\\n\\t// @dev The amount that must be locked up for the payFixed leg of a swap paying fixed. Used to calculate both the protocol and user's collateral.\\n\\t// = notionalAmount * SWAP_MIN_DURATION * (swapFixedRate - minFloatRate)\\n\\tfunction getPayFixedInitCollateral(Exp memory fixedRate, uint notionalAmount, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory) {\\n\\t\\tExp memory rateDelta = _sub(fixedRate, minFloatRate);\\n\\t\\tuint amt = _mul(_mul(SWAP_MIN_DURATION, notionalAmount), rateDelta);\\n\\t\\treturn toCTokens(amt, cTokenExchangeRate);\\n\\t}\\n\\n\\t// @dev The amount that must be locked up for the receiveFixed leg of a swap receiving fixed. Used to calculate both the protocol and user's collateral.\\n\\t// = notionalAmount * SWAP_MIN_DURATION * (maxFloatRate - swapFixedRate)\\n\\tfunction getReceiveFixedInitCollateral(Exp memory fixedRate, uint notionalAmount, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory) {\\n\\t\\tExp memory rateDelta = _sub(maxFloatRate, fixedRate);\\n\\t\\tuint amt = _mul(_mul(SWAP_MIN_DURATION, notionalAmount), rateDelta);\\n\\t\\treturn toCTokens(amt, cTokenExchangeRate);\\n\\t}\\n\\n\\t// @dev Interpolates to get the current borrow index from a compound CToken (or some other similar interface)\\n\\tfunction getBenchmarkIndex() public view returns (Exp memory) {\\n\\t\\tExp memory borrowIndex = _toExp(cToken.borrowIndex());\\n\\t\\trequire(borrowIndex.mantissa != 0, \\\"Benchmark index is zero\\\");\\n\\t\\tuint accrualBlockNumber = cToken.accrualBlockNumber();\\n\\t\\trequire(getBlockNumber() >= accrualBlockNumber, \\\"Bn decreasing\\\");\\n\\t\\tuint blockDelta = _sub(getBlockNumber(), accrualBlockNumber);\\n\\n\\t\\tif (blockDelta == 0) {\\n\\t\\t\\treturn borrowIndex;\\n\\t\\t} else {\\n\\t\\t\\tExp memory borrowRateMantissa = _toExp(cToken.borrowRatePerBlock());\\n\\t\\t\\tExp memory simpleInterestFactor = _mul(borrowRateMantissa, blockDelta);\\n\\t\\t\\treturn _mul(borrowIndex, _add(simpleInterestFactor, ONE_EXP));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getExchangeRate() public view returns (Exp memory) {\\n\\t\\treturn _toExp(cToken.exchangeRateStored());\\n\\t}\\n\\n\\tfunction getBlockNumber() public view virtual returns (uint) {\\n\\t\\treturn block.number;\\n\\t}\\n\\n\\t/** ADMIN FUNCTIONS **/\\n\\n\\tfunction _setInterestRateModel(InterestRateModelInterface newModel) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set interest rate model\\\");\\n\\t\\trequire(newModel != interestRateModel, \\\"Resetting to same model\\\");\\n\\t\\temit SetInterestRateModel(address(newModel), address(interestRateModel));\\n\\t\\tinterestRateModel = newModel;\\n\\t}\\n\\n\\tfunction _setCollateralRequirements(uint minFloatRateMantissa_, uint maxFloatRateMantissa_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set collateral requirements\\\");\\n\\t\\trequire(minFloatRateMantissa_ < maxFloatRateMantissa_, \\\"Min float rate must be below max float rate\\\");\\n\\n\\t\\temit SetCollateralRequirements(minFloatRateMantissa_, maxFloatRateMantissa_);\\n\\t\\tminFloatRate = _toExp(minFloatRateMantissa_);\\n\\t\\tmaxFloatRate = _toExp(maxFloatRateMantissa_);\\n\\t}\\n\\n\\tfunction _setLiquidityLimit(uint limit_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set liqiudity limit\\\");\\n\\t\\temit SetLiquidityLimit(limit_);\\n\\t\\tliquidityLimit = CTokenAmount({val: limit_});\\n\\t}\\n\\n\\tfunction _pause(bool isPaused_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to pause\\\");\\n\\t\\trequire(isPaused_ != isPaused, \\\"Must change isPaused\\\");\\n\\t\\temit SetPause(isPaused_);\\n\\t\\tisPaused = isPaused_;\\n\\t}\\n\\n\\tfunction _transferComp(address dest, uint amount) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to transfer comp\\\");\\n\\t\\temit CompTransferred(dest, amount);\\n\\t\\tcomp.transfer(dest, amount);\\n\\t}\\n\\n\\tfunction _delegateComp(address delegatee) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to delegate comp\\\");\\n\\t\\temit CompDelegated(delegatee);\\n\\t\\tcomp.delegate(delegatee);\\n\\t}\\n\\n\\tfunction _changeAdmin(address admin_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to change admin\\\");\\n\\t\\temit AdminChanged(admin, admin_);\\n\\t\\tadmin = admin_;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xba5537c4bfd0b58acb50c9619c3eb173343af4d88ebe599094a2860ed6796aaa\"},\"contracts/RhoInterfaces.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\ninterface InterestRateModelInterface {\\n\\tfunction getSwapRate(\\n\\t\\tint rateFactorPrev,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tuint lockedCollateralUnderlying,\\n\\t\\tuint supplierLiquidityUnderlying\\n\\t) external view returns (uint rate, int rateFactorNew);\\n}\\n\\ninterface ERC20Interface {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function balanceOf(address who) external returns (uint);\\n}\\n\\ninterface CompInterface is ERC20Interface{\\n\\tfunction delegate(address delegatee) external;\\n}\\n\\ninterface CTokenInterface is ERC20Interface {\\n\\tfunction borrowIndex() external view returns (uint);\\n\\tfunction accrualBlockNumber() external view returns(uint);\\n\\tfunction borrowRatePerBlock() external view returns(uint);\\n\\tfunction exchangeRateStored() external view returns (uint);\\n}\\n\\nabstract contract RhoInterface is Types {\\n\\tfunction supply(uint cTokenSupplyAmount) external virtual;\\n\\tfunction remove(uint removeCTokenAmount) external virtual;\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) external virtual;\\n\\n\\tevent Supply(address indexed supplier, uint cTokenSupplyAmount, uint newSupplyAmount);\\n\\tevent Remove(address indexed supplier, uint removeCTokenAmount, uint newSupplyValue);\\n\\tevent OpenSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress indexed owner\\n\\t);\\n\\tevent CloseSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\taddress indexed owner,\\n\\t\\tuint userPayout,\\n\\t\\tuint penalty,\\n\\t\\tuint benchmarkIndexFinal\\n\\t);\\n\\tevent Accrue(uint supplierLiquidityNew, uint lockedCollateralNew);\\n\\tevent SetInterestRateModel(address newModel, address oldModel);\\n\\tevent SetPause(bool isPaused);\\n\\tevent AdminRenounced();\\n\\tevent CompTransferred(address dest, uint amount);\\n\\tevent CompDelegated(address delegatee);\\n\\tevent SetCollateralRequirements(uint minFloatRateMantissa, uint maxFloatRateMantissa);\\n\\tevent AdminChanged(address oldAdmin, address newAdmin);\\n\\tevent SetLiquidityLimit(uint limit);\\n\\n\\tInterestRateModelInterface public interestRateModel;\\n\\n\\tuint public lastAccrualBlock;\\n\\tExp public benchmarkIndexStored;\\n\\n\\t/* Notional size of each leg, one adjusting for compounding and one static */\\n\\tuint public notionalReceivingFixed;\\n\\tuint public notionalPayingFloat;\\n\\n\\tuint public notionalPayingFixed;\\n\\tuint public notionalReceivingFloat;\\n\\n\\t/* Measure of outstanding swap obligations. 1 Unit = 1e18 notional * 1 block. Used to calculate collateral requirements */\\n\\tint public parBlocksReceivingFixed;\\n\\tint public parBlocksPayingFixed;\\n\\n\\t/* Per block fixed / float interest rates used in collateral calculations */\\n\\tExp public avgFixedRateReceiving;\\n\\tExp public avgFixedRatePaying;\\n\\n\\t/* Per block float rate bounds used in collateral calculations */\\n\\tExp public maxFloatRate;\\n\\tExp public minFloatRate;\\n\\n\\t/* Protocol PnL */\\n\\tuint public supplyIndex;\\n\\tCTokenAmount public supplierLiquidity;\\n\\n\\tint public rateFactor;// for interest rate model\\n\\n\\taddress public admin;\\n\\n\\t/* Pausing safety functions that can pause open and supply functions */\\n\\tbool public isPaused;\\n\\tCTokenAmount public liquidityLimit;\\n\\n\\tmapping(address => SupplyAccount) public supplyAccounts;\\n\\tmapping(bytes32 => bool) public swaps;\\n\\n\\tstruct SupplyAccount {\\n\\t\\tCTokenAmount amount;\\n\\t\\tuint lastBlock;\\n\\t\\tuint index;\\n\\t}\\n\\n\\tstruct Swap {\\n\\t\\tbool userPayingFixed;\\n\\t\\tuint notionalAmount;\\n\\t\\tuint swapFixedRateMantissa;\\n\\t\\tuint benchmarkIndexInit;\\n\\t\\tuint userCollateralCTokens;\\n\\t\\tuint initBlock;\\n\\t\\taddress owner;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xb5de435fab04d6ea7331a179997e5df99991e12b1eb651b48f66163aff0e44b5\"},\"contracts/Types.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\ncontract Types {\\n\\n    /*@dev A type to store amounts of cTokens, to make sure they are not confused with amounts of the underlying */\\n    struct CTokenAmount {\\n        uint val;\\n    }\\n\\n    /* @dev A type to store numbers scaled up by 18 decimals*/\\n    struct Exp {\\n        uint mantissa;\\n    }\\n}\\n\",\"keccak256\":\"0x3420c97975694664fba3d84ac78149b669b452a2ac4aee8bab41e02407a494d5\"},\"contracts/test/FaucetToken.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./StandardToken.sol\\\";\\n\\ncontract FaucetToken is StandardToken {\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\\n        totalSupply_ = _initialAmount;\\n        balances[msg.sender] = _initialAmount;\\n        name = _tokenName;\\n        symbol = _tokenSymbol;\\n        decimals = _decimalUnits;\\n    }\\n\\n    function allocateTo(address _owner, uint256 value) public {\\n        balances[_owner] += value;\\n        totalSupply_ += value;\\n        emit Transfer(address(this), _owner, value);\\n    }\\n}\\n\",\"keccak256\":\"0xf4ea18824410d4a0b355ab4a738ca788384aea817c38bef9610353d277aa1804\"},\"contracts/test/MockCToken.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport \\\"../Rho.sol\\\";\\nimport \\\"./FaucetToken.sol\\\";\\n\\ninterface MockCTokenInterface {\\n\\tfunction borrowIndex() external view returns (uint);\\n\\tfunction accrualBlockNumber() external view returns(uint);\\n\\tfunction borrowRatePerBlock() external view returns(uint);\\n\\tfunction exchangeRateStored() external view returns (uint);\\n}\\n\\ncontract MockCToken is FaucetToken, MockCTokenInterface {\\n\\n\\tuint public override borrowIndex = 1e18;\\n\\tuint public override accrualBlockNumber = 100;\\n\\tuint public override borrowRatePerBlock;\\n\\n\\tuint public exchangeRate;\\n\\n\\tconstructor(\\n\\t\\tuint _initialExchangeRate,\\n\\t\\tuint _borrowRatePerBlockMantissa,\\n\\t\\tuint256 _initialAmount,\\n\\t\\tstring memory _tokenName,\\n\\t\\tuint8 _decimalUnits,\\n\\t\\tstring memory _tokenSymbol\\n\\t)\\n\\t\\tpublic FaucetToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol)\\n\\t{\\n\\t\\tborrowRatePerBlock = _borrowRatePerBlockMantissa;\\n\\t\\texchangeRate = _initialExchangeRate * 1e18;\\n\\t}\\n\\n\\tfunction setBorrowIndex(uint borrowIndex_) public {\\n\\t\\tborrowIndex = borrowIndex_;\\n\\t}\\n\\n\\tfunction setAccrualBlockNumber(uint bn) public {\\n\\t\\taccrualBlockNumber = bn;\\n\\t}\\n\\n\\tfunction advanceBlocks(uint blocks) public {\\n\\t\\taccrualBlockNumber += blocks;\\n\\t}\\n\\n\\tfunction exchangeRateStored() public override view returns (uint) {\\n\\t\\treturn exchangeRate;\\n\\t}\\n}\\n\",\"keccak256\":\"0x88c3eef595aa41fae9580333ff8d9d80243897a5c5ec40ef0e73af1b0022b279\"},\"contracts/test/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xabba6407e3cc0e14aa98d71eac7c59513b9b68b4ac734293ac2dbab9d5cb3dfb\"},\"contracts/test/StandardToken.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n    function totalSupply() public view virtual returns (uint256);\\n    function balanceOf(address who) public view virtual returns (uint256);\\n    function transfer(address to, uint256 value) public virtual returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) balances;\\n\\n    uint256 totalSupply_;\\n\\n    /**\\n    * @dev Total number of tokens in existence\\n    */\\n    function totalSupply() public view override returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint256 _value) public override returns (bool) {\\n        require(_to != address(0));\\n        require(_value <= balances[msg.sender], \\\"Transfer: insufficient balance\\\");\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint256 representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public view virtual returns (uint256);\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n    function approve(address spender, uint256 value) public virtual returns (bool);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n    mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param _from address The address which you want to send tokens from\\n     * @param _to address The address which you want to transfer to\\n     * @param _value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"TransferFrom: Can't send to address zero\\\");\\n        require(_value <= balances[_from], \\\"TransferFrom: Inadequate balance\\\");\\n        require(_value <= allowed[_from][msg.sender], \\\"TransferFrom: Inadequate allowance\\\");\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value) public override returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param _owner address The address which owns the funds.\\n     * @param _spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(\\n        address _owner,\\n        address _spender\\n     )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To increment\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseApproval(\\n        address _spender,\\n        uint256 _addedValue\\n    )\\n        public\\n        returns (bool)\\n    {\\n        allowed[msg.sender][_spender] = (\\n            allowed[msg.sender][_spender].add(_addedValue));\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To decrement\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseApproval(\\n        address _spender,\\n        uint256 _subtractedValue\\n    )\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = allowed[msg.sender][_spender];\\n        if (_subtractedValue > oldValue) {\\n            allowed[msg.sender][_spender] = 0;\\n        } else {\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x33a81ce8e70f59fe7a0d01872dc70e6c46fe7b90dd983c960f074ee907feb93e\"}},\"version\":1}"},"contracts/test/MockCToken.sol:MockCTokenInterface":{"abi":"[{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockCToken.sol\":\"MockCTokenInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Math.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\n/* @dev A safe math lib for Rho data types. \\n   Note: always returns type of left side param */\\ncontract Math is Types {\\n\\n\\tuint constant EXP_SCALE = 1e18;\\n    Exp ONE_EXP = Exp({mantissa: EXP_SCALE});\\n\\n    function _toExp(uint num) pure internal returns (Exp memory) {\\n    \\treturn Exp({mantissa: num});\\n    }\\n\\n    function _toUint(int a) pure internal returns (uint) {\\n        return a > 0 ? uint(a) : 0;\\n    }\\n\\n    function _lt(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (bool) {\\n        return a.val < b.val;\\n    }\\n\\n    function _lte(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (bool) {\\n        return a.val <= b.val;\\n    }\\n\\n    function _add(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _add(a.mantissa, b.mantissa)});\\n    }\\n\\n    function _add(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _add(a.val, b.val)});\\n    }\\n\\n    function _add(uint a, uint b) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"addition overflow\\\");\\n        return c;\\n    }\\n\\n    function _sub(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _sub(a.mantissa, b.mantissa)});\\n    }\\n\\n    function _subToZero(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        if (b.val >= a.val) {\\n            return CTokenAmount({val: 0});\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _subToZero(uint a, uint b) pure internal returns (uint) {\\n        if (b >= a) {\\n            return 0;\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _subToZero(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        if (b.mantissa >= a.mantissa) {\\n            return Exp({mantissa: 0});\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _sub(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _sub(a.val, b.val)});\\n    }\\n\\n    function _sub(uint a, uint b) pure internal returns (uint) {\\n        require(b <= a, \\\"subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n    function _sub(int a, uint b) pure internal returns (int) {\\n        int c = a - int(b);\\n        require(a >= c, \\\"int - uint underflow\\\");\\n        return c;\\n    }\\n\\n    function _add(int a, uint b) pure internal returns (int) {\\n        int c = a + int(b);\\n        require(a <= c, \\\"int + uint overflow\\\");\\n        return c;\\n    }\\n\\n    function _mul(uint a, CTokenAmount memory b) pure internal returns (uint) {\\n        return _mul(a, b.val);\\n    }\\n\\n    function _mul(CTokenAmount memory a, uint b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _mul(a.val, b)});\\n    }\\n\\n    function _mul(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _mul(a.mantissa, b.mantissa) / EXP_SCALE});\\n    }\\n\\n    function _mul(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _mul(a.mantissa, b)});\\n    }\\n\\n    function _mul(uint a, Exp memory b) pure internal returns (uint) {\\n        return _mul(a, b.mantissa) / EXP_SCALE;\\n    }\\n\\n    function _mul(uint a, uint b) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function _div(uint a, CTokenAmount memory b) pure internal returns (uint) {\\n        return _div(a, b.val);\\n    }\\n\\n    function _div(CTokenAmount memory a, uint b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _div(a.val, b)});\\n    }\\n\\n    function _div(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _div(_mul(a.mantissa, EXP_SCALE), b.mantissa)});\\n    }\\n\\n    function _div(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _div(a.mantissa, b)});\\n    }\\n\\n    function _div(uint a, Exp memory b) pure internal returns (uint) {\\n        return _div(_mul(a, EXP_SCALE), b.mantissa);\\n    }\\n\\n    function _div(uint a, uint b) pure internal returns (uint) {\\n        require(b > 0, \\\"divide by zero\\\");\\n        return a / b;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x8c6200920feaf6aa32f936d0daf59a94bc84b9b5808c425db8b1eba60bd65e06\"},\"contracts/Rho.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Math.sol\\\";\\nimport {RhoInterface, CTokenInterface, CompInterface, InterestRateModelInterface} from \\\"./RhoInterfaces.sol\\\";\\n\\n/* @dev:\\n * CTokens are used as collateral. \\\"Underlying\\\" in Rho refers to the collateral CToken's underlying token.\\n * An Exp is a data type with 18 decimals, used for scaling up and precise calculations */\\ncontract Rho is RhoInterface, Math {\\n\\n\\tCTokenInterface public immutable cToken;\\n\\tCompInterface public immutable comp;\\n\\n\\tuint public immutable SWAP_MIN_DURATION;\\n\\tuint public immutable SUPPLY_MIN_DURATION;\\n\\tuint public immutable MIN_SWAP_NOTIONAL = 1e18;\\n\\tuint public immutable CLOSE_GRACE_PERIOD_BLOCKS = 3000; // ~12.5 hrs\\n\\tuint public immutable CLOSE_PENALTY_PER_BLOCK_MANTISSA = 1e14;// 1% (1e16) every 25 min (100 blocks)\\n\\n\\tconstructor (\\n\\t\\tInterestRateModelInterface interestRateModel_,\\n\\t\\tCTokenInterface cToken_,\\n\\t\\tCompInterface comp_,\\n\\t\\tuint minFloatRateMantissa_,\\n\\t\\tuint maxFloatRateMantissa_,\\n\\t\\tuint swapMinDuration_,\\n\\t\\tuint supplyMinDuration_,\\n\\t\\taddress admin_,\\n\\t\\tuint liquidityLimitCTokens_\\n\\t) public {\\n\\t\\trequire(minFloatRateMantissa_ < maxFloatRateMantissa_, \\\"Min float rate must be below max float rate\\\");\\n\\n\\t\\tinterestRateModel = interestRateModel_;\\n\\t\\tcToken = cToken_;\\n\\t\\tcomp = comp_;\\n\\t\\tminFloatRate = _toExp(minFloatRateMantissa_);\\n\\t\\tmaxFloatRate = _toExp(maxFloatRateMantissa_);\\n\\t\\tSWAP_MIN_DURATION = swapMinDuration_;\\n\\t\\tSUPPLY_MIN_DURATION = supplyMinDuration_;\\n\\t\\tadmin = admin_;\\n\\n\\t\\tsupplyIndex = ONE_EXP.mantissa;\\n\\t\\tbenchmarkIndexStored = _toExp(cToken_.borrowIndex());\\n\\t\\tisPaused = false;\\n\\t\\tliquidityLimit = CTokenAmount({val:liquidityLimitCTokens_});\\n\\t}\\n\\n\\t/* @dev Supplies liquidity to the protocol. Become the counterparty for all swap traders, in return for fees.\\n\\t * @param cTokenSupplyAmount Amount to supply, in CTokens.\\n\\t */\\n\\tfunction supply(uint cTokenSupplyAmount) public override {\\n\\t\\tCTokenAmount memory supplyAmount = CTokenAmount({val: cTokenSupplyAmount});\\n\\t\\tCTokenAmount memory supplierLiquidityNew = _add(supplierLiquidity, supplyAmount);\\n\\t\\t\\n\\t\\trequire(_lt(supplierLiquidityNew, liquidityLimit), \\\"Supply paused, above liquidity limit\\\");\\n\\t\\trequire(isPaused == false, \\\"Market paused\\\");\\n\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\taccrue(cTokenExchangeRate);\\n\\t\\tCTokenAmount memory prevSupply = supplyAccounts[msg.sender].amount;\\n\\n\\t\\tCTokenAmount memory truedUpPrevSupply;\\n\\t\\tif (prevSupply.val == 0) {\\n\\t\\t\\ttruedUpPrevSupply = CTokenAmount({val: 0});\\n\\t\\t} else {\\n\\t\\t\\tuint prevIndex = supplyAccounts[msg.sender].index;\\n\\t\\t\\ttruedUpPrevSupply = _div(_mul(prevSupply, supplyIndex), prevIndex);\\n\\t\\t}\\n\\n\\t\\tCTokenAmount memory newSupplyAmount = _add(truedUpPrevSupply, supplyAmount);\\n\\n\\t\\temit Supply(msg.sender, cTokenSupplyAmount, newSupplyAmount.val);\\n\\n\\t\\tsupplyAccounts[msg.sender].amount = newSupplyAmount;\\n\\t\\tsupplyAccounts[msg.sender].lastBlock = getBlockNumber();\\n\\t\\tsupplyAccounts[msg.sender].index = supplyIndex;\\n\\n\\t\\tsupplierLiquidity = supplierLiquidityNew;\\n\\n\\t\\ttransferIn(msg.sender, supplyAmount);\\n\\t}\\n\\n\\t/* @dev Remove liquidity from protocol. Can only perform after a waiting period from supplying, to prevent interest rate manipulation\\n\\t * @param removeCTokenAmount Amount of CTokens to remove. 0 removes all CTokens.\\n\\t */\\n\\tfunction remove(uint removeCTokenAmount) public override {\\n\\t\\tCTokenAmount memory removeAmount = CTokenAmount({val: removeCTokenAmount});\\n\\t\\tSupplyAccount memory account = supplyAccounts[msg.sender];\\n\\t\\trequire(account.amount.val > 0, \\\"Must withdraw from active account\\\");\\n\\t\\trequire(getBlockNumber() - account.lastBlock >= SUPPLY_MIN_DURATION, \\\"Liquidity must be supplied a minimum duration\\\");\\n\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\tCTokenAmount memory lockedCollateral = accrue(cTokenExchangeRate);\\n\\t\\tCTokenAmount memory truedUpAccountValue = _div(_mul(account.amount, supplyIndex), account.index);\\n\\n\\t\\t// Remove all liquidity\\n\\t\\tif (removeAmount.val == 0) {\\n\\t\\t\\tremoveAmount = truedUpAccountValue;\\n\\t\\t}\\n\\t\\trequire(_lte(removeAmount, truedUpAccountValue), \\\"Trying to remove more than account value\\\");\\n\\t\\tCTokenAmount memory unlockedCollateral = _sub(supplierLiquidity, lockedCollateral);\\n\\t\\t\\n\\t\\trequire(_lte(removeAmount, unlockedCollateral), \\\"Removing more liquidity than is unlocked\\\");\\n\\t\\trequire(_lte(removeAmount, supplierLiquidity), \\\"Removing more than total supplier liquidity\\\");\\n\\n\\t\\tCTokenAmount memory newAccountValue = _sub(truedUpAccountValue, removeAmount);\\n\\n\\t\\temit Remove(msg.sender, removeCTokenAmount, newAccountValue.val);\\n\\n\\t\\tsupplyAccounts[msg.sender].lastBlock = getBlockNumber();\\n\\t\\tsupplyAccounts[msg.sender].index = supplyIndex;\\n\\t\\tsupplyAccounts[msg.sender].amount = newAccountValue;\\n\\n\\t\\tsupplierLiquidity = _sub(supplierLiquidity, removeAmount);\\n\\n\\t\\ttransferOut(msg.sender, removeAmount);\\n\\t}\\n\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) public override returns(bytes32 swapHash) {\\n\\t\\treturn openInternal(true, notionalAmount, maximumFixedRateMantissa);\\n\\t}\\n\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) public override returns(bytes32 swapHash) {\\n\\t\\treturn openInternal(false, notionalAmount, minFixedRateMantissa);\\n\\t}\\n\\n\\t/* @dev Opens a new interest rate swap\\n\\t * @param userPayingFixed : The user can choose if they want to receive fixed or pay fixed (the protocol will take the opposite side)\\n\\t * @param notionalAmount : The principal that interest rate payments will be based on\\n\\t * @param fixedRateLimitMantissa : The maximum (if payingFixed) or minimum (if receivingFixed) rate the swap should succeed at. Prevents frontrunning attacks.\\n\\t \\t* The amount of interest to pay over 2,102,400 blocks (~1 year), with 18 decimals of precision. Eg: 5% per block-year => 0.5e18.\\n\\t*/\\n\\tfunction openInternal(bool userPayingFixed, uint notionalAmount, uint fixedRateLimitMantissa) internal returns (bytes32 swapHash) {\\n\\t\\trequire(isPaused == false, \\\"Market paused\\\");\\n\\t\\trequire(notionalAmount >= MIN_SWAP_NOTIONAL, \\\"Swap notional amount must exceed minimum\\\");\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\n\\t\\tCTokenAmount memory lockedCollateral = accrue(cTokenExchangeRate);\\n\\n\\t\\tCTokenAmount memory supplierLiquidityTemp = supplierLiquidity; // copy to memory for gas\\n\\t\\trequire(_lt(supplierLiquidityTemp, liquidityLimit), \\\"Open paused, above liquidity limit\\\");\\n\\t\\t\\n\\t\\t(Exp memory swapFixedRate, int rateFactorNew) = getSwapRate(userPayingFixed, notionalAmount, lockedCollateral, supplierLiquidityTemp, cTokenExchangeRate);\\n\\t\\tCTokenAmount memory userCollateralCTokens;\\n\\t\\tif (userPayingFixed) {\\n\\t\\t\\trequire(swapFixedRate.mantissa <= fixedRateLimitMantissa, \\\"The fixed rate Rho would receive is above user's limit\\\");\\n\\t\\t\\tCTokenAmount memory lockedCollateralHypothetical = _add(lockedCollateral, getReceiveFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate));\\n\\t\\t\\trequire(_lte(lockedCollateralHypothetical, supplierLiquidityTemp), \\\"Insufficient protocol collateral\\\");\\n\\t\\t\\tuserCollateralCTokens = openPayFixedSwapInternal(notionalAmount, swapFixedRate, cTokenExchangeRate);\\n\\t\\t} else {\\n\\t\\t\\trequire(swapFixedRate.mantissa >= fixedRateLimitMantissa, \\\"The fixed rate Rho would pay is below user's limit\\\");\\n\\t\\t\\tCTokenAmount memory lockedCollateralHypothetical = _add(lockedCollateral, getPayFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate));\\n\\t\\t\\trequire(_lte(lockedCollateralHypothetical, supplierLiquidityTemp), \\\"Insufficient protocol collateral\\\");\\n\\t\\t\\tuserCollateralCTokens = openReceiveFixedSwapInternal(notionalAmount, swapFixedRate, cTokenExchangeRate);\\n\\t\\t}\\n\\n\\t\\tswapHash = keccak256(abi.encode(\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexStored.mantissa,\\n\\t\\t\\tgetBlockNumber(),\\n\\t\\t\\tswapFixedRate.mantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens.val,\\n\\t\\t\\tmsg.sender\\n\\t\\t));\\n\\n\\t\\trequire(swaps[swapHash] == false, \\\"Duplicate swap\\\");\\n\\n\\t\\temit OpenSwap(\\n\\t\\t\\tswapHash,\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexStored.mantissa,\\n\\t\\t\\tgetBlockNumber(),\\n\\t\\t\\tswapFixedRate.mantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens.val,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\n\\t\\tswaps[swapHash] = true;\\n\\t\\trateFactor = rateFactorNew;\\n\\t\\ttransferIn(msg.sender, userCollateralCTokens);\\n\\t}\\n\\n\\n\\t// @dev User is paying fixed, protocol is receiving fixed\\n\\tfunction openPayFixedSwapInternal(uint notionalAmount, Exp memory swapFixedRate, Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory userCollateralCTokens) {\\n\\t\\tuint notionalReceivingFixedNew = _add(notionalReceivingFixed, notionalAmount);\\n\\t\\tuint notionalPayingFloatNew = _add(notionalPayingFloat, notionalAmount);\\n\\n\\t\\tint parBlocksReceivingFixedNew = _add(parBlocksReceivingFixed, _mul(SWAP_MIN_DURATION, notionalAmount));\\n\\n\\t\\t/* avgFixedRateReceivingNew = (avgFixedRateReceiving * notionalReceivingFixed + notionalAmount * swapFixedRate) / (notionalReceivingFixed + notionalAmount);*/\\n\\t\\tExp memory priorFixedReceivingRate = _mul(avgFixedRateReceiving, notionalReceivingFixed);\\n\\t\\tExp memory orderFixedReceivingRate = _mul(swapFixedRate, notionalAmount);\\n\\t\\tExp memory avgFixedRateReceivingNew = _div(_add(priorFixedReceivingRate, orderFixedReceivingRate), notionalReceivingFixedNew);\\n\\n\\t\\tuserCollateralCTokens = getPayFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate);\\n\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tnotionalReceivingFixed = notionalReceivingFixedNew;\\n\\t\\tavgFixedRateReceiving = avgFixedRateReceivingNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\n\\t\\treturn userCollateralCTokens;\\n\\t}\\n\\n\\t// @dev User is receiving fixed, protocol is paying fixed\\n\\tfunction openReceiveFixedSwapInternal(uint notionalAmount, Exp memory swapFixedRate, Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory userCollateralCTokens) {\\n\\t\\tuint notionalPayingFixedNew = _add(notionalPayingFixed, notionalAmount);\\n\\t\\tuint notionalReceivingFloatNew = _add(notionalReceivingFloat, notionalAmount);\\n\\n\\t\\tint parBlocksPayingFixedNew = _add(parBlocksPayingFixed, _mul(SWAP_MIN_DURATION, notionalAmount));\\n\\n\\t\\t/* avgFixedRatePayingNew = (avgFixedRatePaying * notionalPayingFixed + notionalAmount * swapFixedRate) / (notionalPayingFixed + notionalAmount) */\\n\\t\\tExp memory priorFixedPayingRate = _mul(avgFixedRatePaying, notionalPayingFixed);\\n\\t\\tExp memory orderFixedPayingRate = _mul(swapFixedRate, notionalAmount);\\n\\t\\tExp memory avgFixedRatePayingNew = _div(_add(priorFixedPayingRate, orderFixedPayingRate), notionalPayingFixedNew);\\n\\n\\t\\tuserCollateralCTokens = getReceiveFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate);\\n\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\t\\tnotionalPayingFixed = notionalPayingFixedNew;\\n\\t\\tavgFixedRatePaying = avgFixedRatePayingNew;\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\n\\t\\treturn userCollateralCTokens;\\n\\t}\\n\\n\\t/* @dev Closes an existing swap, after the min swap duration. Float payment continues even if closed late.\\n\\t * Takes params from Open event.\\n\\t * Take caution not to unecessarily revert due to underflow / overflow, as uncloseable swaps are very dangerous.\\n\\t */\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) public override {\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\taccrue(cTokenExchangeRate);\\n\\t\\tbytes32 swapHash = keccak256(abi.encode(\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexInit,\\n\\t\\t\\tinitBlock,\\n\\t\\t\\tswapFixedRateMantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens,\\n\\t\\t\\towner\\n\\t\\t));\\n\\t\\trequire(swaps[swapHash] == true, \\\"No active swap found\\\");\\n\\t\\tuint swapDuration = _sub(getBlockNumber(), initBlock);\\n\\t\\trequire(swapDuration >= SWAP_MIN_DURATION, \\\"Premature close swap\\\");\\n\\t\\tExp memory benchmarkIndexRatio = _div(benchmarkIndexStored, _toExp(benchmarkIndexInit));\\n\\n\\t\\tCTokenAmount memory userCollateral = CTokenAmount({val: userCollateralCTokens});\\n\\t\\tExp memory swapFixedRate = _toExp(swapFixedRateMantissa);\\n\\n\\t\\tCTokenAmount memory userPayout;\\n\\t\\tif (userPayingFixed) {\\n\\t\\t\\tuserPayout = closePayFixedSwapInternal(\\n\\t\\t\\t\\tswapDuration,\\n\\t\\t\\t\\tbenchmarkIndexRatio,\\n\\t\\t\\t\\tswapFixedRate,\\n\\t\\t\\t\\tnotionalAmount,\\n\\t\\t\\t\\tuserCollateral,\\n\\t\\t\\t\\tcTokenExchangeRate\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tuserPayout = closeReceiveFixedSwapInternal(\\n\\t\\t\\t\\tswapDuration,\\n\\t\\t\\t\\tbenchmarkIndexRatio,\\n\\t\\t\\t\\tswapFixedRate,\\n\\t\\t\\t\\tnotionalAmount,\\n\\t\\t\\t\\tuserCollateral,\\n\\t\\t\\t\\tcTokenExchangeRate\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tuint bal = cToken.balanceOf(address(this));\\n\\n\\t\\t// Payout is capped by total balance\\n\\t\\tif (userPayout.val > bal) userPayout = CTokenAmount({val: bal});\\n\\n\\t\\tuint lateBlocks = _sub(swapDuration, SWAP_MIN_DURATION);\\n\\t\\tCTokenAmount memory penalty = CTokenAmount(0);\\n\\n\\t\\tif (lateBlocks > CLOSE_GRACE_PERIOD_BLOCKS) {\\n\\t\\t\\tuint penaltyBlocks = lateBlocks - CLOSE_GRACE_PERIOD_BLOCKS;\\n\\t\\t\\tExp memory penaltyPercent = _mul(_toExp(CLOSE_PENALTY_PER_BLOCK_MANTISSA), penaltyBlocks);\\n\\t\\t\\tpenaltyPercent = ONE_EXP.mantissa > penaltyPercent.mantissa ? penaltyPercent : ONE_EXP; // maximum of 100% penalty\\n\\t\\t\\tpenalty = CTokenAmount(_mul(userPayout.val, penaltyPercent));\\n\\t\\t\\tuserPayout = _sub(userPayout, penalty);\\n\\t\\t}\\n\\n\\t\\temit CloseSwap(swapHash, owner, userPayout.val, penalty.val, benchmarkIndexStored.mantissa);\\n\\n\\t\\tswaps[swapHash] = false;\\n\\t\\ttransferOut(owner, userPayout);\\n\\t\\ttransferOut(msg.sender, penalty);\\n\\t}\\n\\n\\t// @dev User paid fixed, protocol paid fixed\\n\\tfunction closePayFixedSwapInternal(\\n\\t\\tuint swapDuration,\\n\\t\\tExp memory benchmarkIndexRatio,\\n\\t\\tExp memory swapFixedRate,\\n\\t\\tuint notionalAmount,\\n\\t\\tCTokenAmount memory userCollateral,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) internal returns (CTokenAmount memory userPayout) {\\n\\t\\tuint notionalReceivingFixedNew = _subToZero(notionalReceivingFixed, notionalAmount);\\n\\t\\tuint notionalPayingFloatNew = _subToZero(notionalPayingFloat, _mul(notionalAmount, benchmarkIndexRatio));\\n\\n\\t\\t/* avgFixedRateReceiving = avgFixedRateReceiving * notionalReceivingFixed - swapFixedRate * notionalAmount / notionalReceivingFixedNew */\\n\\t\\tExp memory avgFixedRateReceivingNew;\\n\\t\\tif (notionalReceivingFixedNew == 0){\\n\\t\\t\\tavgFixedRateReceivingNew = _toExp(0);\\n\\t\\t} else {\\n\\t\\t\\tExp memory numerator = _subToZero(_mul(avgFixedRateReceiving, notionalReceivingFixed), _mul(swapFixedRate, notionalAmount));\\n\\t\\t\\tavgFixedRateReceivingNew = _div(numerator, notionalReceivingFixedNew);\\n\\t\\t}\\n\\n\\t\\t/* The protocol reserved enough collateral for this swap for SWAP_MIN_DURATION, but its has been longer.\\n\\t\\t * We have decreased lockedCollateral in `accrue` for the late blocks, meaning we decreased it by more than the \\\"open\\\" tx added to it in the first place.\\n\\t\\t */\\n\\t\\tint parBlocksReceivingFixedNew = _add(parBlocksReceivingFixed, _mul(notionalAmount, _sub(swapDuration, SWAP_MIN_DURATION)));\\n\\n\\t\\tCTokenAmount memory fixedLeg = toCTokens(_mul(_mul(notionalAmount, swapDuration), swapFixedRate), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory floatLeg = toCTokens(_mul(notionalAmount, _sub(benchmarkIndexRatio, ONE_EXP)), cTokenExchangeRate);\\n\\t\\tuserPayout = _subToZero(_add(userCollateral, floatLeg), fixedLeg); // no underflows\\n\\n\\t\\tnotionalReceivingFixed = notionalReceivingFixedNew;\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\t\\tavgFixedRateReceiving = avgFixedRateReceivingNew;\\n\\n\\t\\treturn userPayout;\\n\\t}\\n\\n\\t// @dev User received fixed, protocol paid fixed\\n\\tfunction closeReceiveFixedSwapInternal(\\n\\t\\tuint swapDuration,\\n\\t\\tExp memory benchmarkIndexRatio,\\n\\t\\tExp memory swapFixedRate,\\n\\t\\tuint notionalAmount,\\n\\t\\tCTokenAmount memory userCollateral,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) internal returns (CTokenAmount memory userPayout) {\\n\\t\\tuint notionalPayingFixedNew = _subToZero(notionalPayingFixed, notionalAmount);\\n\\t\\tuint notionalReceivingFloatNew = _subToZero(notionalReceivingFloat, _mul(notionalAmount, benchmarkIndexRatio));\\n\\n\\t\\t/* avgFixedRatePaying = avgFixedRatePaying * notionalPayingFixed - swapFixedRate * notionalAmount / notionalReceivingFixedNew */\\n\\t\\tExp memory avgFixedRatePayingNew;\\n\\t\\tif (notionalPayingFixedNew == 0) {\\n\\t\\t\\tavgFixedRatePayingNew = _toExp(0);\\n\\t\\t} else {\\n\\t\\t\\tExp memory numerator = _subToZero(_mul(avgFixedRatePaying, notionalPayingFixed), _mul(swapFixedRate, notionalAmount));\\n\\t\\t\\tavgFixedRatePayingNew = _div(numerator, notionalReceivingFloatNew);\\n\\t\\t}\\n\\n\\t\\t/* The protocol reserved enough collateral for this swap for SWAP_MIN_DURATION, but its has been longer.\\n\\t\\t * We have decreased lockedCollateral in `accrue` for the late blocks, meaning we decreased it by more than the \\\"open\\\" tx added to it in the first place.\\n\\t\\t */\\n\\t\\tint parBlocksPayingFixedNew = _add(parBlocksPayingFixed, _mul(notionalAmount, _sub(swapDuration, SWAP_MIN_DURATION)));\\n\\n\\t\\tCTokenAmount memory fixedLeg = toCTokens(_mul(_mul(notionalAmount, swapDuration), swapFixedRate), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory floatLeg = toCTokens(_mul(notionalAmount, _sub(benchmarkIndexRatio, ONE_EXP)), cTokenExchangeRate);\\n\\t\\tuserPayout = _subToZero(_add(userCollateral, fixedLeg), floatLeg);\\n\\n\\t\\tnotionalPayingFixed = notionalPayingFixedNew;\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\t\\tavgFixedRatePaying = avgFixedRatePayingNew;\\n\\n\\t\\treturn userPayout;\\n\\t}\\n\\n\\t/* @dev Called internally at the beginning of external swap and liquidity provider functions.\\n\\t * WRITES TO STORAGE\\n\\t * Accounts for interest rate payments and adjust collateral requirements with the passage of time.\\n\\t * @return lockedCollateralNew : The amount of collateral the protocol needs to keep locked.\\n\\t */\\n\\tfunction accrue(Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory) {\\n\\t\\trequire(getBlockNumber() >= lastAccrualBlock, \\\"Block number decreasing\\\");\\n\\t\\tuint accruedBlocks = getBlockNumber() - lastAccrualBlock;\\n\\t\\t(CTokenAmount memory lockedCollateralNew, int parBlocksReceivingFixedNew, int parBlocksPayingFixedNew) = getLockedCollateral(accruedBlocks, cTokenExchangeRate);\\n\\n\\t\\tif (accruedBlocks == 0) {\\n\\t\\t\\treturn lockedCollateralNew;\\n\\t\\t}\\n\\n\\t\\tExp memory benchmarkIndexNew = getBenchmarkIndex();\\n\\t\\tExp memory benchmarkIndexRatio = _div(benchmarkIndexNew, benchmarkIndexStored);\\n\\t\\tExp memory floatRate = _sub(benchmarkIndexRatio, ONE_EXP);\\n\\n\\t\\tCTokenAmount memory supplierLiquidityNew = getSupplierLiquidity(accruedBlocks, floatRate, cTokenExchangeRate);\\n\\n\\t\\t// supplyIndex *= supplierLiquidityNew / supplierLiquidity\\n\\t\\tuint supplyIndexNew = supplyIndex;\\n\\t\\tif (supplierLiquidityNew.val != 0) {\\n\\t\\t\\tsupplyIndexNew = _div(_mul(supplyIndex, supplierLiquidityNew), supplierLiquidity);\\n\\t\\t}\\n\\n\\t\\tuint notionalPayingFloatNew = _mul(notionalPayingFloat, benchmarkIndexRatio);\\n\\t\\tuint notionalReceivingFloatNew = _mul(notionalReceivingFloat, benchmarkIndexRatio);\\n\\n\\t\\t/** Apply Effects **/\\n\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\n\\t\\tsupplierLiquidity = supplierLiquidityNew;\\n\\t\\tsupplyIndex = supplyIndexNew;\\n\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\n\\t\\tbenchmarkIndexStored = benchmarkIndexNew;\\n\\t\\tlastAccrualBlock = getBlockNumber();\\n\\n\\t\\temit Accrue(supplierLiquidityNew.val, lockedCollateralNew.val);\\n\\t\\treturn lockedCollateralNew;\\n\\t}\\n\\n\\tfunction transferIn(address from, CTokenAmount memory cTokenAmount) internal {\\n\\t\\trequire(cToken.transferFrom(from, address(this), cTokenAmount.val) == true, \\\"Transfer In Failed\\\");\\n\\t}\\n\\n\\tfunction transferOut(address to, CTokenAmount memory cTokenAmount) internal {\\n\\t\\tif (cTokenAmount.val > 0) {\\n\\t\\t\\trequire(cToken.transfer(to, cTokenAmount.val), \\\"Transfer Out failed\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t// ** PUBLIC PURE HELPERS ** //\\n\\n\\tfunction toCTokens(uint amount, Exp memory cTokenExchangeRate) public pure returns (CTokenAmount memory) {\\n\\t\\tuint cTokenAmount = _div(amount, cTokenExchangeRate);\\n\\t\\treturn CTokenAmount({val: cTokenAmount});\\n\\t}\\n\\n\\tfunction toUnderlying(CTokenAmount memory amount, Exp memory cTokenExchangeRate) public pure returns (uint) {\\n\\t\\treturn _mul(amount.val, cTokenExchangeRate);\\n\\t}\\n\\n\\t// *** PUBLIC VIEW GETTERS *** //\\n\\n\\t// @dev Calculate protocol locked collateral and parBlocks, which is a measure of the fixed rate credit/debt.\\n\\t// * Uses int to keep negatives, for correct late blocks calc when a single swap is outstanding\\n\\tfunction getLockedCollateral(uint accruedBlocks, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory lockedCollateral, int parBlocksReceivingFixedNew, int parBlocksPayingFixedNew) {\\n\\t\\tparBlocksReceivingFixedNew = _sub(parBlocksReceivingFixed, _mul(accruedBlocks, notionalReceivingFixed));\\n\\t\\tparBlocksPayingFixedNew = _sub(parBlocksPayingFixed, _mul(accruedBlocks, notionalPayingFixed));\\n\\n\\t\\t// Par blocks can be negative during the first or last ever swap, so floor them to 0\\n\\t\\tuint minFloatToReceive = _mul(_toUint(parBlocksPayingFixedNew), minFloatRate);\\n\\t\\tuint maxFloatToPay = _mul(_toUint(parBlocksReceivingFixedNew), maxFloatRate);\\n\\n\\t\\tuint fixedToReceive = _mul(_toUint(parBlocksReceivingFixedNew), avgFixedRateReceiving);\\n\\t\\tuint fixedToPay = _mul(_toUint(parBlocksPayingFixedNew), avgFixedRatePaying);\\n\\n\\t\\tuint minCredit = _add(fixedToReceive, minFloatToReceive);\\n\\t\\tuint maxDebt = _add(fixedToPay, maxFloatToPay);\\n\\n\\t\\tif (maxDebt > minCredit) {\\n\\t\\t\\tlockedCollateral = toCTokens(_sub(maxDebt, minCredit), cTokenExchangeRate);\\n\\t\\t} else {\\n\\t\\t\\tlockedCollateral = CTokenAmount({val:0});\\n\\t\\t}\\n\\t}\\n\\n\\t/* @dev Calculate protocol P/L by adding the cashflows since last accrual.\\n\\t * \\t\\tsupplierLiquidity += fixedReceived + floatReceived - fixedPaid - floatPaid\\n\\t */\\n\\tfunction getSupplierLiquidity(uint accruedBlocks, Exp memory floatRate, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory supplierLiquidityNew) {\\n\\t\\tuint floatPaid = _mul(notionalPayingFloat, floatRate);\\n\\t\\tuint floatReceived = _mul(notionalReceivingFloat, floatRate);\\n\\t\\tuint fixedPaid = _mul(accruedBlocks, _mul(notionalPayingFixed, avgFixedRatePaying));\\n\\t\\tuint fixedReceived = _mul(accruedBlocks, _mul(notionalReceivingFixed, avgFixedRateReceiving));\\n\\n\\t\\tCTokenAmount memory rec = toCTokens(_add(fixedReceived, floatReceived), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory paid = toCTokens(_add(fixedPaid, floatPaid), cTokenExchangeRate);\\n\\t\\tsupplierLiquidityNew = _subToZero(_add(supplierLiquidity, rec), paid);\\n\\t}\\n\\n\\t// @dev Get the rate for incoming swaps\\n\\tfunction getSwapRate(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tCTokenAmount memory lockedCollateral,\\n\\t\\tCTokenAmount memory supplierLiquidity_,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) public view returns (Exp memory, int) {\\n\\t\\t(uint ratePerBlockMantissa, int rateFactorNew) = interestRateModel.getSwapRate(\\n\\t\\t\\trateFactor,\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\torderNotional,\\n\\t\\t\\ttoUnderlying(lockedCollateral, cTokenExchangeRate),\\n\\t\\t\\ttoUnderlying(supplierLiquidity_, cTokenExchangeRate)\\n\\t\\t);\\n\\t\\treturn (_toExp(ratePerBlockMantissa), rateFactorNew);\\n\\t}\\n\\n\\t// @dev The amount that must be locked up for the payFixed leg of a swap paying fixed. Used to calculate both the protocol and user's collateral.\\n\\t// = notionalAmount * SWAP_MIN_DURATION * (swapFixedRate - minFloatRate)\\n\\tfunction getPayFixedInitCollateral(Exp memory fixedRate, uint notionalAmount, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory) {\\n\\t\\tExp memory rateDelta = _sub(fixedRate, minFloatRate);\\n\\t\\tuint amt = _mul(_mul(SWAP_MIN_DURATION, notionalAmount), rateDelta);\\n\\t\\treturn toCTokens(amt, cTokenExchangeRate);\\n\\t}\\n\\n\\t// @dev The amount that must be locked up for the receiveFixed leg of a swap receiving fixed. Used to calculate both the protocol and user's collateral.\\n\\t// = notionalAmount * SWAP_MIN_DURATION * (maxFloatRate - swapFixedRate)\\n\\tfunction getReceiveFixedInitCollateral(Exp memory fixedRate, uint notionalAmount, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory) {\\n\\t\\tExp memory rateDelta = _sub(maxFloatRate, fixedRate);\\n\\t\\tuint amt = _mul(_mul(SWAP_MIN_DURATION, notionalAmount), rateDelta);\\n\\t\\treturn toCTokens(amt, cTokenExchangeRate);\\n\\t}\\n\\n\\t// @dev Interpolates to get the current borrow index from a compound CToken (or some other similar interface)\\n\\tfunction getBenchmarkIndex() public view returns (Exp memory) {\\n\\t\\tExp memory borrowIndex = _toExp(cToken.borrowIndex());\\n\\t\\trequire(borrowIndex.mantissa != 0, \\\"Benchmark index is zero\\\");\\n\\t\\tuint accrualBlockNumber = cToken.accrualBlockNumber();\\n\\t\\trequire(getBlockNumber() >= accrualBlockNumber, \\\"Bn decreasing\\\");\\n\\t\\tuint blockDelta = _sub(getBlockNumber(), accrualBlockNumber);\\n\\n\\t\\tif (blockDelta == 0) {\\n\\t\\t\\treturn borrowIndex;\\n\\t\\t} else {\\n\\t\\t\\tExp memory borrowRateMantissa = _toExp(cToken.borrowRatePerBlock());\\n\\t\\t\\tExp memory simpleInterestFactor = _mul(borrowRateMantissa, blockDelta);\\n\\t\\t\\treturn _mul(borrowIndex, _add(simpleInterestFactor, ONE_EXP));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getExchangeRate() public view returns (Exp memory) {\\n\\t\\treturn _toExp(cToken.exchangeRateStored());\\n\\t}\\n\\n\\tfunction getBlockNumber() public view virtual returns (uint) {\\n\\t\\treturn block.number;\\n\\t}\\n\\n\\t/** ADMIN FUNCTIONS **/\\n\\n\\tfunction _setInterestRateModel(InterestRateModelInterface newModel) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set interest rate model\\\");\\n\\t\\trequire(newModel != interestRateModel, \\\"Resetting to same model\\\");\\n\\t\\temit SetInterestRateModel(address(newModel), address(interestRateModel));\\n\\t\\tinterestRateModel = newModel;\\n\\t}\\n\\n\\tfunction _setCollateralRequirements(uint minFloatRateMantissa_, uint maxFloatRateMantissa_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set collateral requirements\\\");\\n\\t\\trequire(minFloatRateMantissa_ < maxFloatRateMantissa_, \\\"Min float rate must be below max float rate\\\");\\n\\n\\t\\temit SetCollateralRequirements(minFloatRateMantissa_, maxFloatRateMantissa_);\\n\\t\\tminFloatRate = _toExp(minFloatRateMantissa_);\\n\\t\\tmaxFloatRate = _toExp(maxFloatRateMantissa_);\\n\\t}\\n\\n\\tfunction _setLiquidityLimit(uint limit_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set liqiudity limit\\\");\\n\\t\\temit SetLiquidityLimit(limit_);\\n\\t\\tliquidityLimit = CTokenAmount({val: limit_});\\n\\t}\\n\\n\\tfunction _pause(bool isPaused_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to pause\\\");\\n\\t\\trequire(isPaused_ != isPaused, \\\"Must change isPaused\\\");\\n\\t\\temit SetPause(isPaused_);\\n\\t\\tisPaused = isPaused_;\\n\\t}\\n\\n\\tfunction _transferComp(address dest, uint amount) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to transfer comp\\\");\\n\\t\\temit CompTransferred(dest, amount);\\n\\t\\tcomp.transfer(dest, amount);\\n\\t}\\n\\n\\tfunction _delegateComp(address delegatee) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to delegate comp\\\");\\n\\t\\temit CompDelegated(delegatee);\\n\\t\\tcomp.delegate(delegatee);\\n\\t}\\n\\n\\tfunction _changeAdmin(address admin_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to change admin\\\");\\n\\t\\temit AdminChanged(admin, admin_);\\n\\t\\tadmin = admin_;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xba5537c4bfd0b58acb50c9619c3eb173343af4d88ebe599094a2860ed6796aaa\"},\"contracts/RhoInterfaces.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\ninterface InterestRateModelInterface {\\n\\tfunction getSwapRate(\\n\\t\\tint rateFactorPrev,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tuint lockedCollateralUnderlying,\\n\\t\\tuint supplierLiquidityUnderlying\\n\\t) external view returns (uint rate, int rateFactorNew);\\n}\\n\\ninterface ERC20Interface {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function balanceOf(address who) external returns (uint);\\n}\\n\\ninterface CompInterface is ERC20Interface{\\n\\tfunction delegate(address delegatee) external;\\n}\\n\\ninterface CTokenInterface is ERC20Interface {\\n\\tfunction borrowIndex() external view returns (uint);\\n\\tfunction accrualBlockNumber() external view returns(uint);\\n\\tfunction borrowRatePerBlock() external view returns(uint);\\n\\tfunction exchangeRateStored() external view returns (uint);\\n}\\n\\nabstract contract RhoInterface is Types {\\n\\tfunction supply(uint cTokenSupplyAmount) external virtual;\\n\\tfunction remove(uint removeCTokenAmount) external virtual;\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) external virtual;\\n\\n\\tevent Supply(address indexed supplier, uint cTokenSupplyAmount, uint newSupplyAmount);\\n\\tevent Remove(address indexed supplier, uint removeCTokenAmount, uint newSupplyValue);\\n\\tevent OpenSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress indexed owner\\n\\t);\\n\\tevent CloseSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\taddress indexed owner,\\n\\t\\tuint userPayout,\\n\\t\\tuint penalty,\\n\\t\\tuint benchmarkIndexFinal\\n\\t);\\n\\tevent Accrue(uint supplierLiquidityNew, uint lockedCollateralNew);\\n\\tevent SetInterestRateModel(address newModel, address oldModel);\\n\\tevent SetPause(bool isPaused);\\n\\tevent AdminRenounced();\\n\\tevent CompTransferred(address dest, uint amount);\\n\\tevent CompDelegated(address delegatee);\\n\\tevent SetCollateralRequirements(uint minFloatRateMantissa, uint maxFloatRateMantissa);\\n\\tevent AdminChanged(address oldAdmin, address newAdmin);\\n\\tevent SetLiquidityLimit(uint limit);\\n\\n\\tInterestRateModelInterface public interestRateModel;\\n\\n\\tuint public lastAccrualBlock;\\n\\tExp public benchmarkIndexStored;\\n\\n\\t/* Notional size of each leg, one adjusting for compounding and one static */\\n\\tuint public notionalReceivingFixed;\\n\\tuint public notionalPayingFloat;\\n\\n\\tuint public notionalPayingFixed;\\n\\tuint public notionalReceivingFloat;\\n\\n\\t/* Measure of outstanding swap obligations. 1 Unit = 1e18 notional * 1 block. Used to calculate collateral requirements */\\n\\tint public parBlocksReceivingFixed;\\n\\tint public parBlocksPayingFixed;\\n\\n\\t/* Per block fixed / float interest rates used in collateral calculations */\\n\\tExp public avgFixedRateReceiving;\\n\\tExp public avgFixedRatePaying;\\n\\n\\t/* Per block float rate bounds used in collateral calculations */\\n\\tExp public maxFloatRate;\\n\\tExp public minFloatRate;\\n\\n\\t/* Protocol PnL */\\n\\tuint public supplyIndex;\\n\\tCTokenAmount public supplierLiquidity;\\n\\n\\tint public rateFactor;// for interest rate model\\n\\n\\taddress public admin;\\n\\n\\t/* Pausing safety functions that can pause open and supply functions */\\n\\tbool public isPaused;\\n\\tCTokenAmount public liquidityLimit;\\n\\n\\tmapping(address => SupplyAccount) public supplyAccounts;\\n\\tmapping(bytes32 => bool) public swaps;\\n\\n\\tstruct SupplyAccount {\\n\\t\\tCTokenAmount amount;\\n\\t\\tuint lastBlock;\\n\\t\\tuint index;\\n\\t}\\n\\n\\tstruct Swap {\\n\\t\\tbool userPayingFixed;\\n\\t\\tuint notionalAmount;\\n\\t\\tuint swapFixedRateMantissa;\\n\\t\\tuint benchmarkIndexInit;\\n\\t\\tuint userCollateralCTokens;\\n\\t\\tuint initBlock;\\n\\t\\taddress owner;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xb5de435fab04d6ea7331a179997e5df99991e12b1eb651b48f66163aff0e44b5\"},\"contracts/Types.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\ncontract Types {\\n\\n    /*@dev A type to store amounts of cTokens, to make sure they are not confused with amounts of the underlying */\\n    struct CTokenAmount {\\n        uint val;\\n    }\\n\\n    /* @dev A type to store numbers scaled up by 18 decimals*/\\n    struct Exp {\\n        uint mantissa;\\n    }\\n}\\n\",\"keccak256\":\"0x3420c97975694664fba3d84ac78149b669b452a2ac4aee8bab41e02407a494d5\"},\"contracts/test/FaucetToken.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./StandardToken.sol\\\";\\n\\ncontract FaucetToken is StandardToken {\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\\n        totalSupply_ = _initialAmount;\\n        balances[msg.sender] = _initialAmount;\\n        name = _tokenName;\\n        symbol = _tokenSymbol;\\n        decimals = _decimalUnits;\\n    }\\n\\n    function allocateTo(address _owner, uint256 value) public {\\n        balances[_owner] += value;\\n        totalSupply_ += value;\\n        emit Transfer(address(this), _owner, value);\\n    }\\n}\\n\",\"keccak256\":\"0xf4ea18824410d4a0b355ab4a738ca788384aea817c38bef9610353d277aa1804\"},\"contracts/test/MockCToken.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport \\\"../Rho.sol\\\";\\nimport \\\"./FaucetToken.sol\\\";\\n\\ninterface MockCTokenInterface {\\n\\tfunction borrowIndex() external view returns (uint);\\n\\tfunction accrualBlockNumber() external view returns(uint);\\n\\tfunction borrowRatePerBlock() external view returns(uint);\\n\\tfunction exchangeRateStored() external view returns (uint);\\n}\\n\\ncontract MockCToken is FaucetToken, MockCTokenInterface {\\n\\n\\tuint public override borrowIndex = 1e18;\\n\\tuint public override accrualBlockNumber = 100;\\n\\tuint public override borrowRatePerBlock;\\n\\n\\tuint public exchangeRate;\\n\\n\\tconstructor(\\n\\t\\tuint _initialExchangeRate,\\n\\t\\tuint _borrowRatePerBlockMantissa,\\n\\t\\tuint256 _initialAmount,\\n\\t\\tstring memory _tokenName,\\n\\t\\tuint8 _decimalUnits,\\n\\t\\tstring memory _tokenSymbol\\n\\t)\\n\\t\\tpublic FaucetToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol)\\n\\t{\\n\\t\\tborrowRatePerBlock = _borrowRatePerBlockMantissa;\\n\\t\\texchangeRate = _initialExchangeRate * 1e18;\\n\\t}\\n\\n\\tfunction setBorrowIndex(uint borrowIndex_) public {\\n\\t\\tborrowIndex = borrowIndex_;\\n\\t}\\n\\n\\tfunction setAccrualBlockNumber(uint bn) public {\\n\\t\\taccrualBlockNumber = bn;\\n\\t}\\n\\n\\tfunction advanceBlocks(uint blocks) public {\\n\\t\\taccrualBlockNumber += blocks;\\n\\t}\\n\\n\\tfunction exchangeRateStored() public override view returns (uint) {\\n\\t\\treturn exchangeRate;\\n\\t}\\n}\\n\",\"keccak256\":\"0x88c3eef595aa41fae9580333ff8d9d80243897a5c5ec40ef0e73af1b0022b279\"},\"contracts/test/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xabba6407e3cc0e14aa98d71eac7c59513b9b68b4ac734293ac2dbab9d5cb3dfb\"},\"contracts/test/StandardToken.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n    function totalSupply() public view virtual returns (uint256);\\n    function balanceOf(address who) public view virtual returns (uint256);\\n    function transfer(address to, uint256 value) public virtual returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) balances;\\n\\n    uint256 totalSupply_;\\n\\n    /**\\n    * @dev Total number of tokens in existence\\n    */\\n    function totalSupply() public view override returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint256 _value) public override returns (bool) {\\n        require(_to != address(0));\\n        require(_value <= balances[msg.sender], \\\"Transfer: insufficient balance\\\");\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint256 representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public view virtual returns (uint256);\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n    function approve(address spender, uint256 value) public virtual returns (bool);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n    mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param _from address The address which you want to send tokens from\\n     * @param _to address The address which you want to transfer to\\n     * @param _value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"TransferFrom: Can't send to address zero\\\");\\n        require(_value <= balances[_from], \\\"TransferFrom: Inadequate balance\\\");\\n        require(_value <= allowed[_from][msg.sender], \\\"TransferFrom: Inadequate allowance\\\");\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value) public override returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param _owner address The address which owns the funds.\\n     * @param _spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(\\n        address _owner,\\n        address _spender\\n     )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To increment\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseApproval(\\n        address _spender,\\n        uint256 _addedValue\\n    )\\n        public\\n        returns (bool)\\n    {\\n        allowed[msg.sender][_spender] = (\\n            allowed[msg.sender][_spender].add(_addedValue));\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To decrement\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseApproval(\\n        address _spender,\\n        uint256 _subtractedValue\\n    )\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = allowed[msg.sender][_spender];\\n        if (_subtractedValue > oldValue) {\\n            allowed[msg.sender][_spender] = 0;\\n        } else {\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x33a81ce8e70f59fe7a0d01872dc70e6c46fe7b90dd983c960f074ee907feb93e\"}},\"version\":1}"},"contracts/test/MockInterestRateModel.sol:MockInterestRateModel":{"abi":"[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"rateFactorPrev\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"orderNotional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedCollateralUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplierLiquidityUnderlying\",\"type\":\"uint256\"}],\"name\":\"getSwapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rateFactorNew\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mockRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"60806040526402540be40060005534801561001957600080fd5b50610112806100296000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806327fc002414604157806334fcf43714608e578063e8f9438f1460aa575b600080fd5b6075600480360360a0811015605557600080fd5b5080359060208101351515906040810135906060810135906080013560c2565b6040805192835260208301919091528051918290030190f35b60a86004803603602081101560a257600080fd5b503560d1565b005b60b060d6565b60408051918252519081900360200190f35b60005460019550959350505050565b600055565b6000548156fea2646970667358221220b801822effad423d66d8063346990089f6f497aba209ef1849ccea8b4111bc5964736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"rateFactorPrev\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"orderNotional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedCollateralUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplierLiquidityUnderlying\",\"type\":\"uint256\"}],\"name\":\"getSwapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rateFactorNew\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mockRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockInterestRateModel.sol\":\"MockInterestRateModel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport {InterestRateModelInterface} from \\\"./RhoInterfaces.sol\\\";\\n\\ncontract InterestRateModel is InterestRateModelInterface {\\n\\n\\tuint public immutable yOffset;\\n\\tuint public immutable slopeFactor;\\n\\tuint public immutable rateFactorSensitivity;\\n\\tuint public immutable range;\\n\\tuint public immutable feeBase;\\n\\tuint public immutable feeSensitivity;\\n\\n\\tconstructor(\\n\\t\\tuint yOffset_,\\n\\t\\tuint slopeFactor_,\\n\\t\\tuint rateFactorSensitivity_,\\n\\t\\tuint feeBase_,\\n\\t\\tuint feeSensitivity_,\\n\\t\\tuint range_\\n\\t) public {\\n\\t\\trequire(slopeFactor_ > 0 && rateFactorSensitivity_ > 0 && range_ > 0 , \\\"Zero params not allowed\\\");\\n\\n\\t\\tyOffset = yOffset_;\\n\\t\\tslopeFactor = slopeFactor_;\\n\\t\\trateFactorSensitivity = rateFactorSensitivity_;\\n\\t\\tfeeBase = feeBase_;\\n\\t\\tfeeSensitivity = feeSensitivity_;\\n\\t\\trange = range_;\\n\\t}\\n\\n\\t/* @dev Calculates the per-block interest rate to offer an incoming swap based on the rateFactor stored in Rho.sol.\\n\\t * @param userPayingFixed : If the user is paying fixed in incoming swap\\n\\t * @param orderNotional : Notional order size of the incoming swap\\n\\t * @param lockedCollateralUnderlying : The amount of the protocol's liquidity that is locked at the time of the swap in underlying tokens\\n\\t * @param supplierLiquidityUnderlying : Total amount of the protocol's liquidity in underlying tokens\\n\\t */\\n\\tfunction getSwapRate(\\n\\t\\tint rateFactorPrev,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tuint lockedCollateralUnderlying,\\n\\t\\tuint supplierLiquidityUnderlying\\n\\t) external override view returns (uint rate, int rateFactorNew) {\\n\\t\\trequire(supplierLiquidityUnderlying != 0, \\\"supplied liquidity 0\\\");\\n\\t\\tuint rfDelta = div(mul(rateFactorSensitivity, orderNotional), supplierLiquidityUnderlying);\\n\\t\\trateFactorNew = userPayingFixed ? add(rateFactorPrev, rfDelta) : sub(rateFactorPrev, rfDelta);\\n\\n\\t\\tint num = mul(rateFactorNew, range);\\n\\t\\tuint denom = sqrt(add(square(rateFactorNew), slopeFactor));\\n\\n\\t\\tuint baseRate = toZero(add(div(num, denom), yOffset)); // can not be negative\\n\\t\\tuint fee = getFee(lockedCollateralUnderlying, supplierLiquidityUnderlying);\\n\\n\\t\\t// base + yOffset +- fee\\n\\t\\tif (userPayingFixed) {\\n\\t\\t\\trate = add(baseRate, fee);\\n\\t\\t} else {\\n\\t\\t\\tif (baseRate > fee) {\\n\\t\\t\\t\\trate = sub(baseRate, fee);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trate = 0;\\n\\t\\t\\t\\t// if the rate is negative, don't push rate factor even lower\\n\\t\\t\\t\\trateFactorNew = rateFactorPrev;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// @dev Calculates the fee to add to the rate. fee = feeBase + feeSensitivity * locked / total\\n\\tfunction getFee(uint lockedCollateralUnderlying, uint supplierLiquidityUnderlying) public view returns (uint) {\\n\\t\\treturn add(feeBase, div(mul(feeSensitivity, lockedCollateralUnderlying), supplierLiquidityUnderlying));\\n\\t}\\n\\n    // ** Interest Rate Model Math Library **//\\n\\n    // Source: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/libraries/Math.sol\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n\\t// ** UINT SAFE MATH ** //\\n\\t// Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\n\\n\\tfunction mul(uint a, uint b) internal pure returns (uint) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: Multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        require(b > 0, \\\"SafeMath: Divide by zero\\\");\\n        uint c = a / b;\\n        return c;\\n    }\\n\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint a, uint b) pure internal returns (uint) {\\n        require(b <= a, \\\"subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n   \\t// ** INT SAFE MATH ** //\\n   \\t// Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SignedSafeMath.sol\\n\\tint constant private _INT_MIN = -2**255;\\n\\n    function div(int a, int b) internal pure returns (int) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int c = a / b;\\n\\n        return c;\\n    }\\n\\n    function mul(int a, int b) internal pure returns (int) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function add(int a, int b) internal pure returns (int) {\\n        int c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n   \\t// ** INT => UINT MATH ** //\\n\\n   \\t// Set negative ints to 0\\n    function toZero(int x) internal pure returns (uint) {\\n\\t\\treturn x > 0 ? uint(x) : 0;\\n\\t}\\n\\n\\tfunction square(int a) internal pure returns (uint) {\\n\\t\\treturn uint(mul(a, a));\\n\\t}\\n\\n\\t// ** UINT => INT MATH ** //\\n\\n\\tint constant private _INT_MAX = 2**255 - 1;\\n\\n    function add(int a, uint b) internal pure returns (int){\\n        require(b < uint(_INT_MAX), \\\"SafeMath: Int addition overflow detected\\\");\\n        return add(a, int(b));\\n    }\\n\\n\\tfunction mul(int a, uint b) internal pure returns (int) {\\n        require(b < uint(_INT_MAX), \\\"SafeMath: Int multiplication overflow detected\\\");\\n        return mul(a, int(b));\\n\\t}\\n\\n    function sub(int a, uint b) internal pure returns (int){\\n        require(b < uint(_INT_MAX), \\\"SafeMath: Int subtraction overflow detected\\\");\\n        return sub(a, int(b));\\n    }\\n\\n\\tfunction div(int a, uint b) internal pure returns (int) {\\n        require(b < uint(_INT_MAX), \\\"SafeMath: Int division overflow detected\\\");\\n        return div(a, int(b));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x3687e4d83502a5bb22609a621c023285c7a88fbde0317c3d2ad619352f013b09\"},\"contracts/RhoInterfaces.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\ninterface InterestRateModelInterface {\\n\\tfunction getSwapRate(\\n\\t\\tint rateFactorPrev,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tuint lockedCollateralUnderlying,\\n\\t\\tuint supplierLiquidityUnderlying\\n\\t) external view returns (uint rate, int rateFactorNew);\\n}\\n\\ninterface ERC20Interface {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function balanceOf(address who) external returns (uint);\\n}\\n\\ninterface CompInterface is ERC20Interface{\\n\\tfunction delegate(address delegatee) external;\\n}\\n\\ninterface CTokenInterface is ERC20Interface {\\n\\tfunction borrowIndex() external view returns (uint);\\n\\tfunction accrualBlockNumber() external view returns(uint);\\n\\tfunction borrowRatePerBlock() external view returns(uint);\\n\\tfunction exchangeRateStored() external view returns (uint);\\n}\\n\\nabstract contract RhoInterface is Types {\\n\\tfunction supply(uint cTokenSupplyAmount) external virtual;\\n\\tfunction remove(uint removeCTokenAmount) external virtual;\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) external virtual;\\n\\n\\tevent Supply(address indexed supplier, uint cTokenSupplyAmount, uint newSupplyAmount);\\n\\tevent Remove(address indexed supplier, uint removeCTokenAmount, uint newSupplyValue);\\n\\tevent OpenSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress indexed owner\\n\\t);\\n\\tevent CloseSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\taddress indexed owner,\\n\\t\\tuint userPayout,\\n\\t\\tuint penalty,\\n\\t\\tuint benchmarkIndexFinal\\n\\t);\\n\\tevent Accrue(uint supplierLiquidityNew, uint lockedCollateralNew);\\n\\tevent SetInterestRateModel(address newModel, address oldModel);\\n\\tevent SetPause(bool isPaused);\\n\\tevent AdminRenounced();\\n\\tevent CompTransferred(address dest, uint amount);\\n\\tevent CompDelegated(address delegatee);\\n\\tevent SetCollateralRequirements(uint minFloatRateMantissa, uint maxFloatRateMantissa);\\n\\tevent AdminChanged(address oldAdmin, address newAdmin);\\n\\tevent SetLiquidityLimit(uint limit);\\n\\n\\tInterestRateModelInterface public interestRateModel;\\n\\n\\tuint public lastAccrualBlock;\\n\\tExp public benchmarkIndexStored;\\n\\n\\t/* Notional size of each leg, one adjusting for compounding and one static */\\n\\tuint public notionalReceivingFixed;\\n\\tuint public notionalPayingFloat;\\n\\n\\tuint public notionalPayingFixed;\\n\\tuint public notionalReceivingFloat;\\n\\n\\t/* Measure of outstanding swap obligations. 1 Unit = 1e18 notional * 1 block. Used to calculate collateral requirements */\\n\\tint public parBlocksReceivingFixed;\\n\\tint public parBlocksPayingFixed;\\n\\n\\t/* Per block fixed / float interest rates used in collateral calculations */\\n\\tExp public avgFixedRateReceiving;\\n\\tExp public avgFixedRatePaying;\\n\\n\\t/* Per block float rate bounds used in collateral calculations */\\n\\tExp public maxFloatRate;\\n\\tExp public minFloatRate;\\n\\n\\t/* Protocol PnL */\\n\\tuint public supplyIndex;\\n\\tCTokenAmount public supplierLiquidity;\\n\\n\\tint public rateFactor;// for interest rate model\\n\\n\\taddress public admin;\\n\\n\\t/* Pausing safety functions that can pause open and supply functions */\\n\\tbool public isPaused;\\n\\tCTokenAmount public liquidityLimit;\\n\\n\\tmapping(address => SupplyAccount) public supplyAccounts;\\n\\tmapping(bytes32 => bool) public swaps;\\n\\n\\tstruct SupplyAccount {\\n\\t\\tCTokenAmount amount;\\n\\t\\tuint lastBlock;\\n\\t\\tuint index;\\n\\t}\\n\\n\\tstruct Swap {\\n\\t\\tbool userPayingFixed;\\n\\t\\tuint notionalAmount;\\n\\t\\tuint swapFixedRateMantissa;\\n\\t\\tuint benchmarkIndexInit;\\n\\t\\tuint userCollateralCTokens;\\n\\t\\tuint initBlock;\\n\\t\\taddress owner;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xb5de435fab04d6ea7331a179997e5df99991e12b1eb651b48f66163aff0e44b5\"},\"contracts/Types.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\ncontract Types {\\n\\n    /*@dev A type to store amounts of cTokens, to make sure they are not confused with amounts of the underlying */\\n    struct CTokenAmount {\\n        uint val;\\n    }\\n\\n    /* @dev A type to store numbers scaled up by 18 decimals*/\\n    struct Exp {\\n        uint mantissa;\\n    }\\n}\\n\",\"keccak256\":\"0x3420c97975694664fba3d84ac78149b669b452a2ac4aee8bab41e02407a494d5\"},\"contracts/test/MockInterestRateModel.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport \\\"../InterestRateModel.sol\\\";\\n\\ncontract MockInterestRateModel is InterestRateModelInterface {\\n\\tuint public mockRate = 1e10;\\n\\n\\tfunction setRate(uint rate_) public {\\n\\t\\tmockRate = rate_;\\n\\t}\\n\\n\\tfunction getSwapRate(int rateFactorPrev, bool userPayingFixed,  uint orderNotional, uint lockedCollateralUnderlying, uint supplierLiquidityUnderlying) external override view returns (uint rate, int rateFactorNew) {\\n\\t\\trateFactorPrev;\\n\\t\\tuserPayingFixed;\\n\\t\\torderNotional;\\n\\t\\tlockedCollateralUnderlying;\\n\\t\\tsupplierLiquidityUnderlying;\\n\\t\\treturn (mockRate, 1);\\n\\t}\\n}\\n\",\"keccak256\":\"0x51131fdad163db2b0b555d6a1408b64deffe3e57e2f94765dc962bbdfcd96a6c\"}},\"version\":1}"},"contracts/test/MockRho.sol:MockRho":{"abi":"[{\"inputs\":[{\"internalType\":\"contract InterestRateModelInterface\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"contract CTokenInterface\",\"name\":\"cToken_\",\"type\":\"address\"},{\"internalType\":\"contract CompInterface\",\"name\":\"comp_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFloatRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFloatRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapMinDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyMinDuration_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityLimitCTokens_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplierLiquidityNew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateralNew\",\"type\":\"uint256\"}],\"name\":\"Accrue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benchmarkIndexFinal\",\"type\":\"uint256\"}],\"name\":\"CloseSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"CompDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benchmarkIndexInit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFixedRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userCollateralCTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OpenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeCTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyValue\",\"type\":\"uint256\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFloatRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFloatRateMantissa\",\"type\":\"uint256\"}],\"name\":\"SetCollateralRequirements\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldModel\",\"type\":\"address\"}],\"name\":\"SetInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetLiquidityLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"SetPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cTokenSupplyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyAmount\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOSE_GRACE_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLOSE_PENALTY_PER_BLOCK_MANTISSA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SWAP_NOTIONAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPPLY_MIN_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_MIN_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"_changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"_delegateComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused_\",\"type\":\"bool\"}],\"name\":\"_pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minFloatRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFloatRateMantissa_\",\"type\":\"uint256\"}],\"name\":\"_setCollateralRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InterestRateModelInterface\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"_setLiquidityLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_transferComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"advanceBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"advanceBlocksProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgFixedRatePaying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgFixedRateReceiving\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"benchmarkIndexStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"contract CTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"benchmarkIndexInit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFixedRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollateralCTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"contract CompInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBenchmarkIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accruedBlocks\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getLockedCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"lockedCollateral\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"parBlocksReceivingFixedNew\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"parBlocksPayingFixedNew\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"fixedRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getPayFixedInitCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"fixedRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getReceiveFixedInitCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accruedBlocks\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"floatRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getSupplierLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"supplierLiquidityNew\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"orderNotional\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"lockedCollateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"supplierLiquidity_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getSwapRate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harnessAccrueInterest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"lockedCollateralNew\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModelInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAccrualBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFloatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFloatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalPayingFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalPayingFloat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalReceivingFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalReceivingFloat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumFixedRateMantissa\",\"type\":\"uint256\"}],\"name\":\"openPayFixedSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFixedRateMantissa\",\"type\":\"uint256\"}],\"name\":\"openReceiveFixedSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parBlocksPayingFixed\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parBlocksReceivingFixed\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateFactor\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"removeCTokenAmount\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber_\",\"type\":\"uint256\"}],\"name\":\"setBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplierLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cTokenSupplyAmount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"toCTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"toUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract InterestRateModelInterface\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"contract CTokenInterface\",\"name\":\"cToken_\",\"type\":\"address\"},{\"internalType\":\"contract CompInterface\",\"name\":\"comp_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFloatRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFloatRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapMinDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyMinDuration_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityLimitCTokens_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplierLiquidityNew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateralNew\",\"type\":\"uint256\"}],\"name\":\"Accrue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benchmarkIndexFinal\",\"type\":\"uint256\"}],\"name\":\"CloseSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"CompDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benchmarkIndexInit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFixedRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userCollateralCTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OpenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeCTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyValue\",\"type\":\"uint256\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFloatRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFloatRateMantissa\",\"type\":\"uint256\"}],\"name\":\"SetCollateralRequirements\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldModel\",\"type\":\"address\"}],\"name\":\"SetInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetLiquidityLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"SetPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cTokenSupplyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyAmount\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOSE_GRACE_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLOSE_PENALTY_PER_BLOCK_MANTISSA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SWAP_NOTIONAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPPLY_MIN_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_MIN_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"_changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"_delegateComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused_\",\"type\":\"bool\"}],\"name\":\"_pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minFloatRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFloatRateMantissa_\",\"type\":\"uint256\"}],\"name\":\"_setCollateralRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InterestRateModelInterface\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"_setLiquidityLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_transferComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"advanceBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"advanceBlocksProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgFixedRatePaying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgFixedRateReceiving\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"benchmarkIndexStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"contract CTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"benchmarkIndexInit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFixedRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollateralCTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"contract CompInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBenchmarkIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accruedBlocks\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getLockedCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"lockedCollateral\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"parBlocksReceivingFixedNew\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"parBlocksPayingFixedNew\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"fixedRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getPayFixedInitCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"fixedRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getReceiveFixedInitCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accruedBlocks\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"floatRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getSupplierLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"supplierLiquidityNew\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"userPayingFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"orderNotional\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"lockedCollateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"supplierLiquidity_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"getSwapRate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harnessAccrueInterest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"lockedCollateralNew\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModelInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAccrualBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFloatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFloatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalPayingFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalPayingFloat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalReceivingFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notionalReceivingFloat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumFixedRateMantissa\",\"type\":\"uint256\"}],\"name\":\"openPayFixedSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFixedRateMantissa\",\"type\":\"uint256\"}],\"name\":\"openReceiveFixedSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parBlocksPayingFixed\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parBlocksReceivingFixed\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateFactor\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"removeCTokenAmount\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber_\",\"type\":\"uint256\"}],\"name\":\"setBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplierLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cTokenSupplyAmount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"toCTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.CTokenAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.Exp\",\"name\":\"cTokenExchangeRate\",\"type\":\"tuple\"}],\"name\":\"toUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{\"_setInterestRateModel(address)\":{\"notice\":\"ADMIN FUNCTIONS *\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockRho.sol\":\"MockRho\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Math.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\n/* @dev A safe math lib for Rho data types. \\n   Note: always returns type of left side param */\\ncontract Math is Types {\\n\\n\\tuint constant EXP_SCALE = 1e18;\\n    Exp ONE_EXP = Exp({mantissa: EXP_SCALE});\\n\\n    function _toExp(uint num) pure internal returns (Exp memory) {\\n    \\treturn Exp({mantissa: num});\\n    }\\n\\n    function _toUint(int a) pure internal returns (uint) {\\n        return a > 0 ? uint(a) : 0;\\n    }\\n\\n    function _lt(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (bool) {\\n        return a.val < b.val;\\n    }\\n\\n    function _lte(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (bool) {\\n        return a.val <= b.val;\\n    }\\n\\n    function _add(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _add(a.mantissa, b.mantissa)});\\n    }\\n\\n    function _add(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _add(a.val, b.val)});\\n    }\\n\\n    function _add(uint a, uint b) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"addition overflow\\\");\\n        return c;\\n    }\\n\\n    function _sub(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _sub(a.mantissa, b.mantissa)});\\n    }\\n\\n    function _subToZero(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        if (b.val >= a.val) {\\n            return CTokenAmount({val: 0});\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _subToZero(uint a, uint b) pure internal returns (uint) {\\n        if (b >= a) {\\n            return 0;\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _subToZero(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        if (b.mantissa >= a.mantissa) {\\n            return Exp({mantissa: 0});\\n        } else {\\n            return _sub(a,b);\\n        }\\n    }\\n\\n    function _sub(CTokenAmount memory a, CTokenAmount memory b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _sub(a.val, b.val)});\\n    }\\n\\n    function _sub(uint a, uint b) pure internal returns (uint) {\\n        require(b <= a, \\\"subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n    function _sub(int a, uint b) pure internal returns (int) {\\n        int c = a - int(b);\\n        require(a >= c, \\\"int - uint underflow\\\");\\n        return c;\\n    }\\n\\n    function _add(int a, uint b) pure internal returns (int) {\\n        int c = a + int(b);\\n        require(a <= c, \\\"int + uint overflow\\\");\\n        return c;\\n    }\\n\\n    function _mul(uint a, CTokenAmount memory b) pure internal returns (uint) {\\n        return _mul(a, b.val);\\n    }\\n\\n    function _mul(CTokenAmount memory a, uint b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _mul(a.val, b)});\\n    }\\n\\n    function _mul(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _mul(a.mantissa, b.mantissa) / EXP_SCALE});\\n    }\\n\\n    function _mul(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _mul(a.mantissa, b)});\\n    }\\n\\n    function _mul(uint a, Exp memory b) pure internal returns (uint) {\\n        return _mul(a, b.mantissa) / EXP_SCALE;\\n    }\\n\\n    function _mul(uint a, uint b) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function _div(uint a, CTokenAmount memory b) pure internal returns (uint) {\\n        return _div(a, b.val);\\n    }\\n\\n    function _div(CTokenAmount memory a, uint b) pure internal returns (CTokenAmount memory) {\\n        return CTokenAmount({val: _div(a.val, b)});\\n    }\\n\\n    function _div(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _div(_mul(a.mantissa, EXP_SCALE), b.mantissa)});\\n    }\\n\\n    function _div(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: _div(a.mantissa, b)});\\n    }\\n\\n    function _div(uint a, Exp memory b) pure internal returns (uint) {\\n        return _div(_mul(a, EXP_SCALE), b.mantissa);\\n    }\\n\\n    function _div(uint a, uint b) pure internal returns (uint) {\\n        require(b > 0, \\\"divide by zero\\\");\\n        return a / b;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x8c6200920feaf6aa32f936d0daf59a94bc84b9b5808c425db8b1eba60bd65e06\"},\"contracts/Rho.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Math.sol\\\";\\nimport {RhoInterface, CTokenInterface, CompInterface, InterestRateModelInterface} from \\\"./RhoInterfaces.sol\\\";\\n\\n/* @dev:\\n * CTokens are used as collateral. \\\"Underlying\\\" in Rho refers to the collateral CToken's underlying token.\\n * An Exp is a data type with 18 decimals, used for scaling up and precise calculations */\\ncontract Rho is RhoInterface, Math {\\n\\n\\tCTokenInterface public immutable cToken;\\n\\tCompInterface public immutable comp;\\n\\n\\tuint public immutable SWAP_MIN_DURATION;\\n\\tuint public immutable SUPPLY_MIN_DURATION;\\n\\tuint public immutable MIN_SWAP_NOTIONAL = 1e18;\\n\\tuint public immutable CLOSE_GRACE_PERIOD_BLOCKS = 3000; // ~12.5 hrs\\n\\tuint public immutable CLOSE_PENALTY_PER_BLOCK_MANTISSA = 1e14;// 1% (1e16) every 25 min (100 blocks)\\n\\n\\tconstructor (\\n\\t\\tInterestRateModelInterface interestRateModel_,\\n\\t\\tCTokenInterface cToken_,\\n\\t\\tCompInterface comp_,\\n\\t\\tuint minFloatRateMantissa_,\\n\\t\\tuint maxFloatRateMantissa_,\\n\\t\\tuint swapMinDuration_,\\n\\t\\tuint supplyMinDuration_,\\n\\t\\taddress admin_,\\n\\t\\tuint liquidityLimitCTokens_\\n\\t) public {\\n\\t\\trequire(minFloatRateMantissa_ < maxFloatRateMantissa_, \\\"Min float rate must be below max float rate\\\");\\n\\n\\t\\tinterestRateModel = interestRateModel_;\\n\\t\\tcToken = cToken_;\\n\\t\\tcomp = comp_;\\n\\t\\tminFloatRate = _toExp(minFloatRateMantissa_);\\n\\t\\tmaxFloatRate = _toExp(maxFloatRateMantissa_);\\n\\t\\tSWAP_MIN_DURATION = swapMinDuration_;\\n\\t\\tSUPPLY_MIN_DURATION = supplyMinDuration_;\\n\\t\\tadmin = admin_;\\n\\n\\t\\tsupplyIndex = ONE_EXP.mantissa;\\n\\t\\tbenchmarkIndexStored = _toExp(cToken_.borrowIndex());\\n\\t\\tisPaused = false;\\n\\t\\tliquidityLimit = CTokenAmount({val:liquidityLimitCTokens_});\\n\\t}\\n\\n\\t/* @dev Supplies liquidity to the protocol. Become the counterparty for all swap traders, in return for fees.\\n\\t * @param cTokenSupplyAmount Amount to supply, in CTokens.\\n\\t */\\n\\tfunction supply(uint cTokenSupplyAmount) public override {\\n\\t\\tCTokenAmount memory supplyAmount = CTokenAmount({val: cTokenSupplyAmount});\\n\\t\\tCTokenAmount memory supplierLiquidityNew = _add(supplierLiquidity, supplyAmount);\\n\\t\\t\\n\\t\\trequire(_lt(supplierLiquidityNew, liquidityLimit), \\\"Supply paused, above liquidity limit\\\");\\n\\t\\trequire(isPaused == false, \\\"Market paused\\\");\\n\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\taccrue(cTokenExchangeRate);\\n\\t\\tCTokenAmount memory prevSupply = supplyAccounts[msg.sender].amount;\\n\\n\\t\\tCTokenAmount memory truedUpPrevSupply;\\n\\t\\tif (prevSupply.val == 0) {\\n\\t\\t\\ttruedUpPrevSupply = CTokenAmount({val: 0});\\n\\t\\t} else {\\n\\t\\t\\tuint prevIndex = supplyAccounts[msg.sender].index;\\n\\t\\t\\ttruedUpPrevSupply = _div(_mul(prevSupply, supplyIndex), prevIndex);\\n\\t\\t}\\n\\n\\t\\tCTokenAmount memory newSupplyAmount = _add(truedUpPrevSupply, supplyAmount);\\n\\n\\t\\temit Supply(msg.sender, cTokenSupplyAmount, newSupplyAmount.val);\\n\\n\\t\\tsupplyAccounts[msg.sender].amount = newSupplyAmount;\\n\\t\\tsupplyAccounts[msg.sender].lastBlock = getBlockNumber();\\n\\t\\tsupplyAccounts[msg.sender].index = supplyIndex;\\n\\n\\t\\tsupplierLiquidity = supplierLiquidityNew;\\n\\n\\t\\ttransferIn(msg.sender, supplyAmount);\\n\\t}\\n\\n\\t/* @dev Remove liquidity from protocol. Can only perform after a waiting period from supplying, to prevent interest rate manipulation\\n\\t * @param removeCTokenAmount Amount of CTokens to remove. 0 removes all CTokens.\\n\\t */\\n\\tfunction remove(uint removeCTokenAmount) public override {\\n\\t\\tCTokenAmount memory removeAmount = CTokenAmount({val: removeCTokenAmount});\\n\\t\\tSupplyAccount memory account = supplyAccounts[msg.sender];\\n\\t\\trequire(account.amount.val > 0, \\\"Must withdraw from active account\\\");\\n\\t\\trequire(getBlockNumber() - account.lastBlock >= SUPPLY_MIN_DURATION, \\\"Liquidity must be supplied a minimum duration\\\");\\n\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\tCTokenAmount memory lockedCollateral = accrue(cTokenExchangeRate);\\n\\t\\tCTokenAmount memory truedUpAccountValue = _div(_mul(account.amount, supplyIndex), account.index);\\n\\n\\t\\t// Remove all liquidity\\n\\t\\tif (removeAmount.val == 0) {\\n\\t\\t\\tremoveAmount = truedUpAccountValue;\\n\\t\\t}\\n\\t\\trequire(_lte(removeAmount, truedUpAccountValue), \\\"Trying to remove more than account value\\\");\\n\\t\\tCTokenAmount memory unlockedCollateral = _sub(supplierLiquidity, lockedCollateral);\\n\\t\\t\\n\\t\\trequire(_lte(removeAmount, unlockedCollateral), \\\"Removing more liquidity than is unlocked\\\");\\n\\t\\trequire(_lte(removeAmount, supplierLiquidity), \\\"Removing more than total supplier liquidity\\\");\\n\\n\\t\\tCTokenAmount memory newAccountValue = _sub(truedUpAccountValue, removeAmount);\\n\\n\\t\\temit Remove(msg.sender, removeCTokenAmount, newAccountValue.val);\\n\\n\\t\\tsupplyAccounts[msg.sender].lastBlock = getBlockNumber();\\n\\t\\tsupplyAccounts[msg.sender].index = supplyIndex;\\n\\t\\tsupplyAccounts[msg.sender].amount = newAccountValue;\\n\\n\\t\\tsupplierLiquidity = _sub(supplierLiquidity, removeAmount);\\n\\n\\t\\ttransferOut(msg.sender, removeAmount);\\n\\t}\\n\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) public override returns(bytes32 swapHash) {\\n\\t\\treturn openInternal(true, notionalAmount, maximumFixedRateMantissa);\\n\\t}\\n\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) public override returns(bytes32 swapHash) {\\n\\t\\treturn openInternal(false, notionalAmount, minFixedRateMantissa);\\n\\t}\\n\\n\\t/* @dev Opens a new interest rate swap\\n\\t * @param userPayingFixed : The user can choose if they want to receive fixed or pay fixed (the protocol will take the opposite side)\\n\\t * @param notionalAmount : The principal that interest rate payments will be based on\\n\\t * @param fixedRateLimitMantissa : The maximum (if payingFixed) or minimum (if receivingFixed) rate the swap should succeed at. Prevents frontrunning attacks.\\n\\t \\t* The amount of interest to pay over 2,102,400 blocks (~1 year), with 18 decimals of precision. Eg: 5% per block-year => 0.5e18.\\n\\t*/\\n\\tfunction openInternal(bool userPayingFixed, uint notionalAmount, uint fixedRateLimitMantissa) internal returns (bytes32 swapHash) {\\n\\t\\trequire(isPaused == false, \\\"Market paused\\\");\\n\\t\\trequire(notionalAmount >= MIN_SWAP_NOTIONAL, \\\"Swap notional amount must exceed minimum\\\");\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\n\\t\\tCTokenAmount memory lockedCollateral = accrue(cTokenExchangeRate);\\n\\n\\t\\tCTokenAmount memory supplierLiquidityTemp = supplierLiquidity; // copy to memory for gas\\n\\t\\trequire(_lt(supplierLiquidityTemp, liquidityLimit), \\\"Open paused, above liquidity limit\\\");\\n\\t\\t\\n\\t\\t(Exp memory swapFixedRate, int rateFactorNew) = getSwapRate(userPayingFixed, notionalAmount, lockedCollateral, supplierLiquidityTemp, cTokenExchangeRate);\\n\\t\\tCTokenAmount memory userCollateralCTokens;\\n\\t\\tif (userPayingFixed) {\\n\\t\\t\\trequire(swapFixedRate.mantissa <= fixedRateLimitMantissa, \\\"The fixed rate Rho would receive is above user's limit\\\");\\n\\t\\t\\tCTokenAmount memory lockedCollateralHypothetical = _add(lockedCollateral, getReceiveFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate));\\n\\t\\t\\trequire(_lte(lockedCollateralHypothetical, supplierLiquidityTemp), \\\"Insufficient protocol collateral\\\");\\n\\t\\t\\tuserCollateralCTokens = openPayFixedSwapInternal(notionalAmount, swapFixedRate, cTokenExchangeRate);\\n\\t\\t} else {\\n\\t\\t\\trequire(swapFixedRate.mantissa >= fixedRateLimitMantissa, \\\"The fixed rate Rho would pay is below user's limit\\\");\\n\\t\\t\\tCTokenAmount memory lockedCollateralHypothetical = _add(lockedCollateral, getPayFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate));\\n\\t\\t\\trequire(_lte(lockedCollateralHypothetical, supplierLiquidityTemp), \\\"Insufficient protocol collateral\\\");\\n\\t\\t\\tuserCollateralCTokens = openReceiveFixedSwapInternal(notionalAmount, swapFixedRate, cTokenExchangeRate);\\n\\t\\t}\\n\\n\\t\\tswapHash = keccak256(abi.encode(\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexStored.mantissa,\\n\\t\\t\\tgetBlockNumber(),\\n\\t\\t\\tswapFixedRate.mantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens.val,\\n\\t\\t\\tmsg.sender\\n\\t\\t));\\n\\n\\t\\trequire(swaps[swapHash] == false, \\\"Duplicate swap\\\");\\n\\n\\t\\temit OpenSwap(\\n\\t\\t\\tswapHash,\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexStored.mantissa,\\n\\t\\t\\tgetBlockNumber(),\\n\\t\\t\\tswapFixedRate.mantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens.val,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\n\\t\\tswaps[swapHash] = true;\\n\\t\\trateFactor = rateFactorNew;\\n\\t\\ttransferIn(msg.sender, userCollateralCTokens);\\n\\t}\\n\\n\\n\\t// @dev User is paying fixed, protocol is receiving fixed\\n\\tfunction openPayFixedSwapInternal(uint notionalAmount, Exp memory swapFixedRate, Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory userCollateralCTokens) {\\n\\t\\tuint notionalReceivingFixedNew = _add(notionalReceivingFixed, notionalAmount);\\n\\t\\tuint notionalPayingFloatNew = _add(notionalPayingFloat, notionalAmount);\\n\\n\\t\\tint parBlocksReceivingFixedNew = _add(parBlocksReceivingFixed, _mul(SWAP_MIN_DURATION, notionalAmount));\\n\\n\\t\\t/* avgFixedRateReceivingNew = (avgFixedRateReceiving * notionalReceivingFixed + notionalAmount * swapFixedRate) / (notionalReceivingFixed + notionalAmount);*/\\n\\t\\tExp memory priorFixedReceivingRate = _mul(avgFixedRateReceiving, notionalReceivingFixed);\\n\\t\\tExp memory orderFixedReceivingRate = _mul(swapFixedRate, notionalAmount);\\n\\t\\tExp memory avgFixedRateReceivingNew = _div(_add(priorFixedReceivingRate, orderFixedReceivingRate), notionalReceivingFixedNew);\\n\\n\\t\\tuserCollateralCTokens = getPayFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate);\\n\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tnotionalReceivingFixed = notionalReceivingFixedNew;\\n\\t\\tavgFixedRateReceiving = avgFixedRateReceivingNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\n\\t\\treturn userCollateralCTokens;\\n\\t}\\n\\n\\t// @dev User is receiving fixed, protocol is paying fixed\\n\\tfunction openReceiveFixedSwapInternal(uint notionalAmount, Exp memory swapFixedRate, Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory userCollateralCTokens) {\\n\\t\\tuint notionalPayingFixedNew = _add(notionalPayingFixed, notionalAmount);\\n\\t\\tuint notionalReceivingFloatNew = _add(notionalReceivingFloat, notionalAmount);\\n\\n\\t\\tint parBlocksPayingFixedNew = _add(parBlocksPayingFixed, _mul(SWAP_MIN_DURATION, notionalAmount));\\n\\n\\t\\t/* avgFixedRatePayingNew = (avgFixedRatePaying * notionalPayingFixed + notionalAmount * swapFixedRate) / (notionalPayingFixed + notionalAmount) */\\n\\t\\tExp memory priorFixedPayingRate = _mul(avgFixedRatePaying, notionalPayingFixed);\\n\\t\\tExp memory orderFixedPayingRate = _mul(swapFixedRate, notionalAmount);\\n\\t\\tExp memory avgFixedRatePayingNew = _div(_add(priorFixedPayingRate, orderFixedPayingRate), notionalPayingFixedNew);\\n\\n\\t\\tuserCollateralCTokens = getReceiveFixedInitCollateral(swapFixedRate, notionalAmount, cTokenExchangeRate);\\n\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\t\\tnotionalPayingFixed = notionalPayingFixedNew;\\n\\t\\tavgFixedRatePaying = avgFixedRatePayingNew;\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\n\\t\\treturn userCollateralCTokens;\\n\\t}\\n\\n\\t/* @dev Closes an existing swap, after the min swap duration. Float payment continues even if closed late.\\n\\t * Takes params from Open event.\\n\\t * Take caution not to unecessarily revert due to underflow / overflow, as uncloseable swaps are very dangerous.\\n\\t */\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) public override {\\n\\t\\tExp memory cTokenExchangeRate = getExchangeRate();\\n\\t\\taccrue(cTokenExchangeRate);\\n\\t\\tbytes32 swapHash = keccak256(abi.encode(\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\tbenchmarkIndexInit,\\n\\t\\t\\tinitBlock,\\n\\t\\t\\tswapFixedRateMantissa,\\n\\t\\t\\tnotionalAmount,\\n\\t\\t\\tuserCollateralCTokens,\\n\\t\\t\\towner\\n\\t\\t));\\n\\t\\trequire(swaps[swapHash] == true, \\\"No active swap found\\\");\\n\\t\\tuint swapDuration = _sub(getBlockNumber(), initBlock);\\n\\t\\trequire(swapDuration >= SWAP_MIN_DURATION, \\\"Premature close swap\\\");\\n\\t\\tExp memory benchmarkIndexRatio = _div(benchmarkIndexStored, _toExp(benchmarkIndexInit));\\n\\n\\t\\tCTokenAmount memory userCollateral = CTokenAmount({val: userCollateralCTokens});\\n\\t\\tExp memory swapFixedRate = _toExp(swapFixedRateMantissa);\\n\\n\\t\\tCTokenAmount memory userPayout;\\n\\t\\tif (userPayingFixed) {\\n\\t\\t\\tuserPayout = closePayFixedSwapInternal(\\n\\t\\t\\t\\tswapDuration,\\n\\t\\t\\t\\tbenchmarkIndexRatio,\\n\\t\\t\\t\\tswapFixedRate,\\n\\t\\t\\t\\tnotionalAmount,\\n\\t\\t\\t\\tuserCollateral,\\n\\t\\t\\t\\tcTokenExchangeRate\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tuserPayout = closeReceiveFixedSwapInternal(\\n\\t\\t\\t\\tswapDuration,\\n\\t\\t\\t\\tbenchmarkIndexRatio,\\n\\t\\t\\t\\tswapFixedRate,\\n\\t\\t\\t\\tnotionalAmount,\\n\\t\\t\\t\\tuserCollateral,\\n\\t\\t\\t\\tcTokenExchangeRate\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tuint bal = cToken.balanceOf(address(this));\\n\\n\\t\\t// Payout is capped by total balance\\n\\t\\tif (userPayout.val > bal) userPayout = CTokenAmount({val: bal});\\n\\n\\t\\tuint lateBlocks = _sub(swapDuration, SWAP_MIN_DURATION);\\n\\t\\tCTokenAmount memory penalty = CTokenAmount(0);\\n\\n\\t\\tif (lateBlocks > CLOSE_GRACE_PERIOD_BLOCKS) {\\n\\t\\t\\tuint penaltyBlocks = lateBlocks - CLOSE_GRACE_PERIOD_BLOCKS;\\n\\t\\t\\tExp memory penaltyPercent = _mul(_toExp(CLOSE_PENALTY_PER_BLOCK_MANTISSA), penaltyBlocks);\\n\\t\\t\\tpenaltyPercent = ONE_EXP.mantissa > penaltyPercent.mantissa ? penaltyPercent : ONE_EXP; // maximum of 100% penalty\\n\\t\\t\\tpenalty = CTokenAmount(_mul(userPayout.val, penaltyPercent));\\n\\t\\t\\tuserPayout = _sub(userPayout, penalty);\\n\\t\\t}\\n\\n\\t\\temit CloseSwap(swapHash, owner, userPayout.val, penalty.val, benchmarkIndexStored.mantissa);\\n\\n\\t\\tswaps[swapHash] = false;\\n\\t\\ttransferOut(owner, userPayout);\\n\\t\\ttransferOut(msg.sender, penalty);\\n\\t}\\n\\n\\t// @dev User paid fixed, protocol paid fixed\\n\\tfunction closePayFixedSwapInternal(\\n\\t\\tuint swapDuration,\\n\\t\\tExp memory benchmarkIndexRatio,\\n\\t\\tExp memory swapFixedRate,\\n\\t\\tuint notionalAmount,\\n\\t\\tCTokenAmount memory userCollateral,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) internal returns (CTokenAmount memory userPayout) {\\n\\t\\tuint notionalReceivingFixedNew = _subToZero(notionalReceivingFixed, notionalAmount);\\n\\t\\tuint notionalPayingFloatNew = _subToZero(notionalPayingFloat, _mul(notionalAmount, benchmarkIndexRatio));\\n\\n\\t\\t/* avgFixedRateReceiving = avgFixedRateReceiving * notionalReceivingFixed - swapFixedRate * notionalAmount / notionalReceivingFixedNew */\\n\\t\\tExp memory avgFixedRateReceivingNew;\\n\\t\\tif (notionalReceivingFixedNew == 0){\\n\\t\\t\\tavgFixedRateReceivingNew = _toExp(0);\\n\\t\\t} else {\\n\\t\\t\\tExp memory numerator = _subToZero(_mul(avgFixedRateReceiving, notionalReceivingFixed), _mul(swapFixedRate, notionalAmount));\\n\\t\\t\\tavgFixedRateReceivingNew = _div(numerator, notionalReceivingFixedNew);\\n\\t\\t}\\n\\n\\t\\t/* The protocol reserved enough collateral for this swap for SWAP_MIN_DURATION, but its has been longer.\\n\\t\\t * We have decreased lockedCollateral in `accrue` for the late blocks, meaning we decreased it by more than the \\\"open\\\" tx added to it in the first place.\\n\\t\\t */\\n\\t\\tint parBlocksReceivingFixedNew = _add(parBlocksReceivingFixed, _mul(notionalAmount, _sub(swapDuration, SWAP_MIN_DURATION)));\\n\\n\\t\\tCTokenAmount memory fixedLeg = toCTokens(_mul(_mul(notionalAmount, swapDuration), swapFixedRate), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory floatLeg = toCTokens(_mul(notionalAmount, _sub(benchmarkIndexRatio, ONE_EXP)), cTokenExchangeRate);\\n\\t\\tuserPayout = _subToZero(_add(userCollateral, floatLeg), fixedLeg); // no underflows\\n\\n\\t\\tnotionalReceivingFixed = notionalReceivingFixedNew;\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\t\\tavgFixedRateReceiving = avgFixedRateReceivingNew;\\n\\n\\t\\treturn userPayout;\\n\\t}\\n\\n\\t// @dev User received fixed, protocol paid fixed\\n\\tfunction closeReceiveFixedSwapInternal(\\n\\t\\tuint swapDuration,\\n\\t\\tExp memory benchmarkIndexRatio,\\n\\t\\tExp memory swapFixedRate,\\n\\t\\tuint notionalAmount,\\n\\t\\tCTokenAmount memory userCollateral,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) internal returns (CTokenAmount memory userPayout) {\\n\\t\\tuint notionalPayingFixedNew = _subToZero(notionalPayingFixed, notionalAmount);\\n\\t\\tuint notionalReceivingFloatNew = _subToZero(notionalReceivingFloat, _mul(notionalAmount, benchmarkIndexRatio));\\n\\n\\t\\t/* avgFixedRatePaying = avgFixedRatePaying * notionalPayingFixed - swapFixedRate * notionalAmount / notionalReceivingFixedNew */\\n\\t\\tExp memory avgFixedRatePayingNew;\\n\\t\\tif (notionalPayingFixedNew == 0) {\\n\\t\\t\\tavgFixedRatePayingNew = _toExp(0);\\n\\t\\t} else {\\n\\t\\t\\tExp memory numerator = _subToZero(_mul(avgFixedRatePaying, notionalPayingFixed), _mul(swapFixedRate, notionalAmount));\\n\\t\\t\\tavgFixedRatePayingNew = _div(numerator, notionalReceivingFloatNew);\\n\\t\\t}\\n\\n\\t\\t/* The protocol reserved enough collateral for this swap for SWAP_MIN_DURATION, but its has been longer.\\n\\t\\t * We have decreased lockedCollateral in `accrue` for the late blocks, meaning we decreased it by more than the \\\"open\\\" tx added to it in the first place.\\n\\t\\t */\\n\\t\\tint parBlocksPayingFixedNew = _add(parBlocksPayingFixed, _mul(notionalAmount, _sub(swapDuration, SWAP_MIN_DURATION)));\\n\\n\\t\\tCTokenAmount memory fixedLeg = toCTokens(_mul(_mul(notionalAmount, swapDuration), swapFixedRate), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory floatLeg = toCTokens(_mul(notionalAmount, _sub(benchmarkIndexRatio, ONE_EXP)), cTokenExchangeRate);\\n\\t\\tuserPayout = _subToZero(_add(userCollateral, fixedLeg), floatLeg);\\n\\n\\t\\tnotionalPayingFixed = notionalPayingFixedNew;\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\t\\tavgFixedRatePaying = avgFixedRatePayingNew;\\n\\n\\t\\treturn userPayout;\\n\\t}\\n\\n\\t/* @dev Called internally at the beginning of external swap and liquidity provider functions.\\n\\t * WRITES TO STORAGE\\n\\t * Accounts for interest rate payments and adjust collateral requirements with the passage of time.\\n\\t * @return lockedCollateralNew : The amount of collateral the protocol needs to keep locked.\\n\\t */\\n\\tfunction accrue(Exp memory cTokenExchangeRate) internal returns (CTokenAmount memory) {\\n\\t\\trequire(getBlockNumber() >= lastAccrualBlock, \\\"Block number decreasing\\\");\\n\\t\\tuint accruedBlocks = getBlockNumber() - lastAccrualBlock;\\n\\t\\t(CTokenAmount memory lockedCollateralNew, int parBlocksReceivingFixedNew, int parBlocksPayingFixedNew) = getLockedCollateral(accruedBlocks, cTokenExchangeRate);\\n\\n\\t\\tif (accruedBlocks == 0) {\\n\\t\\t\\treturn lockedCollateralNew;\\n\\t\\t}\\n\\n\\t\\tExp memory benchmarkIndexNew = getBenchmarkIndex();\\n\\t\\tExp memory benchmarkIndexRatio = _div(benchmarkIndexNew, benchmarkIndexStored);\\n\\t\\tExp memory floatRate = _sub(benchmarkIndexRatio, ONE_EXP);\\n\\n\\t\\tCTokenAmount memory supplierLiquidityNew = getSupplierLiquidity(accruedBlocks, floatRate, cTokenExchangeRate);\\n\\n\\t\\t// supplyIndex *= supplierLiquidityNew / supplierLiquidity\\n\\t\\tuint supplyIndexNew = supplyIndex;\\n\\t\\tif (supplierLiquidityNew.val != 0) {\\n\\t\\t\\tsupplyIndexNew = _div(_mul(supplyIndex, supplierLiquidityNew), supplierLiquidity);\\n\\t\\t}\\n\\n\\t\\tuint notionalPayingFloatNew = _mul(notionalPayingFloat, benchmarkIndexRatio);\\n\\t\\tuint notionalReceivingFloatNew = _mul(notionalReceivingFloat, benchmarkIndexRatio);\\n\\n\\t\\t/** Apply Effects **/\\n\\n\\t\\tparBlocksPayingFixed = parBlocksPayingFixedNew;\\n\\t\\tparBlocksReceivingFixed = parBlocksReceivingFixedNew;\\n\\n\\t\\tsupplierLiquidity = supplierLiquidityNew;\\n\\t\\tsupplyIndex = supplyIndexNew;\\n\\n\\t\\tnotionalPayingFloat = notionalPayingFloatNew;\\n\\t\\tnotionalReceivingFloat = notionalReceivingFloatNew;\\n\\n\\t\\tbenchmarkIndexStored = benchmarkIndexNew;\\n\\t\\tlastAccrualBlock = getBlockNumber();\\n\\n\\t\\temit Accrue(supplierLiquidityNew.val, lockedCollateralNew.val);\\n\\t\\treturn lockedCollateralNew;\\n\\t}\\n\\n\\tfunction transferIn(address from, CTokenAmount memory cTokenAmount) internal {\\n\\t\\trequire(cToken.transferFrom(from, address(this), cTokenAmount.val) == true, \\\"Transfer In Failed\\\");\\n\\t}\\n\\n\\tfunction transferOut(address to, CTokenAmount memory cTokenAmount) internal {\\n\\t\\tif (cTokenAmount.val > 0) {\\n\\t\\t\\trequire(cToken.transfer(to, cTokenAmount.val), \\\"Transfer Out failed\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t// ** PUBLIC PURE HELPERS ** //\\n\\n\\tfunction toCTokens(uint amount, Exp memory cTokenExchangeRate) public pure returns (CTokenAmount memory) {\\n\\t\\tuint cTokenAmount = _div(amount, cTokenExchangeRate);\\n\\t\\treturn CTokenAmount({val: cTokenAmount});\\n\\t}\\n\\n\\tfunction toUnderlying(CTokenAmount memory amount, Exp memory cTokenExchangeRate) public pure returns (uint) {\\n\\t\\treturn _mul(amount.val, cTokenExchangeRate);\\n\\t}\\n\\n\\t// *** PUBLIC VIEW GETTERS *** //\\n\\n\\t// @dev Calculate protocol locked collateral and parBlocks, which is a measure of the fixed rate credit/debt.\\n\\t// * Uses int to keep negatives, for correct late blocks calc when a single swap is outstanding\\n\\tfunction getLockedCollateral(uint accruedBlocks, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory lockedCollateral, int parBlocksReceivingFixedNew, int parBlocksPayingFixedNew) {\\n\\t\\tparBlocksReceivingFixedNew = _sub(parBlocksReceivingFixed, _mul(accruedBlocks, notionalReceivingFixed));\\n\\t\\tparBlocksPayingFixedNew = _sub(parBlocksPayingFixed, _mul(accruedBlocks, notionalPayingFixed));\\n\\n\\t\\t// Par blocks can be negative during the first or last ever swap, so floor them to 0\\n\\t\\tuint minFloatToReceive = _mul(_toUint(parBlocksPayingFixedNew), minFloatRate);\\n\\t\\tuint maxFloatToPay = _mul(_toUint(parBlocksReceivingFixedNew), maxFloatRate);\\n\\n\\t\\tuint fixedToReceive = _mul(_toUint(parBlocksReceivingFixedNew), avgFixedRateReceiving);\\n\\t\\tuint fixedToPay = _mul(_toUint(parBlocksPayingFixedNew), avgFixedRatePaying);\\n\\n\\t\\tuint minCredit = _add(fixedToReceive, minFloatToReceive);\\n\\t\\tuint maxDebt = _add(fixedToPay, maxFloatToPay);\\n\\n\\t\\tif (maxDebt > minCredit) {\\n\\t\\t\\tlockedCollateral = toCTokens(_sub(maxDebt, minCredit), cTokenExchangeRate);\\n\\t\\t} else {\\n\\t\\t\\tlockedCollateral = CTokenAmount({val:0});\\n\\t\\t}\\n\\t}\\n\\n\\t/* @dev Calculate protocol P/L by adding the cashflows since last accrual.\\n\\t * \\t\\tsupplierLiquidity += fixedReceived + floatReceived - fixedPaid - floatPaid\\n\\t */\\n\\tfunction getSupplierLiquidity(uint accruedBlocks, Exp memory floatRate, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory supplierLiquidityNew) {\\n\\t\\tuint floatPaid = _mul(notionalPayingFloat, floatRate);\\n\\t\\tuint floatReceived = _mul(notionalReceivingFloat, floatRate);\\n\\t\\tuint fixedPaid = _mul(accruedBlocks, _mul(notionalPayingFixed, avgFixedRatePaying));\\n\\t\\tuint fixedReceived = _mul(accruedBlocks, _mul(notionalReceivingFixed, avgFixedRateReceiving));\\n\\n\\t\\tCTokenAmount memory rec = toCTokens(_add(fixedReceived, floatReceived), cTokenExchangeRate);\\n\\t\\tCTokenAmount memory paid = toCTokens(_add(fixedPaid, floatPaid), cTokenExchangeRate);\\n\\t\\tsupplierLiquidityNew = _subToZero(_add(supplierLiquidity, rec), paid);\\n\\t}\\n\\n\\t// @dev Get the rate for incoming swaps\\n\\tfunction getSwapRate(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tCTokenAmount memory lockedCollateral,\\n\\t\\tCTokenAmount memory supplierLiquidity_,\\n\\t\\tExp memory cTokenExchangeRate\\n\\t) public view returns (Exp memory, int) {\\n\\t\\t(uint ratePerBlockMantissa, int rateFactorNew) = interestRateModel.getSwapRate(\\n\\t\\t\\trateFactor,\\n\\t\\t\\tuserPayingFixed,\\n\\t\\t\\torderNotional,\\n\\t\\t\\ttoUnderlying(lockedCollateral, cTokenExchangeRate),\\n\\t\\t\\ttoUnderlying(supplierLiquidity_, cTokenExchangeRate)\\n\\t\\t);\\n\\t\\treturn (_toExp(ratePerBlockMantissa), rateFactorNew);\\n\\t}\\n\\n\\t// @dev The amount that must be locked up for the payFixed leg of a swap paying fixed. Used to calculate both the protocol and user's collateral.\\n\\t// = notionalAmount * SWAP_MIN_DURATION * (swapFixedRate - minFloatRate)\\n\\tfunction getPayFixedInitCollateral(Exp memory fixedRate, uint notionalAmount, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory) {\\n\\t\\tExp memory rateDelta = _sub(fixedRate, minFloatRate);\\n\\t\\tuint amt = _mul(_mul(SWAP_MIN_DURATION, notionalAmount), rateDelta);\\n\\t\\treturn toCTokens(amt, cTokenExchangeRate);\\n\\t}\\n\\n\\t// @dev The amount that must be locked up for the receiveFixed leg of a swap receiving fixed. Used to calculate both the protocol and user's collateral.\\n\\t// = notionalAmount * SWAP_MIN_DURATION * (maxFloatRate - swapFixedRate)\\n\\tfunction getReceiveFixedInitCollateral(Exp memory fixedRate, uint notionalAmount, Exp memory cTokenExchangeRate) public view returns (CTokenAmount memory) {\\n\\t\\tExp memory rateDelta = _sub(maxFloatRate, fixedRate);\\n\\t\\tuint amt = _mul(_mul(SWAP_MIN_DURATION, notionalAmount), rateDelta);\\n\\t\\treturn toCTokens(amt, cTokenExchangeRate);\\n\\t}\\n\\n\\t// @dev Interpolates to get the current borrow index from a compound CToken (or some other similar interface)\\n\\tfunction getBenchmarkIndex() public view returns (Exp memory) {\\n\\t\\tExp memory borrowIndex = _toExp(cToken.borrowIndex());\\n\\t\\trequire(borrowIndex.mantissa != 0, \\\"Benchmark index is zero\\\");\\n\\t\\tuint accrualBlockNumber = cToken.accrualBlockNumber();\\n\\t\\trequire(getBlockNumber() >= accrualBlockNumber, \\\"Bn decreasing\\\");\\n\\t\\tuint blockDelta = _sub(getBlockNumber(), accrualBlockNumber);\\n\\n\\t\\tif (blockDelta == 0) {\\n\\t\\t\\treturn borrowIndex;\\n\\t\\t} else {\\n\\t\\t\\tExp memory borrowRateMantissa = _toExp(cToken.borrowRatePerBlock());\\n\\t\\t\\tExp memory simpleInterestFactor = _mul(borrowRateMantissa, blockDelta);\\n\\t\\t\\treturn _mul(borrowIndex, _add(simpleInterestFactor, ONE_EXP));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getExchangeRate() public view returns (Exp memory) {\\n\\t\\treturn _toExp(cToken.exchangeRateStored());\\n\\t}\\n\\n\\tfunction getBlockNumber() public view virtual returns (uint) {\\n\\t\\treturn block.number;\\n\\t}\\n\\n\\t/** ADMIN FUNCTIONS **/\\n\\n\\tfunction _setInterestRateModel(InterestRateModelInterface newModel) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set interest rate model\\\");\\n\\t\\trequire(newModel != interestRateModel, \\\"Resetting to same model\\\");\\n\\t\\temit SetInterestRateModel(address(newModel), address(interestRateModel));\\n\\t\\tinterestRateModel = newModel;\\n\\t}\\n\\n\\tfunction _setCollateralRequirements(uint minFloatRateMantissa_, uint maxFloatRateMantissa_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set collateral requirements\\\");\\n\\t\\trequire(minFloatRateMantissa_ < maxFloatRateMantissa_, \\\"Min float rate must be below max float rate\\\");\\n\\n\\t\\temit SetCollateralRequirements(minFloatRateMantissa_, maxFloatRateMantissa_);\\n\\t\\tminFloatRate = _toExp(minFloatRateMantissa_);\\n\\t\\tmaxFloatRate = _toExp(maxFloatRateMantissa_);\\n\\t}\\n\\n\\tfunction _setLiquidityLimit(uint limit_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to set liqiudity limit\\\");\\n\\t\\temit SetLiquidityLimit(limit_);\\n\\t\\tliquidityLimit = CTokenAmount({val: limit_});\\n\\t}\\n\\n\\tfunction _pause(bool isPaused_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to pause\\\");\\n\\t\\trequire(isPaused_ != isPaused, \\\"Must change isPaused\\\");\\n\\t\\temit SetPause(isPaused_);\\n\\t\\tisPaused = isPaused_;\\n\\t}\\n\\n\\tfunction _transferComp(address dest, uint amount) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to transfer comp\\\");\\n\\t\\temit CompTransferred(dest, amount);\\n\\t\\tcomp.transfer(dest, amount);\\n\\t}\\n\\n\\tfunction _delegateComp(address delegatee) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to delegate comp\\\");\\n\\t\\temit CompDelegated(delegatee);\\n\\t\\tcomp.delegate(delegatee);\\n\\t}\\n\\n\\tfunction _changeAdmin(address admin_) external {\\n\\t\\trequire(msg.sender == admin, \\\"Must be admin to change admin\\\");\\n\\t\\temit AdminChanged(admin, admin_);\\n\\t\\tadmin = admin_;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xba5537c4bfd0b58acb50c9619c3eb173343af4d88ebe599094a2860ed6796aaa\"},\"contracts/RhoInterfaces.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"./Types.sol\\\";\\n\\ninterface InterestRateModelInterface {\\n\\tfunction getSwapRate(\\n\\t\\tint rateFactorPrev,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint orderNotional,\\n\\t\\tuint lockedCollateralUnderlying,\\n\\t\\tuint supplierLiquidityUnderlying\\n\\t) external view returns (uint rate, int rateFactorNew);\\n}\\n\\ninterface ERC20Interface {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function balanceOf(address who) external returns (uint);\\n}\\n\\ninterface CompInterface is ERC20Interface{\\n\\tfunction delegate(address delegatee) external;\\n}\\n\\ninterface CTokenInterface is ERC20Interface {\\n\\tfunction borrowIndex() external view returns (uint);\\n\\tfunction accrualBlockNumber() external view returns(uint);\\n\\tfunction borrowRatePerBlock() external view returns(uint);\\n\\tfunction exchangeRateStored() external view returns (uint);\\n}\\n\\nabstract contract RhoInterface is Types {\\n\\tfunction supply(uint cTokenSupplyAmount) external virtual;\\n\\tfunction remove(uint removeCTokenAmount) external virtual;\\n\\tfunction openPayFixedSwap(uint notionalAmount, uint maximumFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction openReceiveFixedSwap(uint notionalAmount, uint minFixedRateMantissa) external virtual returns (bytes32 swapHash);\\n\\tfunction close(\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress owner\\n\\t) external virtual;\\n\\n\\tevent Supply(address indexed supplier, uint cTokenSupplyAmount, uint newSupplyAmount);\\n\\tevent Remove(address indexed supplier, uint removeCTokenAmount, uint newSupplyValue);\\n\\tevent OpenSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\tbool userPayingFixed,\\n\\t\\tuint benchmarkIndexInit,\\n\\t\\tuint initBlock,\\n\\t\\tuint swapFixedRateMantissa,\\n\\t\\tuint notionalAmount,\\n\\t\\tuint userCollateralCTokens,\\n\\t\\taddress indexed owner\\n\\t);\\n\\tevent CloseSwap(\\n\\t\\tbytes32 indexed swapHash,\\n\\t\\taddress indexed owner,\\n\\t\\tuint userPayout,\\n\\t\\tuint penalty,\\n\\t\\tuint benchmarkIndexFinal\\n\\t);\\n\\tevent Accrue(uint supplierLiquidityNew, uint lockedCollateralNew);\\n\\tevent SetInterestRateModel(address newModel, address oldModel);\\n\\tevent SetPause(bool isPaused);\\n\\tevent AdminRenounced();\\n\\tevent CompTransferred(address dest, uint amount);\\n\\tevent CompDelegated(address delegatee);\\n\\tevent SetCollateralRequirements(uint minFloatRateMantissa, uint maxFloatRateMantissa);\\n\\tevent AdminChanged(address oldAdmin, address newAdmin);\\n\\tevent SetLiquidityLimit(uint limit);\\n\\n\\tInterestRateModelInterface public interestRateModel;\\n\\n\\tuint public lastAccrualBlock;\\n\\tExp public benchmarkIndexStored;\\n\\n\\t/* Notional size of each leg, one adjusting for compounding and one static */\\n\\tuint public notionalReceivingFixed;\\n\\tuint public notionalPayingFloat;\\n\\n\\tuint public notionalPayingFixed;\\n\\tuint public notionalReceivingFloat;\\n\\n\\t/* Measure of outstanding swap obligations. 1 Unit = 1e18 notional * 1 block. Used to calculate collateral requirements */\\n\\tint public parBlocksReceivingFixed;\\n\\tint public parBlocksPayingFixed;\\n\\n\\t/* Per block fixed / float interest rates used in collateral calculations */\\n\\tExp public avgFixedRateReceiving;\\n\\tExp public avgFixedRatePaying;\\n\\n\\t/* Per block float rate bounds used in collateral calculations */\\n\\tExp public maxFloatRate;\\n\\tExp public minFloatRate;\\n\\n\\t/* Protocol PnL */\\n\\tuint public supplyIndex;\\n\\tCTokenAmount public supplierLiquidity;\\n\\n\\tint public rateFactor;// for interest rate model\\n\\n\\taddress public admin;\\n\\n\\t/* Pausing safety functions that can pause open and supply functions */\\n\\tbool public isPaused;\\n\\tCTokenAmount public liquidityLimit;\\n\\n\\tmapping(address => SupplyAccount) public supplyAccounts;\\n\\tmapping(bytes32 => bool) public swaps;\\n\\n\\tstruct SupplyAccount {\\n\\t\\tCTokenAmount amount;\\n\\t\\tuint lastBlock;\\n\\t\\tuint index;\\n\\t}\\n\\n\\tstruct Swap {\\n\\t\\tbool userPayingFixed;\\n\\t\\tuint notionalAmount;\\n\\t\\tuint swapFixedRateMantissa;\\n\\t\\tuint benchmarkIndexInit;\\n\\t\\tuint userCollateralCTokens;\\n\\t\\tuint initBlock;\\n\\t\\taddress owner;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xb5de435fab04d6ea7331a179997e5df99991e12b1eb651b48f66163aff0e44b5\"},\"contracts/Types.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\ncontract Types {\\n\\n    /*@dev A type to store amounts of cTokens, to make sure they are not confused with amounts of the underlying */\\n    struct CTokenAmount {\\n        uint val;\\n    }\\n\\n    /* @dev A type to store numbers scaled up by 18 decimals*/\\n    struct Exp {\\n        uint mantissa;\\n    }\\n}\\n\",\"keccak256\":\"0x3420c97975694664fba3d84ac78149b669b452a2ac4aee8bab41e02407a494d5\"},\"contracts/test/MockRho.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\npragma solidity ^0.6.10;\\n\\nimport \\\"../Rho.sol\\\";\\n\\ncontract MockRho is Rho {\\n\\n\\tuint public blockNumber = 100;\\n\\n\\tconstructor (\\n\\t\\tInterestRateModelInterface interestRateModel_,\\n\\t\\tCTokenInterface cToken_,\\n\\t\\tCompInterface comp_,\\n\\t\\tuint minFloatRateMantissa_,\\n\\t\\tuint maxFloatRateMantissa_,\\n\\t\\tuint swapMinDuration_,\\n\\t\\tuint supplyMinDuration_,\\n\\t\\taddress admin_,\\n\\t\\tuint liquidityLimitCTokens_\\n\\t)\\n\\t\\tRho(\\n\\t\\t\\tinterestRateModel_,\\n\\t\\t\\tcToken_,\\n\\t\\t\\tcomp_,\\n\\t\\t\\tminFloatRateMantissa_,\\n\\t\\t\\tmaxFloatRateMantissa_,\\n\\t\\t\\tswapMinDuration_,\\n\\t\\t\\tsupplyMinDuration_,\\n\\t\\t\\tadmin_,\\n\\t\\t\\tliquidityLimitCTokens_\\n\\t\\t)\\n\\t\\tpublic {}\\n\\n\\tfunction setBlockNumber(uint blockNumber_) public returns (uint) {\\n\\t\\tblockNumber = blockNumber_;\\n\\t}\\n\\n\\tfunction getBlockNumber() public view override returns (uint) {\\n\\t\\treturn blockNumber;\\n\\t}\\n\\n\\tfunction harnessAccrueInterest() public returns (CTokenAmount memory lockedCollateralNew){\\n\\t\\treturn accrue(getExchangeRate());\\n\\t}\\n\\n\\tfunction advanceBlocks(uint blocks) public {\\n\\t\\tblockNumber = blockNumber + blocks;\\n\\t}\\n\\n\\tfunction advanceBlocksProtocol(uint blocks) public {\\n\\t\\tadvanceBlocks(blocks);\\n\\n\\t\\t(bool worked, bytes memory _) = address(cToken).call(abi.encodeWithSignature(\\\"advanceBlocks(uint256)\\\", blocks));\\n\\t\\trequire(worked == true, \\\"Advance blocks didnt work\\\");\\n\\t\\t_;\\n\\t}\\n}\\n\",\"keccak256\":\"0x7c74258789e4a909bb5d251aa64935f2236dee7f5302934923abd186cfc490f5\"}},\"version\":1}"},"contracts/test/SafeMath.sol:SafeMath":{"abi":"[]","bin":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220309629dcc657bfd1b4afb2cd6295e1356e134278e4ec6053aa2c4f99eec3f55064736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xabba6407e3cc0e14aa98d71eac7c59513b9b68b4ac734293ac2dbab9d5cb3dfb\"}},\"version\":1}"},"contracts/test/StandardToken.sol:BasicToken":{"abi":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"608060405234801561001057600080fd5b5061037e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806318160ddd1461004657806370a0823114610060578063a9059cbb14610086575b600080fd5b61004e6100c6565b60408051918252519081900360200190f35b61004e6004803603602081101561007657600080fd5b50356001600160a01b03166100cc565b6100b26004803603604081101561009c57600080fd5b506001600160a01b0381351690602001356100e7565b604080519115158252519081900360200190f35b60015490565b6001600160a01b031660009081526020819052604090205490565b60006001600160a01b0383166100fc57600080fd5b33600090815260208190526040902054821115610160576040805162461bcd60e51b815260206004820152601e60248201527f5472616e736665723a20696e73756666696369656e742062616c616e63650000604482015290519081900360640190fd5b33600090815260208190526040902054610180908363ffffffff61020e16565b33600090815260208190526040808220929092556001600160a01b038516815220546101b2908363ffffffff61025716565b6001600160a01b038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600061025083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506102b1565b9392505050565b600082820183811015610250576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081848411156103405760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156103055781810151838201526020016102ed565b50505050905090810190601f1680156103325780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fea2646970667358221220b86522538d190a91f11a49199b9a7cef1ed1fb1a33bc67294bad3616ca65b94864736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Basic version of StandardToken, with no allowances.\",\"methods\":{\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"_0\":\"An uint256 representing the amount owned by the passed address.\"}},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}}},\"title\":\"Basic token\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/StandardToken.sol\":\"BasicToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xabba6407e3cc0e14aa98d71eac7c59513b9b68b4ac734293ac2dbab9d5cb3dfb\"},\"contracts/test/StandardToken.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n    function totalSupply() public view virtual returns (uint256);\\n    function balanceOf(address who) public view virtual returns (uint256);\\n    function transfer(address to, uint256 value) public virtual returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) balances;\\n\\n    uint256 totalSupply_;\\n\\n    /**\\n    * @dev Total number of tokens in existence\\n    */\\n    function totalSupply() public view override returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint256 _value) public override returns (bool) {\\n        require(_to != address(0));\\n        require(_value <= balances[msg.sender], \\\"Transfer: insufficient balance\\\");\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint256 representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public view virtual returns (uint256);\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n    function approve(address spender, uint256 value) public virtual returns (bool);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n    mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param _from address The address which you want to send tokens from\\n     * @param _to address The address which you want to transfer to\\n     * @param _value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"TransferFrom: Can't send to address zero\\\");\\n        require(_value <= balances[_from], \\\"TransferFrom: Inadequate balance\\\");\\n        require(_value <= allowed[_from][msg.sender], \\\"TransferFrom: Inadequate allowance\\\");\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value) public override returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param _owner address The address which owns the funds.\\n     * @param _spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(\\n        address _owner,\\n        address _spender\\n     )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To increment\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseApproval(\\n        address _spender,\\n        uint256 _addedValue\\n    )\\n        public\\n        returns (bool)\\n    {\\n        allowed[msg.sender][_spender] = (\\n            allowed[msg.sender][_spender].add(_addedValue));\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To decrement\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseApproval(\\n        address _spender,\\n        uint256 _subtractedValue\\n    )\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = allowed[msg.sender][_spender];\\n        if (_subtractedValue > oldValue) {\\n            allowed[msg.sender][_spender] = 0;\\n        } else {\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x33a81ce8e70f59fe7a0d01872dc70e6c46fe7b90dd983c960f074ee907feb93e\"}},\"version\":1}"},"contracts/test/StandardToken.sol:ERC20":{"abi":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"see https://github.com/ethereum/EIPs/issues/20\",\"methods\":{},\"title\":\"ERC20 interface\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/StandardToken.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xabba6407e3cc0e14aa98d71eac7c59513b9b68b4ac734293ac2dbab9d5cb3dfb\"},\"contracts/test/StandardToken.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n    function totalSupply() public view virtual returns (uint256);\\n    function balanceOf(address who) public view virtual returns (uint256);\\n    function transfer(address to, uint256 value) public virtual returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) balances;\\n\\n    uint256 totalSupply_;\\n\\n    /**\\n    * @dev Total number of tokens in existence\\n    */\\n    function totalSupply() public view override returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint256 _value) public override returns (bool) {\\n        require(_to != address(0));\\n        require(_value <= balances[msg.sender], \\\"Transfer: insufficient balance\\\");\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint256 representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public view virtual returns (uint256);\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n    function approve(address spender, uint256 value) public virtual returns (bool);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n    mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param _from address The address which you want to send tokens from\\n     * @param _to address The address which you want to transfer to\\n     * @param _value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"TransferFrom: Can't send to address zero\\\");\\n        require(_value <= balances[_from], \\\"TransferFrom: Inadequate balance\\\");\\n        require(_value <= allowed[_from][msg.sender], \\\"TransferFrom: Inadequate allowance\\\");\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value) public override returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param _owner address The address which owns the funds.\\n     * @param _spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(\\n        address _owner,\\n        address _spender\\n     )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To increment\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseApproval(\\n        address _spender,\\n        uint256 _addedValue\\n    )\\n        public\\n        returns (bool)\\n    {\\n        allowed[msg.sender][_spender] = (\\n            allowed[msg.sender][_spender].add(_addedValue));\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To decrement\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseApproval(\\n        address _spender,\\n        uint256 _subtractedValue\\n    )\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = allowed[msg.sender][_spender];\\n        if (_subtractedValue > oldValue) {\\n            allowed[msg.sender][_spender] = 0;\\n        } else {\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x33a81ce8e70f59fe7a0d01872dc70e6c46fe7b90dd983c960f074ee907feb93e\"}},\"version\":1}"},"contracts/test/StandardToken.sol:ERC20Basic":{"abi":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Simpler version of ERC20 interface See https://github.com/ethereum/EIPs/issues/179\",\"methods\":{},\"title\":\"ERC20Basic\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/StandardToken.sol\":\"ERC20Basic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xabba6407e3cc0e14aa98d71eac7c59513b9b68b4ac734293ac2dbab9d5cb3dfb\"},\"contracts/test/StandardToken.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n    function totalSupply() public view virtual returns (uint256);\\n    function balanceOf(address who) public view virtual returns (uint256);\\n    function transfer(address to, uint256 value) public virtual returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) balances;\\n\\n    uint256 totalSupply_;\\n\\n    /**\\n    * @dev Total number of tokens in existence\\n    */\\n    function totalSupply() public view override returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint256 _value) public override returns (bool) {\\n        require(_to != address(0));\\n        require(_value <= balances[msg.sender], \\\"Transfer: insufficient balance\\\");\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint256 representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public view virtual returns (uint256);\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n    function approve(address spender, uint256 value) public virtual returns (bool);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n    mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param _from address The address which you want to send tokens from\\n     * @param _to address The address which you want to transfer to\\n     * @param _value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"TransferFrom: Can't send to address zero\\\");\\n        require(_value <= balances[_from], \\\"TransferFrom: Inadequate balance\\\");\\n        require(_value <= allowed[_from][msg.sender], \\\"TransferFrom: Inadequate allowance\\\");\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value) public override returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param _owner address The address which owns the funds.\\n     * @param _spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(\\n        address _owner,\\n        address _spender\\n     )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To increment\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseApproval(\\n        address _spender,\\n        uint256 _addedValue\\n    )\\n        public\\n        returns (bool)\\n    {\\n        allowed[msg.sender][_spender] = (\\n            allowed[msg.sender][_spender].add(_addedValue));\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To decrement\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseApproval(\\n        address _spender,\\n        uint256 _subtractedValue\\n    )\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = allowed[msg.sender][_spender];\\n        if (_subtractedValue > oldValue) {\\n            allowed[msg.sender][_spender] = 0;\\n        } else {\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x33a81ce8e70f59fe7a0d01872dc70e6c46fe7b90dd983c960f074ee907feb93e\"}},\"version\":1}"},"contracts/test/StandardToken.sol:StandardToken":{"abi":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"608060405234801561001057600080fd5b50610932806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806370a082311161005b57806370a0823114610149578063a9059cbb1461016f578063d73dd6231461019b578063dd62ed3e146101c757610088565b8063095ea7b31461008d57806318160ddd146100cd57806323b872dd146100e7578063661884631461011d575b600080fd5b6100b9600480360360408110156100a357600080fd5b506001600160a01b0381351690602001356101f5565b604080519115158252519081900360200190f35b6100d561025b565b60408051918252519081900360200190f35b6100b9600480360360608110156100fd57600080fd5b506001600160a01b03813581169160208101359091169060400135610261565b6100b96004803603604081101561013357600080fd5b506001600160a01b038135169060200135610482565b6100d56004803603602081101561015f57600080fd5b50356001600160a01b0316610572565b6100b96004803603604081101561018557600080fd5b506001600160a01b03813516906020013561058d565b6100b9600480360360408110156101b157600080fd5b506001600160a01b0381351690602001356106b4565b6100d5600480360360408110156101dd57600080fd5b506001600160a01b038135811691602001351661074d565b3360008181526002602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b60006001600160a01b0383166102a85760405162461bcd60e51b81526004018080602001828103825260288152602001806108d56028913960400191505060405180910390fd5b6001600160a01b038416600090815260208190526040902054821115610315576040805162461bcd60e51b815260206004820181905260248201527f5472616e7366657246726f6d3a20496e61646571756174652062616c616e6365604482015290519081900360640190fd5b6001600160a01b03841660009081526002602090815260408083203384529091529020548211156103775760405162461bcd60e51b81526004018080602001828103825260228152602001806108b36022913960400191505060405180910390fd5b6001600160a01b0384166000908152602081905260409020546103a0908363ffffffff61077816565b6001600160a01b0380861660009081526020819052604080822093909355908516815220546103d5908363ffffffff6107c116565b6001600160a01b03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610417908363ffffffff61077816565b6001600160a01b03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b3360009081526002602090815260408083206001600160a01b0386168452909152812054808311156104d7573360009081526002602090815260408083206001600160a01b038816845290915281205561050c565b6104e7818463ffffffff61077816565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6001600160a01b031660009081526020819052604090205490565b60006001600160a01b0383166105a257600080fd5b33600090815260208190526040902054821115610606576040805162461bcd60e51b815260206004820152601e60248201527f5472616e736665723a20696e73756666696369656e742062616c616e63650000604482015290519081900360640190fd5b33600090815260208190526040902054610626908363ffffffff61077816565b33600090815260208190526040808220929092556001600160a01b03851681522054610658908363ffffffff6107c116565b6001600160a01b038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b3360009081526002602090815260408083206001600160a01b03861684529091528120546106e8908363ffffffff6107c116565b3360008181526002602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b60006107ba83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061081b565b9392505050565b6000828201838110156107ba576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081848411156108aa5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561086f578181015183820152602001610857565b50505050905090810190601f16801561089c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe5472616e7366657246726f6d3a20496e616465717561746520616c6c6f77616e63655472616e7366657246726f6d3a2043616e27742073656e6420746f2061646472657373207a65726fa2646970667358221220ff0d8ea41dd040c33c5c8b972ffc8c80116a2c3c0ef84fb24b8161cfcc3d7fa064736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the basic standard token. https://github.com/ethereum/EIPs/issues/20 Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"returns\":{\"_0\":\"A uint256 specifying the amount of tokens still available for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"_0\":\"An uint256 representing the amount owned by the passed address.\"}},\"decreaseApproval(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseApproval(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_addedValue\":\"The amount of tokens to increase the allowance by.\",\"_spender\":\"The address which will spend the funds.\"}},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint256 the amount of tokens to be transferred\"}}},\"title\":\"Standard ERC20 token\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/StandardToken.sol\":\"StandardToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xabba6407e3cc0e14aa98d71eac7c59513b9b68b4ac734293ac2dbab9d5cb3dfb\"},\"contracts/test/StandardToken.sol\":{\"content\":\"pragma solidity ^0.6.10;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n    function totalSupply() public view virtual returns (uint256);\\n    function balanceOf(address who) public view virtual returns (uint256);\\n    function transfer(address to, uint256 value) public virtual returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) balances;\\n\\n    uint256 totalSupply_;\\n\\n    /**\\n    * @dev Total number of tokens in existence\\n    */\\n    function totalSupply() public view override returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint256 _value) public override returns (bool) {\\n        require(_to != address(0));\\n        require(_value <= balances[msg.sender], \\\"Transfer: insufficient balance\\\");\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint256 representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public view virtual returns (uint256);\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n    function approve(address spender, uint256 value) public virtual returns (bool);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n    mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param _from address The address which you want to send tokens from\\n     * @param _to address The address which you want to transfer to\\n     * @param _value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"TransferFrom: Can't send to address zero\\\");\\n        require(_value <= balances[_from], \\\"TransferFrom: Inadequate balance\\\");\\n        require(_value <= allowed[_from][msg.sender], \\\"TransferFrom: Inadequate allowance\\\");\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value) public override returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param _owner address The address which owns the funds.\\n     * @param _spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(\\n        address _owner,\\n        address _spender\\n     )\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To increment\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseApproval(\\n        address _spender,\\n        uint256 _addedValue\\n    )\\n        public\\n        returns (bool)\\n    {\\n        allowed[msg.sender][_spender] = (\\n            allowed[msg.sender][_spender].add(_addedValue));\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To decrement\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseApproval(\\n        address _spender,\\n        uint256 _subtractedValue\\n    )\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = allowed[msg.sender][_spender];\\n        if (_subtractedValue > oldValue) {\\n            allowed[msg.sender][_spender] = 0;\\n        } else {\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x33a81ce8e70f59fe7a0d01872dc70e6c46fe7b90dd983c960f074ee907feb93e\"}},\"version\":1}"}},"version":"0.6.10+commit.00c0fcaf.Darwin.appleclang"}
